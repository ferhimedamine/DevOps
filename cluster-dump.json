{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationbff",
      "cluster": "dxpactivityreservationbff",
      "dxpactivityreservationbff-v054": "true",
      "load-balancer-dxpactivityreservationbff": "true",
      "replication-controller": "dxpactivityreservationbff-v054",
      "version": "54"
    },
    "name": "dxpactivityreservationbff-v054",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationbff",
        "cluster": "dxpactivityreservationbff",
        "dxpactivityreservationbff-v054": "true",
        "replication-controller": "dxpactivityreservationbff-v054",
        "version": "54"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationbff",
          "cluster": "dxpactivityreservationbff",
          "dxpactivityreservationbff-v054": "true",
          "load-balancer-dxpactivityreservationbff": "true",
          "replication-controller": "dxpactivityreservationbff-v054",
          "version": "54"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/activity-reservation-bff:1.0.123",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "activity-reservation-system-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "activity-reservation-system-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-system-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-system-bff-configmap"
            },
            "name": "activity-reservation-system-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-system-ui-configmap"
            },
            "name": "activity-reservation-system-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationcrewbff",
      "cluster": "dxpactivityreservationcrewbff",
      "dxpactivityreservationcrewbff-v026": "true",
      "load-balancer-dxpactivityreservationcrewbff": "true",
      "replication-controller": "dxpactivityreservationcrewbff-v026",
      "version": "26"
    },
    "name": "dxpactivityreservationcrewbff-v026",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationcrewbff",
        "cluster": "dxpactivityreservationcrewbff",
        "dxpactivityreservationcrewbff-v026": "true",
        "replication-controller": "dxpactivityreservationcrewbff-v026",
        "version": "26"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationcrewbff",
          "cluster": "dxpactivityreservationcrewbff",
          "dxpactivityreservationcrewbff-v026": "true",
          "load-balancer-dxpactivityreservationcrewbff": "true",
          "replication-controller": "dxpactivityreservationcrewbff-v026",
          "version": "26"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_CREW_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_CREW_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/activity-reservation-crew-bff:1.0.30",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-crew-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "activity-reservation-crew-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "activity-reservation-crew-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-crew-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-crew-bff-configmap"
            },
            "name": "activity-reservation-crew-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-crew-ui-configmap"
            },
            "name": "activity-reservation-crew-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationservice",
      "cluster": "dxpactivityreservationservice",
      "dxpactivityreservationservice-v055": "true",
      "load-balancer-dxpactivityreservationservice": "true",
      "replication-controller": "dxpactivityreservationservice-v055",
      "version": "55"
    },
    "name": "dxpactivityreservationservice-v055",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationservice",
        "cluster": "dxpactivityreservationservice",
        "dxpactivityreservationservice-v055": "true",
        "replication-controller": "dxpactivityreservationservice-v055",
        "version": "55"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationservice",
          "cluster": "dxpactivityreservationservice",
          "dxpactivityreservationservice-v055": "true",
          "load-balancer-dxpactivityreservationservice": "true",
          "replication-controller": "dxpactivityreservationservice-v055",
          "version": "55"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx2048m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/vas-activity-reservation-service:0.6.0.70",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-service",
            "ports": [
              {
                "containerPort": 8403,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "activity-reservation-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-vas-configmap"
            },
            "name": "activity-reservation-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/activity-reservation-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpactivityreservationweb",
      "cluster": "dxpactivityreservationweb",
      "dxpactivityreservationweb-v173": "true",
      "load-balancer-dxpactivityreservationweb": "true",
      "replication-controller": "dxpactivityreservationweb-v173",
      "version": "173"
    },
    "name": "dxpactivityreservationweb-v173",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationweb",
        "cluster": "dxpactivityreservationweb",
        "dxpactivityreservationweb-v173": "true",
        "replication-controller": "dxpactivityreservationweb-v173",
        "version": "173"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationweb",
          "cluster": "dxpactivityreservationweb",
          "dxpactivityreservationweb-v173": "true",
          "load-balancer-dxpactivityreservationweb": "true",
          "replication-controller": "dxpactivityreservationweb-v173",
          "version": "173"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "baseURL",
                "value": "http://10.98.0.113:31030/activity-reservation-system-bff/"
              },
              {
                "name": "piwikURL",
                "value": "http://10.3.100.55/piwik/"
              },
              {
                "name": "siteId",
                "value": "3"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/activity-reservation-webapp:1.0.250",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-webapp",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpbatchjobservice",
      "cluster": "dxpbatchjobservice",
      "dxpbatchjobservice-v004": "true",
      "load-balancer-dxpbatchjobservice": "true",
      "replication-controller": "dxpbatchjobservice-v004",
      "version": "4"
    },
    "name": "dxpbatchjobservice-v004",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpbatchjobservice",
        "cluster": "dxpbatchjobservice",
        "dxpbatchjobservice-v004": "true",
        "replication-controller": "dxpbatchjobservice-v004",
        "version": "4"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpbatchjobservice",
          "cluster": "dxpbatchjobservice",
          "dxpbatchjobservice-v004": "true",
          "load-balancer-dxpbatchjobservice": "true",
          "replication-controller": "dxpbatchjobservice-v004",
          "version": "4"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-spring-batchjob-service:0.6.0.31",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-spring-batchjob-service",
            "ports": [
              {
                "containerPort": 8337,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "spring-batchjob-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/spring-batchjob-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "spring-batchjob-configmap"
            },
            "name": "spring-batchjob-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "8"
    },
    "labels": {
      "app": "dxpboardingservice",
      "cluster": "dxpboardingservice",
      "dxpboardingservice-v010": "true",
      "load-balancer-dxpboardingservice": "true",
      "replication-controller": "dxpboardingservice-v010",
      "version": "10"
    },
    "name": "dxpboardingservice-v010",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpboardingservice",
        "cluster": "dxpboardingservice",
        "dxpboardingservice-v010": "true",
        "replication-controller": "dxpboardingservice-v010",
        "version": "10"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpboardingservice",
          "cluster": "dxpboardingservice",
          "dxpboardingservice-v010": "true",
          "load-balancer-dxpboardingservice": "true",
          "replication-controller": "dxpboardingservice-v010",
          "version": "10"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_BOARDING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-boarding-service:0.6.0.25",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/boarding-service/info",
                "port": 8328,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-boarding-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "boarding-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/boarding-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "boarding-configmap"
            },
            "name": "boarding-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/boarding-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "5"
    },
    "labels": {
      "app": "dxpcontentmanagementservice",
      "cluster": "dxpcontentmanagementservice",
      "dxpcontentmanagementservice-v007": "true",
      "load-balancer-dxpcontentmanagementservice": "true",
      "replication-controller": "dxpcontentmanagementservice-v007",
      "version": "7"
    },
    "name": "dxpcontentmanagementservice-v007",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcontentmanagementservice",
        "cluster": "dxpcontentmanagementservice",
        "dxpcontentmanagementservice-v007": "true",
        "replication-controller": "dxpcontentmanagementservice-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcontentmanagementservice",
          "cluster": "dxpcontentmanagementservice",
          "dxpcontentmanagementservice-v007": "true",
          "load-balancer-dxpcontentmanagementservice": "true",
          "replication-controller": "dxpcontentmanagementservice-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-content-management-service:0.6.0.19",
            "imagePullPolicy": "IfNotPresent",
            "name": "content-management-service",
            "ports": [
              {
                "containerPort": 8060,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "content-management-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/content-management-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "content-management-configmap"
            },
            "name": "content-management-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/contentmanagement-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpdaemonservice",
      "cluster": "dxpdaemonservice",
      "dxpdaemonservice-v017": "true",
      "load-balancer-dxpdaemonservice": "true",
      "replication-controller": "dxpdaemonservice-v017",
      "version": "17"
    },
    "name": "dxpdaemonservice-v017",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdaemonservice",
        "cluster": "dxpdaemonservice",
        "dxpdaemonservice-v017": "true",
        "replication-controller": "dxpdaemonservice-v017",
        "version": "17"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdaemonservice",
          "cluster": "dxpdaemonservice",
          "dxpdaemonservice-v017": "true",
          "load-balancer-dxpdaemonservice": "true",
          "replication-controller": "dxpdaemonservice-v017",
          "version": "17"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "DXP_DAEMON_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/dxp-daemon-service:0.6.10.71",
            "imagePullPolicy": "IfNotPresent",
            "name": "dxp-daemon-service",
            "ports": [
              {
                "containerPort": 8338,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "daemon-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dxp-daemon-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "daemon-configmap"
            },
            "name": "daemon-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpdeviceservice",
      "cluster": "dxpdeviceservice",
      "dxpdeviceservice-v001": "true",
      "load-balancer-dxpdeviceservice": "true",
      "replication-controller": "dxpdeviceservice-v001",
      "version": "1"
    },
    "name": "dxpdeviceservice-v001",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdeviceservice",
        "cluster": "dxpdeviceservice",
        "dxpdeviceservice-v001": "true",
        "replication-controller": "dxpdeviceservice-v001",
        "version": "1"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdeviceservice",
          "cluster": "dxpdeviceservice",
          "dxpdeviceservice-v001": "true",
          "load-balancer-dxpdeviceservice": "true",
          "replication-controller": "dxpdeviceservice-v001",
          "version": "1"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_DEVICE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-device-service:0.6.0.10",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-device-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "device-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/device-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "device-configmap"
            },
            "name": "device-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/device-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpdiningservice",
      "cluster": "dxpdiningservice",
      "dxpdiningservice-v011": "true",
      "load-balancer-dxpdiningservice": "true",
      "replication-controller": "dxpdiningservice-v011",
      "version": "11"
    },
    "name": "dxpdiningservice-v011",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdiningservice",
        "cluster": "dxpdiningservice",
        "dxpdiningservice-v011": "true",
        "replication-controller": "dxpdiningservice-v011",
        "version": "11"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdiningservice",
          "cluster": "dxpdiningservice",
          "dxpdiningservice-v011": "true",
          "load-balancer-dxpdiningservice": "true",
          "replication-controller": "dxpdiningservice-v011",
          "version": "11"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_DINING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-dining-service:0.6.0.11",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-dining-service",
            "ports": [
              {
                "containerPort": 8335,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "dining-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dining-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "dining-configmap"
            },
            "name": "dining-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/dining-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpembarkationadminservice",
      "cluster": "dxpembarkationadminservice",
      "dxpembarkationadminservice-v028": "true",
      "load-balancer-dxpembarkationadminservice": "true",
      "replication-controller": "dxpembarkationadminservice-v028",
      "version": "28"
    },
    "name": "dxpembarkationadminservice-v028",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationadminservice",
        "cluster": "dxpembarkationadminservice",
        "dxpembarkationadminservice-v028": "true",
        "replication-controller": "dxpembarkationadminservice-v028",
        "version": "28"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationadminservice",
          "cluster": "dxpembarkationadminservice",
          "dxpembarkationadminservice-v028": "true",
          "load-balancer-dxpembarkationadminservice": "true",
          "replication-controller": "dxpembarkationadminservice-v028",
          "version": "28"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/vas-embarkationadmin-service:0.2.0.67",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-embarkationadmin-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8405,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "embarkationadmin-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkationadmin-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkationadmin-vas-configmap"
            },
            "name": "embarkationadmin-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/embarkationadmin-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpembarkationbff",
      "cluster": "dxpembarkationbff",
      "dxpembarkationbff-v010": "true",
      "load-balancer-dxpembarkationbff": "true",
      "replication-controller": "dxpembarkationbff-v010",
      "version": "10"
    },
    "name": "dxpembarkationbff-v010",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationbff",
        "cluster": "dxpembarkationbff",
        "dxpembarkationbff-v010": "true",
        "replication-controller": "dxpembarkationbff-v010",
        "version": "10"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationbff",
          "cluster": "dxpembarkationbff",
          "dxpembarkationbff-v010": "true",
          "load-balancer-dxpembarkationbff": "true",
          "replication-controller": "dxpembarkationbff-v010",
          "version": "10"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_EMBARKATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/embarkation-bff:1.0.98",
            "imagePullPolicy": "IfNotPresent",
            "name": "embarkation-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "embarkation-bff-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkation-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkation-bff-configmap"
            },
            "name": "embarkation-bff-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "10"
    },
    "labels": {
      "app": "dxpguestpreferenceservice",
      "cluster": "dxpguestpreferenceservice",
      "dxpguestpreferenceservice-v003": "true",
      "load-balancer-dxpguestpreferenceservice": "true",
      "replication-controller": "dxpguestpreferenceservice-v003",
      "version": "3"
    },
    "name": "dxpguestpreferenceservice-v003",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpguestpreferenceservice",
        "cluster": "dxpguestpreferenceservice",
        "dxpguestpreferenceservice-v003": "true",
        "replication-controller": "dxpguestpreferenceservice-v003",
        "version": "3"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpguestpreferenceservice",
          "cluster": "dxpguestpreferenceservice",
          "dxpguestpreferenceservice-v003": "true",
          "load-balancer-dxpguestpreferenceservice": "true",
          "replication-controller": "dxpguestpreferenceservice-v003",
          "version": "3"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_GUESTPREFERENCE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-guestpreference-service:0.6.0.5",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/guestpreference-service/info",
                "port": 8317,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-guestpreference-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "guestpreference-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/guestpreference-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "guestpreference-configmap"
            },
            "name": "guestpreference-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/guestpreference-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "10"
    },
    "labels": {
      "app": "dxpguestservice",
      "cluster": "dxpguestservice",
      "dxpguestservice-v012": "true",
      "load-balancer-dxpguestservice": "true",
      "replication-controller": "dxpguestservice-v012",
      "version": "12"
    },
    "name": "dxpguestservice-v012",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpguestservice",
        "cluster": "dxpguestservice",
        "dxpguestservice-v012": "true",
        "replication-controller": "dxpguestservice-v012",
        "version": "12"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpguestservice",
          "cluster": "dxpguestservice",
          "dxpguestservice-v012": "true",
          "load-balancer-dxpguestservice": "true",
          "replication-controller": "dxpguestservice-v012",
          "version": "12"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_GUEST_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-guest-service:0.6.0.39",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/guest-service/info",
                "port": 8303,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-guest-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "guest-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/guest-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "guest-configmap"
            },
            "name": "guest-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/guest-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxpidcrossreferenceservice",
      "cluster": "dxpidcrossreferenceservice",
      "dxpidcrossreferenceservice-v009": "true",
      "load-balancer-dxpidcrossreferenceservice": "true",
      "replication-controller": "dxpidcrossreferenceservice-v009",
      "version": "9"
    },
    "name": "dxpidcrossreferenceservice-v009",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpidcrossreferenceservice",
        "cluster": "dxpidcrossreferenceservice",
        "dxpidcrossreferenceservice-v009": "true",
        "replication-controller": "dxpidcrossreferenceservice-v009",
        "version": "9"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpidcrossreferenceservice",
          "cluster": "dxpidcrossreferenceservice",
          "dxpidcrossreferenceservice-v009": "true",
          "load-balancer-dxpidcrossreferenceservice": "true",
          "replication-controller": "dxpidcrossreferenceservice-v009",
          "version": "9"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-idcrossreference-service:0.6.0.16",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/idcrossreference-service/info",
                "port": 8326,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-idcrossreference-service",
            "ports": [
              {
                "containerPort": 8326,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "idcrossreference-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/idcrossreference-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "idcrossreference-configmap"
            },
            "name": "idcrossreference-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/idcrossreference-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpidentityaccessmanagementservice",
      "cluster": "dxpidentityaccessmanagementservice",
      "dxpidentityaccessmanagementservice-v014": "true",
      "load-balancer-dxpidentityaccessmanagementservice": "true",
      "replication-controller": "dxpidentityaccessmanagementservice-v014",
      "version": "14"
    },
    "name": "dxpidentityaccessmanagementservice-v014",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "dxpidentityaccessmanagementservice",
        "cluster": "dxpidentityaccessmanagementservice",
        "dxpidentityaccessmanagementservice-v014": "true",
        "replication-controller": "dxpidentityaccessmanagementservice-v014",
        "version": "14"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpidentityaccessmanagementservice",
          "cluster": "dxpidentityaccessmanagementservice",
          "dxpidentityaccessmanagementservice-v014": "true",
          "load-balancer-dxpidentityaccessmanagementservice": "true",
          "replication-controller": "dxpidentityaccessmanagementservice-v014",
          "version": "14"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DXPKEYSTORE_VALUE",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "dxpkeystore",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-identity-access-management-service:0.6.0.33",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/identityaccessmanagement-service/info",
                "port": 8362,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-identityaccessmanagement-service",
            "ports": [
              {
                "containerPort": 8362,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "identity-access-management-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/identity-access-management-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "identity-access-management-configmap"
            },
            "name": "identity-access-management-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/identityaccessmanagement-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6"
    },
    "labels": {
      "app": "dxpimageprocessingservice",
      "cluster": "dxpimageprocessingservice",
      "dxpimageprocessingservice": "true",
      "pod-template-hash": "3364365674",
      "replication-controller": "dxpimageprocessingservice-v000",
      "version": "0"
    },
    "name": "dxpimageprocessingservice-v000",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "dxpimageprocessingservice",
        "uid": "97a08403-d07c-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "minReadySeconds": 60,
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpimageprocessingservice",
        "cluster": "dxpimageprocessingservice",
        "dxpimageprocessingservice": "true",
        "pod-template-hash": "3364365674",
        "replication-controller": "dxpimageprocessingservice-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpimageprocessingservice",
          "cluster": "dxpimageprocessingservice",
          "dxpimageprocessingservice": "true",
          "pod-template-hash": "3364365674",
          "replication-controller": "dxpimageprocessingservice-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "BASICTOKEN",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "basictoken",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEYID",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkeyid",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEUSER",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemPassword",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-imageprocessing-service:0.6.0.13",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-imageprocessing-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "imageprocessing-properties"
              },
              {
                "mountPath": "/etc/config-server",
                "name": "application-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/imageprocessing-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "imageprocessing-configmap"
            },
            "name": "imageprocessing-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v005": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v005",
      "version": "5"
    },
    "name": "dxplogisticsservice-v005",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v005": "true",
        "replication-controller": "dxplogisticsservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v005": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v008": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v008",
      "version": "8"
    },
    "name": "dxplogisticsservice-v008",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v008": "true",
        "replication-controller": "dxplogisticsservice-v008",
        "version": "8"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v008": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v008",
          "version": "8"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v009": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v009",
      "version": "9"
    },
    "name": "dxplogisticsservice-v009",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v009": "true",
        "replication-controller": "dxplogisticsservice-v009",
        "version": "9"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v009": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v009",
          "version": "9"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpmessagingservice",
      "cluster": "dxpmessagingservice",
      "dxpmessagingservice-v006": "true",
      "load-balancer-dxpmessagingservice": "true",
      "replication-controller": "dxpmessagingservice-v006",
      "version": "6"
    },
    "name": "dxpmessagingservice-v006",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpmessagingservice",
        "cluster": "dxpmessagingservice",
        "dxpmessagingservice-v006": "true",
        "replication-controller": "dxpmessagingservice-v006",
        "version": "6"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmessagingservice",
          "cluster": "dxpmessagingservice",
          "dxpmessagingservice-v006": "true",
          "load-balancer-dxpmessagingservice": "true",
          "replication-controller": "dxpmessagingservice-v006",
          "version": "6"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_MESSAGING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-messaging-service:1.0.0.47",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/messaging-service/info",
                "port": 8306,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-messaging-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "messaging-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/messaging-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "messaging-configmap"
            },
            "name": "messaging-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/messaging-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpmultimediastorageservice",
      "cluster": "dxpmultimediastorageservice",
      "dxpmultimediastorageservice-v021": "true",
      "load-balancer-dxpmultimediastorageservice": "true",
      "replication-controller": "dxpmultimediastorageservice-v021",
      "version": "21"
    },
    "name": "dxpmultimediastorageservice-v021",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "dxpmultimediastorageservice",
        "cluster": "dxpmultimediastorageservice",
        "dxpmultimediastorageservice-v021": "true",
        "replication-controller": "dxpmultimediastorageservice-v021",
        "version": "21"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmultimediastorageservice",
          "cluster": "dxpmultimediastorageservice",
          "dxpmultimediastorageservice-v021": "true",
          "load-balancer-dxpmultimediastorageservice": "true",
          "replication-controller": "dxpmultimediastorageservice-v021",
          "version": "21"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEYID",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkeyid",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEUSER",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemPassword",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-multimediastorage-service:0.6.0.29",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-multimediastorage-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "multimediastorage-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/multimediastorage-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "multimediastorage-configmap"
            },
            "name": "multimediastorage-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/multimediastorage-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxppersonlocationservice",
      "cluster": "dxppersonlocationservice",
      "dxppersonlocationservice-v002": "true",
      "load-balancer-dxppersonlocationservice": "true",
      "replication-controller": "dxppersonlocationservice-v002",
      "version": "2"
    },
    "name": "dxppersonlocationservice-v002",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxppersonlocationservice",
        "cluster": "dxppersonlocationservice",
        "dxppersonlocationservice-v002": "true",
        "replication-controller": "dxppersonlocationservice-v002",
        "version": "2"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxppersonlocationservice",
          "cluster": "dxppersonlocationservice",
          "dxppersonlocationservice-v002": "true",
          "load-balancer-dxppersonlocationservice": "true",
          "replication-controller": "dxppersonlocationservice-v002",
          "version": "2"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-personlocation-service:0.6.0.11",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-personlocation-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "personlocation-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/personlocation-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "personlocation-configmap"
            },
            "name": "personlocation-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/personlocation-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpreferencedataservice",
      "cluster": "dxpreferencedataservice",
      "dxpreferencedataservice-v003": "true",
      "load-balancer-dxpreferencedataservice": "true",
      "replication-controller": "dxpreferencedataservice-v003",
      "version": "3"
    },
    "name": "dxpreferencedataservice-v003",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreferencedataservice",
        "cluster": "dxpreferencedataservice",
        "dxpreferencedataservice-v003": "true",
        "replication-controller": "dxpreferencedataservice-v003",
        "version": "3"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreferencedataservice",
          "cluster": "dxpreferencedataservice",
          "dxpreferencedataservice-v003": "true",
          "load-balancer-dxpreferencedataservice": "true",
          "replication-controller": "dxpreferencedataservice-v003",
          "version": "3"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-referencedata-service:0.6.0.22",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/referencedata-service/info",
                "port": 8311,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-referencedata-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "referencedata-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/referencedata-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "referencedata-configmap"
            },
            "name": "referencedata-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/referencedata-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpreportingservice",
      "cluster": "dxpreportingservice",
      "dxpreportingservice-v010": "true",
      "load-balancer-dxpreportingservice": "true",
      "replication-controller": "dxpreportingservice-v010",
      "version": "10"
    },
    "name": "dxpreportingservice-v010",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreportingservice",
        "cluster": "dxpreportingservice",
        "dxpreportingservice-v010": "true",
        "replication-controller": "dxpreportingservice-v010",
        "version": "10"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreportingservice",
          "cluster": "dxpreportingservice",
          "dxpreportingservice-v010": "true",
          "load-balancer-dxpreportingservice": "true",
          "replication-controller": "dxpreportingservice-v010",
          "version": "10"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_REPORTING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-reporting-service:0.6.0.27",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-reporting-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8370,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "reporting-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/reporting-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "reporting-configmap"
            },
            "name": "reporting-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/reporting-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "11"
    },
    "labels": {
      "app": "dxpsailorframeworkbff",
      "cluster": "dxpsailorframeworkbff",
      "dxpsailorframeworkbff-v013": "true",
      "load-balancer-dxpsailorframeworkbff": "true",
      "replication-controller": "dxpsailorframeworkbff-v013",
      "version": "13"
    },
    "name": "dxpsailorframeworkbff-v013",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsailorframeworkbff",
        "cluster": "dxpsailorframeworkbff",
        "dxpsailorframeworkbff-v013": "true",
        "replication-controller": "dxpsailorframeworkbff-v013",
        "version": "13"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsailorframeworkbff",
          "cluster": "dxpsailorframeworkbff",
          "dxpsailorframeworkbff-v013": "true",
          "load-balancer-dxpsailorframeworkbff": "true",
          "replication-controller": "dxpsailorframeworkbff-v013",
          "version": "13"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/dxp-sailor-framework-bff:1.0.20",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/sailor-framework-bff/version",
                "port": 3014,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "dxp-sailor-framework-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "sailor-framework-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "sailor-framework-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dxp-sailor-framework-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-framework-bff-configmap"
            },
            "name": "sailor-framework-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-framework-ui-configmap"
            },
            "name": "sailor-framework-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpsailorservice",
      "cluster": "dxpsailorservice",
      "dxpsailorservice-v005": "true",
      "load-balancer-dxpsailorservice": "true",
      "replication-controller": "dxpsailorservice-v005",
      "version": "5"
    },
    "name": "dxpsailorservice-v005",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsailorservice",
        "cluster": "dxpsailorservice",
        "dxpsailorservice-v005": "true",
        "replication-controller": "dxpsailorservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsailorservice",
          "cluster": "dxpsailorservice",
          "dxpsailorservice-v005": "true",
          "load-balancer-dxpsailorservice": "true",
          "replication-controller": "dxpsailorservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_SAILOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/vas-sailor-service:0.6.0.18",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/sailorvas-service/info",
                "port": 8404,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "vas-sailor-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "sailor-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/sailor-service"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-vas-configmap"
            },
            "name": "sailor-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpsalesofferservice",
      "cluster": "dxpsalesofferservice",
      "dxpsalesofferservice-v013": "true",
      "replication-controller": "dxpsalesofferservice-v013",
      "version": "13"
    },
    "name": "dxpsalesofferservice-v013",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsalesofferservice",
        "cluster": "dxpsalesofferservice",
        "dxpsalesofferservice-v013": "true",
        "replication-controller": "dxpsalesofferservice-v013",
        "version": "13"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsalesofferservice",
          "cluster": "dxpsalesofferservice",
          "dxpsalesofferservice-v013": "true",
          "replication-controller": "dxpsalesofferservice-v013",
          "version": "13"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SALESOFFER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-salesoffer-service:0.6.0.32",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/salesoffer-service/info",
                "port": 8302,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-salesoffer-service",
            "ports": [
              {
                "containerPort": 8302,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "salesoffer-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/salesoffer-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "salesoffer-configmap"
            },
            "name": "salesoffer-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/salesoffer-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpsalesofferservice",
      "cluster": "dxpsalesofferservice",
      "dxpsalesofferservice-v014": "true",
      "replication-controller": "dxpsalesofferservice-v014",
      "version": "14"
    },
    "name": "dxpsalesofferservice-v014",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsalesofferservice",
        "cluster": "dxpsalesofferservice",
        "dxpsalesofferservice-v014": "true",
        "replication-controller": "dxpsalesofferservice-v014",
        "version": "14"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsalesofferservice",
          "cluster": "dxpsalesofferservice",
          "dxpsalesofferservice-v014": "true",
          "replication-controller": "dxpsalesofferservice-v014",
          "version": "14"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SALESOFFER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-salesoffer-service:0.6.0.33",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/salesoffer-service/info",
                "port": 8302,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-salesoffer-service",
            "ports": [
              {
                "containerPort": 8302,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "salesoffer-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/salesoffer-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "salesoffer-configmap"
            },
            "name": "salesoffer-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/salesoffer-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpsalesorderservice",
      "cluster": "dxpsalesorderservice",
      "dxpsalesorderservice-v023": "true",
      "load-balancer-dxpsalesorderservice": "true",
      "replication-controller": "dxpsalesorderservice-v023",
      "version": "23"
    },
    "name": "dxpsalesorderservice-v023",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsalesorderservice",
        "cluster": "dxpsalesorderservice",
        "dxpsalesorderservice-v023": "true",
        "replication-controller": "dxpsalesorderservice-v023",
        "version": "23"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsalesorderservice",
          "cluster": "dxpsalesorderservice",
          "dxpsalesorderservice-v023": "true",
          "load-balancer-dxpsalesorderservice": "true",
          "replication-controller": "dxpsalesorderservice-v023",
          "version": "23"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SALESORDER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-salesorder-service-kube:0.6.0.20",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/salesorder-service/info",
                "port": 8301,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-salesorder-service-kube",
            "ports": [
              {
                "containerPort": 8301,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "salesorder-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/salesorder-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "salesorder-configmap"
            },
            "name": "salesorder-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/salesorder-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpshipservice",
      "cluster": "dxpshipservice",
      "dxpshipservice-v012": "true",
      "load-balancer-dxpshipservice": "true",
      "replication-controller": "dxpshipservice-v012",
      "version": "12"
    },
    "name": "dxpshipservice-v012",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpshipservice",
        "cluster": "dxpshipservice",
        "dxpshipservice-v012": "true",
        "replication-controller": "dxpshipservice-v012",
        "version": "12"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpshipservice",
          "cluster": "dxpshipservice",
          "dxpshipservice-v012": "true",
          "load-balancer-dxpshipservice": "true",
          "replication-controller": "dxpshipservice-v012",
          "version": "12"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SHIP_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-ship-service:0.6.0.34",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/ship-service/info",
                "port": 8322,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-ship-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "ship-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/ship-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "ship-configmap"
            },
            "name": "ship-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/ship-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpsocialnetworkingservice",
      "cluster": "dxpsocialnetworkingservice",
      "dxpsocialnetworkingservice-v008": "true",
      "load-balancer-dxpsocialnetworkingservice": "true",
      "replication-controller": "dxpsocialnetworkingservice-v008",
      "version": "8"
    },
    "name": "dxpsocialnetworkingservice-v008",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsocialnetworkingservice",
        "cluster": "dxpsocialnetworkingservice",
        "dxpsocialnetworkingservice-v008": "true",
        "replication-controller": "dxpsocialnetworkingservice-v008",
        "version": "8"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsocialnetworkingservice",
          "cluster": "dxpsocialnetworkingservice",
          "dxpsocialnetworkingservice-v008": "true",
          "load-balancer-dxpsocialnetworkingservice": "true",
          "replication-controller": "dxpsocialnetworkingservice-v008",
          "version": "8"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-socialnetworking-service:0.6.0.16",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/socialnetworking-service/info",
                "port": 8321,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-socialnetworking-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "socialnetworking-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/socialnetworking-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "socialnetworking-configmap"
            },
            "name": "socialnetworking-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/socialnetworking-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpteammemberservice",
      "cluster": "dxpteammemberservice",
      "dxpteammemberservice-v005": "true",
      "load-balancer-dxpteammemberservice": "true",
      "replication-controller": "dxpteammemberservice-v005",
      "version": "5"
    },
    "name": "dxpteammemberservice-v005",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpteammemberservice",
        "cluster": "dxpteammemberservice",
        "dxpteammemberservice-v005": "true",
        "replication-controller": "dxpteammemberservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpteammemberservice",
          "cluster": "dxpteammemberservice",
          "dxpteammemberservice-v005": "true",
          "load-balancer-dxpteammemberservice": "true",
          "replication-controller": "dxpteammemberservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-teammember-service:0.6.0.16",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/teammember-service/info",
                "port": 8315,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-teammember-service",
            "ports": [
              {
                "containerPort": 8315,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "teammember-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/teammember-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "teammember-configmap"
            },
            "name": "teammember-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/teammember-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpvendorservice",
      "cluster": "dxpvendorservice",
      "dxpvendorservice-v014": "true",
      "replication-controller": "dxpvendorservice-v014",
      "version": "14"
    },
    "name": "dxpvendorservice-v014",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvendorservice",
        "cluster": "dxpvendorservice",
        "dxpvendorservice-v014": "true",
        "replication-controller": "dxpvendorservice-v014",
        "version": "14"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvendorservice",
          "cluster": "dxpvendorservice",
          "dxpvendorservice-v014": "true",
          "replication-controller": "dxpvendorservice-v014",
          "version": "14"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VENDOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-vendor-service:0.6.0.21",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/vendor-service/info",
                "port": 8319,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-vendor-service",
            "ports": [
              {
                "containerPort": 8319,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "vendor-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/vendor-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "vendor-configmap"
            },
            "name": "vendor-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/vendor-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6"
    },
    "labels": {
      "app": "dxpvisitorservice",
      "cluster": "dxpvisitorservice",
      "dxpvisitorservice-v005": "true",
      "load-balancer-dxpvisitorservice": "true",
      "replication-controller": "dxpvisitorservice-v005",
      "version": "5"
    },
    "name": "dxpvisitorservice-v005",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvisitorservice",
        "cluster": "dxpvisitorservice",
        "dxpvisitorservice-v005": "true",
        "replication-controller": "dxpvisitorservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvisitorservice",
          "cluster": "dxpvisitorservice",
          "dxpvisitorservice-v005": "true",
          "load-balancer-dxpvisitorservice": "true",
          "replication-controller": "dxpvisitorservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VISITOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-visitor-service:0.6.0.26",
            "imagePullPolicy": "IfNotPresent",
            "name": "visitor-service",
            "ports": [
              {
                "containerPort": 8316,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "visitor-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/visitor-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "visitor-configmap"
            },
            "name": "visitor-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/visitor-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-svc",
      "name": "traefik-ingress-lb-svc",
      "pod-template-hash": "3702663936"
    },
    "name": "traefik-ingress-controller-svc-3702663936",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-svc",
        "uid": "5a902c36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-svc",
        "name": "traefik-ingress-lb-svc",
        "pod-template-hash": "3702663936"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-svc",
          "name": "traefik-ingress-lb-svc",
          "pod-template-hash": "3702663936"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-d",
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=svc",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-svc",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-svc",
        "serviceAccountName": "traefik-ingress-controller-svc"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-web",
      "name": "traefik-ingress-lb-web",
      "pod-template-hash": "2025279088"
    },
    "name": "traefik-ingress-controller-web-2025279088",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-web",
        "uid": "5aa88a36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-web",
        "name": "traefik-ingress-lb-web",
        "pod-template-hash": "2025279088"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-web",
          "name": "traefik-ingress-lb-web",
          "pod-template-hash": "2025279088"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-d",
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=web",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-web",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-web",
        "serviceAccountName": "traefik-ingress-controller-web"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "component": "elasticsearch",
      "pod-template-hash": "1675522066",
      "role": "master"
    },
    "name": "es-master-1675522066",
    "namespace": "elk",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "es-master",
        "uid": "e87bac38-cb67-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "component": "elasticsearch",
        "pod-template-hash": "1675522066",
        "role": "master"
      }
    },
    "template": {
      "metadata": {
        "annotations": {
          "pod.alpha.kubernetes.io/init-containers": "[{\"name\":\"init-sysctl\",\"image\":\"busybox\",\"command\":[\"sysctl\",\"-w\",\"vm.max_map_count=262144\"],\"resources\":{},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"imagePullPolicy\":\"IfNotPresent\",\"securityContext\":{\"privileged\":true}}]",
          "pod.beta.kubernetes.io/init-containers": "[{\"name\":\"init-sysctl\",\"image\":\"busybox\",\"command\":[\"sysctl\",\"-w\",\"vm.max_map_count=262144\"],\"resources\":{},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"imagePullPolicy\":\"IfNotPresent\",\"securityContext\":{\"privileged\":true}}]"
        },
        "creationTimestamp": null,
        "labels": {
          "component": "elasticsearch",
          "pod-template-hash": "1675522066",
          "role": "master"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "NAMESPACE",
                "valueFrom": {
                  "fieldRef": {
                    "apiVersion": "v1",
                    "fieldPath": "metadata.namespace"
                  }
                }
              },
              {
                "name": "NODE_NAME",
                "valueFrom": {
                  "fieldRef": {
                    "apiVersion": "v1",
                    "fieldPath": "metadata.name"
                  }
                }
              },
              {
                "name": "CLUSTER_NAME",
                "value": "elasticsearch-cluster"
              },
              {
                "name": "NUMBER_OF_MASTERS",
                "value": "2"
              },
              {
                "name": "NODE_MASTER",
                "value": "true"
              },
              {
                "name": "NODE_INGEST",
                "value": "false"
              },
              {
                "name": "NODE_DATA",
                "value": "false"
              },
              {
                "name": "HTTP_ENABLE",
                "value": "false"
              },
              {
                "name": "ES_JAVA_OPTS",
                "value": "-Xms256m -Xmx256m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/elasticsearch-custom",
            "imagePullPolicy": "Always",
            "name": "es-master",
            "ports": [
              {
                "containerPort": 9300,
                "name": "transport",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "securityContext": {
              "capabilities": {
                "add": [
                  "IPC_LOCK",
                  "SYS_RESOURCE"
                ]
              },
              "privileged": false
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/data",
                "name": "storage"
              },
              {
                "mountPath": "/usr/share/elasticsearch/config/",
                "name": "elasticsearch-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "initContainers": [
          {
            "command": [
              "sysctl",
              "-w",
              "vm.max_map_count=262144"
            ],
            "image": "busybox",
            "imagePullPolicy": "IfNotPresent",
            "name": "init-sysctl",
            "resources": {},
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "storage"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "elasticsearch-configmap"
            },
            "name": "elasticsearch-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "pod-template-hash": "802613787",
      "run": "kibana"
    },
    "name": "kibana-802613787",
    "namespace": "elk",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kibana",
        "uid": "5eb66419-cb5e-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "pod-template-hash": "802613787",
        "run": "kibana"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "pod-template-hash": "802613787",
          "run": "kibana"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/kibana",
            "imagePullPolicy": "IfNotPresent",
            "name": "kibana",
            "ports": [
              {
                "containerPort": 5601,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/kibana/kibana.yml",
                "name": "kibana-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "kibana-configmap"
            },
            "name": "kibana-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "alertmanager",
      "pod-template-hash": "4083012769"
    },
    "name": "alertmanager-4083012769",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "alertmanager",
        "uid": "8b664410-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "alertmanager",
        "pod-template-hash": "4083012769"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "alertmanager",
          "pod-template-hash": "4083012769"
        },
        "name": "alertmanager"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-config.file=/etc/alertmanager/config.yml",
              "-storage.path=/alertmanager"
            ],
            "image": "quay.io/prometheus/alertmanager:v0.7.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "alertmanager",
            "ports": [
              {
                "containerPort": 9093,
                "name": "alertmanager",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/alertmanager",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/alertmanager-templates",
                "name": "templates-volume"
              },
              {
                "mountPath": "/alertmanager",
                "name": "alertmanager"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager-templates"
            },
            "name": "templates-volume"
          },
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "alertmanager"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "grafana",
      "component": "core",
      "pod-template-hash": "4152035735"
    },
    "name": "grafana-core-4152035735",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "grafana-core",
        "uid": "8b7364fe-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "grafana",
        "component": "core",
        "pod-template-hash": "4152035735"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "grafana",
          "component": "core",
          "pod-template-hash": "4152035735"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "GF_AUTH_BASIC_ENABLED",
                "value": "true"
              },
              {
                "name": "GF_AUTH_ANONYMOUS_ENABLED",
                "value": "false"
              }
            ],
            "image": "grafana/grafana:4.2.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "grafana-core",
            "readinessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/login",
                "port": 3000,
                "scheme": "HTTP"
              },
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var",
                "name": "grafana-persistent-storage"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "grafana-persistent-storage"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "2",
      "deployment.kubernetes.io/max-replicas": "3",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kube-state-metrics",
      "pod-template-hash": "810928288"
    },
    "name": "kube-state-metrics-810928288",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kube-state-metrics",
        "uid": "8b9ef709-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "kube-state-metrics",
        "pod-template-hash": "810928288"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kube-state-metrics",
          "pod-template-hash": "810928288"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "gcr.io/google_containers/kube-state-metrics:v0.5.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "kube-state-metrics",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "kube-state-metrics",
        "serviceAccountName": "kube-state-metrics"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "170368795"
    },
    "name": "prometheus-core-170368795",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "8b99be54-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "170368795"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "170368795"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "700M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "3958872088"
    },
    "name": "prometheus-core-3958872088",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "8b99be54-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "3958872088"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "3958872088"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "In",
                      "values": [
                        "node1"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "500M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              },
              {
                "mountPath": "/prometheus/data",
                "name": "prometheus-data"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          },
          {
            "hostPath": {
              "path": "/mnt/efs"
            },
            "name": "prometheus-data"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3",
      "deployment.kubernetes.io/revision-history": "1"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "549408679"
    },
    "name": "prometheus-core-549408679",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "8b99be54-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "549408679"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "549408679"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "500M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "basictoken": "QmFzaWMgTkRsbE1UUTJOekV0TXpKa015MDBNV1U0TFdJMU56a3RaRGMwTjJJMU5HWm1aREl6T25ObFkzSmxkQT09",
    "dxpkeystore": "ZHhwMTIzNA==",
    "fileSystemPassword": "eWVsbG93Kjk5",
    "fileSystemUserName": "c2FtYmF1c2Vy",
    "password": "VlZwZ3VzZXIqMTAx",
    "s3bucketkey": "b254Zkx5N1FSMkdRdGk1OFNvSExxc21lYnVXVFdwVjE4aU8wSDJRKw==",
    "s3bucketkeyid": "QUtJQUpUTjVQWFJSVzdXSUZNR1E=",
    "username": "dnZwZ3VzZXI="
  },
  "kind": "Secret",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"basictoken\":\"QmFzaWMgTkRsbE1UUTJOekV0TXpKa015MDBNV1U0TFdJMU56a3RaRGMwTjJJMU5HWm1aREl6T25ObFkzSmxkQT09\",\"dxpkeystore\":\"ZHhwMTIzNA==\",\"fileSystemPassword\":\"eWVsbG93Kjk5\",\"fileSystemUserName\":\"c2FtYmF1c2Vy\",\"password\":\"VlZwZ3VzZXIqMTAx\",\"s3bucketkey\":\"b254Zkx5N1FSMkdRdGk1OFNvSExxc21lYnVXVFdwVjE4aU8wSDJRKw==\",\"s3bucketkeyid\":\"QUtJQUpUTjVQWFJSVzdXSUZNR1E=\",\"username\":\"dnZwZ3VzZXI=\"},\"kind\":\"Secret\",\"metadata\":{\"annotations\":{},\"name\":\"app-secrets\",\"namespace\":\"config1\"},\"type\":\"Opaque\"}\n"
    },
    "name": "app-secrets",
    "namespace": "config1"
  },
  "type": "Opaque"
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "config1"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-crew-bff-service.yml": "selfUrl: \"http://10.98.0.113:31032/activity-reservation-crew-bff/\"\nconsumerAppName: \"activity-reservation-crew-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"http://10.98.0.113:31310/multimediastorage-service/\""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-crew-bff-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-crew-ui-service.yml": "beaconScanningTimeDurationInSeconds: 100\nchannels: ['NC_ARS_T']\ncouchBucketName: 'appdocstore' \nchatSyncBucketName: 'dxpawschat'\nloggingBucketName: 'dxplogging'\nloggingMode: 'info'\nmediaItemUrl: 'http://dxpship.decurtiscorp.com/svc/multimediastorage-service/mediaitems/'\nappointmentChannel: 'ARS_NC_NC0007_Appointment'"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-crew-ui-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-system-bff-service.yml": "selfUrl: \"http://10.98.0.113:31030/activity-reservation-system-bff/\"\nconsumerAppName: \"activity-reservation-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"http://10.98.0.113:31310/multimediastorage-service/\"\nisDisabledActivityRequired : false\nisDisabledActivitySlotRequired: false\ninventoryBasedProductCode: \"I\"\ninProgressCartStatusId: 1\nactivityCartTypeId: 2"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-system-bff-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-system-ui-service.yml": "inProgressCartStatusId: 1\ncheckedOutCartStatusId: 2"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-system-ui-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-vas-service.yml": "inventory:\n holdtime:\n  excursion: 14\nlogLevel: INFO\nhibernateLogLevel: INFO\nseawareBaseUrl: http://10.3.0.14:8280/ota/rest \n#seawareBaseUrl: http://activity-reservation-service.getsandbox.com\nscheduler:\n  timer: 0 0/5 * * * ?\nkafka:\n topic:\n  appointments: ars-vas.activity-reservation\n  product: ProductTypes\n send:\n  appointmentEvent: true\n  productEvent: false"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-vas-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "application.yml": "spring:\n  datasource:\n    hikari:\n      driver-class-name: org.postgresql.Driver\n      username: ${DB_USERNAME}\n      password: ${DB_PASSWORD}\n      maximum-pool-size: 20\n      connection-timeout: 10000\n      idle-timeout: 30000\n      minimum-idle: 1\n      max-lifetime: 60000\n\n  data:\n    jpa:\n      repositories:\n        enabled: true\n    #mongodb:\n      #database: Reservation\n      #host : 10.3.100.55\n      #port: 27017\n  jmx:\n    enabled: false\n\nhibernate:\n  dialect: org.hibernate.dialect.PostgreSQLDialect\n  format_sql: false\n  show_sql: true\n\nformat:\n  date: yyyy-MM-dd\n  datetime: yyyy-MM-dd'T'HH:mm:ss\n\nhibernateLogLevel: ERROR\nlogLevel: INFO\n\nlog:\n  level:\n    hibernate: INFO\n    service: INFO\n    dbpool: OFF\ntimeout:\n  db:\n    transaction: 10\n    \nmanagement:\n    security:\n        enabled: false\nsecurity:\n    basic:\n        enabled: true\nredis:\n  host:\n    name: 10.98.0.232\n  port: 6379 \n\nkafka:\n bootstrap:\n  servers: 10.98.0.65:9092\n serializer:\n  key: org.apache.kafka.common.serialization.StringSerializer\n  value: org.apache.kafka.common.serialization.StringSerializer\n\n\n\n#tenant:\n  #service:\n        #uri: http://10.8.196.58:8327/tenantmanager-service/componentsettings\n\n#Authentication:\n  #service:\n        #uri: http://10.8.196.42:8308/authentication-service/oauth/token?grant_type=client_credentials\nserver:\n  tomcat:\n   accesslog:\n      directory: ${TOMCAT_LOG_LOCATION}\n      enabled: true\n      rotate: true\n      buffered: true\n      pattern: \"{\\\"Hostname\\\":\\\"%h\\\", \\\"Logical username from identd\\\":\\\"%l\\\", \\\"Remote user\\\":\\\"%u\\\", \\\"Remote IP Address\\\":\\\"%a\\\", \\\"Request protocol\\\":\\\"%H\\\", \\\"Query string\\\":\\\"%q\\\", \\\"First line of Request\\\":\\\"%r\\\", \\\"Date&Time\\\":\\\"%t\\\", \\\"HTTP Status code\\\":\\\"%s\\\", \\\"Current Request Thread Name\\\":\\\"%I\\\",\\\"Bytes Sent\\\":\\\"%b\\\", \\\"Time taken to process the request\\\":\\\"%D\\\", \\\"Local IPAdderss\\\":\\\"%A\\\", \\\"Local port\\\":\\\"%p\\\", \\\"Time taken to Commit the Response\\\":\\\"%F\\\", \\\"Request Method\\\":\\\"%m\\\", \\\" User SessionID\\\":\\\"%S\\\", \\\"Requested URL path\\\":\\\"%U\\\", \\\"Local ServerName\\\":\\\"%v\\\"}\"\n   background-processor-delay: 5\n  compression:\n    enabled: true\n    mime-types:\n    - application/json\n    - application/hal+json\n    - text/html\n    - text/plain\n    \ndaemon:\n service:\n  resvas:\n   isDemoMode: true\n clientId: 2b9a83ed-2a16-41c9-838a-82ca48aff898\n secretId: secret\n   \nsyncgateway:\n  username: vvdevappdocstorenew\n  password: yellow*99\n  multimedia:\n    username: vvdev\n    password: yellow*99\n  \ndaemonrange:\n  isrange: false\n  numberofdaysembark: 5\n  numberofdaysdebark: 2\n   \nurl:\n    path:\n        guest: http://dxpguestservice/guest-service/\n        reporting: http://dxpreportingservice/reporting-service/\n        salesoffer: http://dxpsalesofferservice/salesoffer-service/\n        salesorder: http://dxpsalesorderservice/salesorder-service/\n        vendor: http://dxpvendorservice/vendor-service/\n        recommendations: http://recommendationsapi.getsandbox.com/\n        activityreservation: http://dxpactivityreservationservice/activity-reservation-service/\n        contentmanagement: http://dxpcontentmanagementservice/content-management-service/\n        identityaccessmanagement: http://dxpidentityaccessmanagementservice/identityaccessmanagement-service/\n        guestpreference: http://dxpguestpreferenceservice/guestpreference-service/\n        referencedata: http://dxpreferencedataservice/referencedata-service/\n        teammember: http://dxpteammemberservice/teammember-service/\n        ship: http://dxpshipservice/ship-service/\n        sailorVas: http://dxpsailorservice/sailorvas-service/\n        embarkation: http://dxpembarkationservice/embarkation-service/\n        multimedia: http://dxpmultimediastorageservice/multimediastorage-service/\n        socialnetworking: http://dxpsocialnetworkingservice/socialnetworking-service/\n        personlocation: http://dxppersonlocationservice/personlocation-service/\n        idcrossreference: http://dxpidcrossreferenceservice/idcrossreference-service\n        rule: http://dxpruleservice/rule-service/\n        couchbase: http://10.98.0.85:4984/\n        boarding: http://dxpboardingservice/boarding-service/\n        device: http://dxpdeviceservice/device-service/\n        messaging: http://dxpmessagingservice/messaging-service/\n        embarkationadmin: http://dxpembarkationadminservice/embarkationadmin-service/\n        visitor: http://dxpvisitorservice/visitor-service/\n        multimediaPublicURL: http://vvship.d-aws-vxp.com/svc/multimediastorage-service/\n        cart: http://dxpcartservice/cart-service\n        nclURL : https://qa-api.ncl.com/\n        fidelio: http://167.118.6.146/FCWebServices/FCWebServices.asmx/FidelioSPMSWSJsonPost\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "application-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "authentication-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/authentication\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/authentication\nkeystore:\n  password: dxp1234"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "authentication-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "boarding-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/boarding"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "boarding-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "cart-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/cart\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/cart"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "cart-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "central-config-doc.yml": "{\n  \"AppBuckets\": {\n    \"Chat\": {\n      \"Name\": \"dxpawschat\",\n      \"Password\": \"yellow*99\",\n      \"Uid\": \"vvdevappdocstorenew\"\n    },\n    \"Data\": {\n      \"Name\": \"appdocstorenew\",\n      \"Password\": \"yellow*99\",\n      \"Uid\": \"vvdevappdocstorenew\"\n    },\n    \"Logging\": {\n      \"Name\": \"dxplogging\",\n      \"Password\": \"yellow*99\",\n      \"Uid\": \"vvdevappdocstorenew\"\n    }\n  },\n  \"AppChannels\": {\n    \"ACI\": [\n      \"emb_aci_t\",\n      \"Master\"\n    ],\n    \"Airport\": [\n      \"emb_ap_t\",\n      \"Master\"\n    ],\n    \"GangWay\": [\n      \"emb_gw_t\",\n      \"Master\"\n    ],\n    \"Validate\": [\n      \"emb_va_t\",\n      \"Master\"\n    ]\n  },\n  \"AppConfig\": {\n    \"LoggingMode\": true,\n    \"NSDefaultMode\": \"Ship\",\n    \"NearByMode\": true\n  },\n  \"Brands\": [\n    {\n      \"BrandID\": \"CEEE93F2-B284-E611-80C1-00155DF80332\",\n      \"Code\": \"DX\",\n      \"Name\": \"Norwegian Cruise Line\"\n    },\n    {\n      \"BrandID\": \"0B22E08E-E4AF-E611-80C5-00155DF80332\",\n      \"Code\": \"DX1\",\n      \"Name\": \"Decurtis Experience Platform\"\n    }\n  ],\n  \"BuildConfiguration\": {\n    \"ACI\": {\n      \"AppLocalDBName\": \"vvdevembarkation\",\n      \"ZipPostfix\": \"embarkationtext\"\n    },\n    \"Airport\": {\n      \"AppLocalDBName\": \"vvdevembarkation\",\n      \"ZipPostfix\": \"embarkationtext\"\n    },\n    \"GangWay\": {\n      \"AppLocalDBName\": \"vvdevgangway\",\n      \"ZipPostfix\": \"gangwaytext\"\n    },\n    \"Validate\": {\n      \"AppLocalDBName\": \"vvdevembarkation\",\n      \"ZipPostfix\": \"embarkationtext\"\n    }\n  },\n  \"Ships\": [\n    {\n      \"BrandKey\": \"DX\",\n      \"Code\": \"BX\",\n      \"ShipName\": \"Bliss\",\n      \"ShipURLs\": {\n        \"AuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/authenticate\",\n        \"BaseSyncUrl\": \"http://10.98.0.85:4984/\",\n        \"DBZipDownloadURL\": \"http://10.98.0.85:8080/CBLWeb/downloadzip/\",\n        \"MediaItemUrl\": \"https://vv.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\",\n        \"SocialAuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/sociallogin\",\n        \"SsnIds\": [\n          \"DeCurtis\",\n          \"DeCurtis1\"\n        ]\n      }\n    },\n    {\n      \"BrandKey\": \"DX\",\n      \"Code\": \"DX\",\n      \"ShipName\": \"Dream\",\n      \"ShipURLs\": {\n        \"AuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/authenticate\",\n        \"BaseSyncUrl\": \"http://10.98.0.85:4984/\",\n        \"DBZipDownloadURL\": \"http://10.98.0.85:8080/CBLWeb/downloadzip/\",\n        \"MediaItemUrl\": \"https://vv.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\",\n        \"SocialAuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/sociallogin\",\n        \"SsnIds\": [\n          \"DeCurtis\",\n          \"DeCurtis1\"\n        ]\n      }\n    }\n  ],\n  \"ShoreURLs\": {\n    \"AuthUrl\": \"https://vv.d-aws-vxp.com/svc/embarkation-bff/user/authenticate\",\n    \"BaseSyncUrl\": \"http://10.3.100.115:4984/\",\n    \"DBZipDownloadURL\": \"http://10.3.100.115:8080/CBLWeb/downloadzip/\",\n    \"MediaItemUrl\": \"https://ncl-shore.decurtiscorp.com/svc/multimediastorage-service/mediaitems/\",\n    \"SocialAuthUrl\": \"https://ncl-shore.decurtiscorp.com/svc/embarkation-bff/user/sociallogin\",\n    \"SsnIds\": [\n      \"DeCurtis\",\n      \"DeCurtis1\"\n    ]\n  },\n  \"_id\": \"CentralConfiguration::8ea12580-8844-4d07-a72d-692b90f0b113\",\n  \"_rev\": \"7-f0ca19b94727720dca450e0039482096\",\n  \"channels\": [\n    \"Master\"\n  ],\n  \"type\": \"CentralConfiguration\"\n}"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "central-config-doc-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "configmap-daemon-service.yml": "app:\n  configMapPath: /etc/couchdb-configs/centralconfig\n\nfile:\n  extension: yml\n\nsync:\n  gateway:\n    url: http://10.98.0.85:4984\n    username: vvdevappdocstorenew\n    password: yellow*99\n\nbucket:\n  name: appdocstorenew\n\nwatch:\n  interval:\n    time: 10000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "configmap-daemon-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "content-management-service.yml": "magnoliaBaseURL: http://10.98.0.42:8080/magnoliaPublic/\nmagnoliaAuthKey: c3VwZXJ1c2VyOnN1cGVydXNlcg==\ncmsName: MagnoliaCMS"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "content-management-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "daemon-service.yml": "spring:\n datasource:\n  url: jdbc:postgresql://10.98.0.238:5432/batch_job\n  hikari:\n   jdbc-url: jdbc:postgresql://10.98.0.238:5432/batch_job\n                    \ncouchbase:\n   bucket:\n    ars: appdocstorenew\n    resvas: appdocstorenew/\n    module: sailorframework/\n    oci: appdocstorenew/\n    embarkationadminvas: appdocstorenew/\n    multimedia: multimedia/\n    guestcore: appdocstorenew/\n   shipcode:\n    ars: VC\n\nkafka:\n topic:\n  ncl:\n   ship:\n    fidelio: ars-vas.activity-reservation\n  appointment: ars-vas.activity-reservation\n  resvas: res-vas.voyage-reservation\n  module: devicecontent-core.module\n  oci: embarkation-vas.oci\n  embarkationadminvas: embarkationadmin-vas.gangway\n  guestcore: guest-core.guest\n group: \n  ncl:\n   ship:\n    fidelio: ars-ncl\n  appointment: ars-res0\n  resvas: res-vas\n  module: dev-con\n  oci: oci-embarkation\n  embarkationadminvas: embarkationadmin-vas\n  guestcore: guest-guestcore\n  \ndaemon:\n module:\n  ncl: false  \n\nhibernateLogLevel: INFO"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "daemon-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "device-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/device\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/device"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "device-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "dining-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/dining\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/dining"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "dining-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkation-bff-service.yml": "selfUrl: \"http://vvship.d-aws-vxp.com/svc/embarkation-bff\"\nconsumerAppName: \"embarkation-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\nmultimedia: \"http://vvship.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\ngoogleLoginSourceId: \"a3290d44-785d-11e7-959e-0a1a4261e962\"\nidCrossTeamMemberSourceId: \"29979f56-831e-11e7-a99f-0a1a4261e962\"\nidCrossWearableSourceId: \"15c927d1-e90a-e711-80c9-a06699100836\"\nauthLoginSourceId: \"12c927d1-e90a-e711-80c9-a06699100836\"\nuserTypeId: \"ba0e0fc5-9bf6-4310-b6e4-829fe6b45afb\"\nrequestTimeoutMiliseconds: 5000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkation-bff-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkationadmin-vas-service.yml": "kafka:\n    topic:\n        admin: embarkationadmin-vas.gangway\n    bypass: false\n    \nhttp:\n    connection-pool:\n        configuration:\n              connect-timeout: 20000\n              max-total: 150\n              connection-request-timeout: 20000\n              socket-timeout: 20000\nlogLevel: INFO\nhibernateLogLevel: ERROR\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkationadmin-vas-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "APPLICATION_PROPERTIES_PATH": "/etc/config-server/application.yml",
    "BFF_ACTIVITY_RESERVATION_CREW_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/activity-reservation-crew-ui-service.yml",
    "BFF_ACTIVITY_RESERVATION_CREW_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/activity-reservation-crew-bff-service.yml",
    "BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/activity-reservation-system-ui-service.yml",
    "BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/activity-reservation-system-bff-service.yml",
    "BFF_DEPOSIT_CONSUMER_PROPERTIES_PATH": "/etc/config/ui-applications/deposit-ui-service.yml",
    "BFF_DEPOSIT_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/deposit-bff-service.yml",
    "BFF_EMBARKATION_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/embarkation-bff-service.yml",
    "BFF_MODERATE_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/moderate-online-check-in-ui-service.yml",
    "BFF_MODERATE_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/moderate-online-check-in-bff-service.yml",
    "BFF_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/online-check-in-ui-service.yml",
    "BFF_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/online-check-in-bff-service.yml",
    "BFF_RESERVATION_CONSUMER_PROPERTIES_PATH": "/etc/config/ui-applications/reservation-ui-service.yml",
    "BFF_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/reservation-bff-service.yml",
    "BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/sailor-framework-ui-service.yml",
    "BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/sailor-framework-bff-service.yml",
    "CORE_BOARDING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/boarding-service.yml",
    "CORE_CART_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/cart-service.yml",
    "CORE_CHILDREGISTRATION_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/childregistration-service.yml",
    "CORE_COMPONENTCATALOG_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/componentcatalog-service.yml",
    "CORE_DEAMON_APPDATAPOPULATOR_PROPERTIES_PATH": "/etc/config/core-services/deamon-appdatapopulator-service.yml",
    "CORE_DEVICECONTENT_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/devicecontent-service.yml",
    "CORE_DEVICE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/device-service.yml",
    "CORE_DINING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/dining-service.yml",
    "CORE_EVENTSTORE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/eventstore-service.yml",
    "CORE_FOODNBEVERAGE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/foodnbeverage-service.yml",
    "CORE_GUESTMULTIMEDIA_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guestmultimedia-service.yml",
    "CORE_GUESTPREFERENCE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guestpreference-service.yml",
    "CORE_GUEST_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guest-service.yml",
    "CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/idcrossreference-service.yml",
    "CORE_INCIDENTMANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/incident-service.yml",
    "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/logistics-service.yml",
    "CORE_LUGGAGE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/luggage-service.yml",
    "CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/personlocation-service.yml",
    "CORE_SALESOFFER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/salesoffer-service.yml",
    "CORE_SALESORDER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/salesorder-service.yml",
    "CORE_SHIP_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/ship-service.yml",
    "CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/socialnetworking-service.yml",
    "CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/spring-batchjob-service.yml",
    "CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/teammember-service.yml",
    "CORE_TENANTMANAGER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/tenantmanager-service.yml",
    "CORE_VENDOR_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/vendor-service.yml",
    "CORE_VENUE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/venue-service.yml",
    "CORE_VISITOR_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/visitor-service.yml",
    "CORE_WEARABLE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/wearable-service.yml",
    "DXP_DAEMON_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/daemon-service.yml",
    "INFRA_AUTHENTICATION_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/authentication-service.yml",
    "INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/configmap-daemon-service.yml",
    "INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/content-management-service.yml",
    "INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/identity-access-management-service.yml",
    "INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/imageprocessing-service.yml",
    "INFRA_MESSAGING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/messaging-service.yml",
    "INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/multimediastorage-service.yml",
    "INFRA_OCR_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/ocr-service.yml",
    "INFRA_PAYMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/payment-service.yml",
    "INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/referencedata-service.yml",
    "INFRA_REPORTING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/reporting-service.yml",
    "INFRA_RULES_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/rules-service.yml",
    "INFRA_WORD_PRESS_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/word-press-service.yml",
    "LOG_LOCATION": "/var/log/applogs/",
    "TOMCAT_LOG_LOCATION": "/var/log/tomcatlogs/",
    "VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/activity-reservation-vas-service.yml",
    "VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/embarkationadmin-vas-service.yml",
    "VAS_EMBARKATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/embarkation-vas-service.yml",
    "VAS_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/reservation-service.yml",
    "VAS_SAILOR_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/sailor-vas-service.yml",
    "VAS_SEAWARE_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/seaware-activity-reservation-vas-service.yml"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"APPLICATION_PROPERTIES_PATH\":\"/etc/config-server/application.yml\",\"BFF_ACTIVITY_RESERVATION_CREW_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/activity-reservation-crew-ui-service.yml\",\"BFF_ACTIVITY_RESERVATION_CREW_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/activity-reservation-crew-bff-service.yml\",\"BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/activity-reservation-system-ui-service.yml\",\"BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/activity-reservation-system-bff-service.yml\",\"BFF_DEPOSIT_CONSUMER_PROPERTIES_PATH\":\"/etc/config/ui-applications/deposit-ui-service.yml\",\"BFF_DEPOSIT_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/deposit-bff-service.yml\",\"BFF_EMBARKATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/embarkation-bff-service.yml\",\"BFF_MODERATE_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/moderate-online-check-in-ui-service.yml\",\"BFF_MODERATE_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/moderate-online-check-in-bff-service.yml\",\"BFF_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/online-check-in-ui-service.yml\",\"BFF_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/online-check-in-bff-service.yml\",\"BFF_RESERVATION_CONSUMER_PROPERTIES_PATH\":\"/etc/config/ui-applications/reservation-ui-service.yml\",\"BFF_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/reservation-bff-service.yml\",\"BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/sailor-framework-ui-service.yml\",\"BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/sailor-framework-bff-service.yml\",\"CORE_BOARDING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/boarding-service.yml\",\"CORE_CART_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/cart-service.yml\",\"CORE_CHILDREGISTRATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/childregistration-service.yml\",\"CORE_COMPONENTCATALOG_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/componentcatalog-service.yml\",\"CORE_DEAMON_APPDATAPOPULATOR_PROPERTIES_PATH\":\"/etc/config/core-services/deamon-appdatapopulator-service.yml\",\"CORE_DEVICECONTENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/devicecontent-service.yml\",\"CORE_DEVICE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/device-service.yml\",\"CORE_DINING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/dining-service.yml\",\"CORE_EVENTSTORE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/eventstore-service.yml\",\"CORE_FOODNBEVERAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/foodnbeverage-service.yml\",\"CORE_GUESTMULTIMEDIA_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guestmultimedia-service.yml\",\"CORE_GUESTPREFERENCE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guestpreference-service.yml\",\"CORE_GUEST_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guest-service.yml\",\"CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/idcrossreference-service.yml\",\"CORE_INCIDENTMANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/incident-service.yml\",\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/logistics-service.yml\",\"CORE_LUGGAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/luggage-service.yml\",\"CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/personlocation-service.yml\",\"CORE_SALESOFFER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/salesoffer-service.yml\",\"CORE_SALESORDER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/salesorder-service.yml\",\"CORE_SHIP_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/ship-service.yml\",\"CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/socialnetworking-service.yml\",\"CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/spring-batchjob-service.yml\",\"CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/teammember-service.yml\",\"CORE_TENANTMANAGER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/tenantmanager-service.yml\",\"CORE_VENDOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/vendor-service.yml\",\"CORE_VENUE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/venue-service.yml\",\"CORE_VISITOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/visitor-service.yml\",\"CORE_WEARABLE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/wearable-service.yml\",\"DXP_DAEMON_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/daemon-service.yml\",\"INFRA_AUTHENTICATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/authentication-service.yml\",\"INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/configmap-daemon-service.yml\",\"INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/content-management-service.yml\",\"INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/identity-access-management-service.yml\",\"INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/imageprocessing-service.yml\",\"INFRA_MESSAGING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/messaging-service.yml\",\"INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/multimediastorage-service.yml\",\"INFRA_OCR_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/ocr-service.yml\",\"INFRA_PAYMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/payment-service.yml\",\"INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/referencedata-service.yml\",\"INFRA_REPORTING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/reporting-service.yml\",\"INFRA_RULES_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/rules-service.yml\",\"INFRA_WORD_PRESS_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/word-press-service.yml\",\"LOG_LOCATION\":\"/var/log/applogs/\",\"TOMCAT_LOG_LOCATION\":\"/var/log/tomcatlogs/\",\"VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/activity-reservation-vas-service.yml\",\"VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/embarkationadmin-vas-service.yml\",\"VAS_EMBARKATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/embarkation-vas-service.yml\",\"VAS_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/reservation-service.yml\",\"VAS_SAILOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/sailor-vas-service.yml\",\"VAS_SEAWARE_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/seaware-activity-reservation-vas-service.yml\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"environment-configmap\",\"namespace\":\"config1\"}}\n"
    },
    "name": "environment-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "LOGSTASH_HOSTS": "10.98.0.39:5044"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"LOGSTASH_HOSTS\":\"10.98.0.39:5044\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"environment-variables\",\"namespace\":\"config1\"}}\n"
    },
    "name": "environment-variables",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "filebeat.yml": "###################### Filebeat Configuration Example #########################\n\n# This file is an example configuration file highlighting only the most common\n# options. The filebeat.full.yml file from the same directory contains all the\n# supported options with more comments. You can use it as a reference.\n#\n# You can find the full configuration reference here:\n# https://www.elastic.co/guide/en/beats/filebeat/index.html\n\n#=========================== Filebeat prospectors =============================\n\nfilebeat.prospectors:\n\n# Each - is a prospector. Most options can be set at the prospector level, so\n# you can use different prospectors for various configurations.\n# Below are the prospector specific configurations.\n- input_type: log \n\n  paths:\n    - /var/log/tomcatlogs/*/*.log\n  tags: [\"tomcat-log\"]\n  \n- input_type: log\n\n  paths:\n    - /var/log/applogs/**/*.log\n  tags: [\"webapp-log\"]\n\n\n    #- c:\\programdata\\elasticsearch\\logs\\*\n\n  # Exclude lines. A list of regular expressions to match. It drops the lines that are\n  # matching any regular expression from the list.\n  #exclude_lines: [\"^DBG\"]\n\n  # Include lines. A list of regular expressions to match. It exports the lines that are\n  # matching any regular expression from the list.\n  #include_lines: [\"^ERR\", \"^WARN\"]\n\n  # Exclude files. A list of regular expressions to match. Filebeat drops the files that\n  # are matching any regular expression from the list. By default, no files are dropped.\n  #exclude_files: [\".gz$\"]\n\n  # Optional additional fields. These field can be freely picked\n  # to add additional information to the crawled log files for filtering\n  #fields:\n  #  level: debug\n  #  review: 1\n\n  ### Multiline options\n\n  # Mutiline can be used for log messages spanning multiple lines. This is common\n  # for Java Stack Traces or C-Line Continuation\n\n  # The regexp Pattern that has to be matched. The example pattern matches all lines starting with [\n  multiline.pattern: '^\\{'\n\n  # Defines if the pattern set under pattern should be negated or not. Default is false.\n  multiline.negate: true\n\n  # Match can be set to \"after\" or \"before\". It is used to define if lines should be append to a pattern\n  # that was (not) matched before or after or as long as a pattern is not matched based on negate.\n  # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash\n  multiline.match: after\n  multiline.max_lines: 500\n\n#================================ General =====================================\n\n# The name of the shipper that publishes the network data. It can be used to group\n# all the transactions sent by a single shipper in the web interface.\n#name:\n\n# The tags of the shipper are included in their own field with each\n# transaction published.\n#tags: [\"service-X\", \"web-tier\"]\n\n# Optional fields that you can specify to add additional information to the\n# output.\n#fields:\n#  env: staging\n\n#================================ Outputs =====================================\n\n# Configure what outputs to use when sending the data collected by the beat.\n# Multiple outputs may be used.\n\n#-------------------------- Elasticsearch output ------------------------------\n#output.elasticsearch:\n  # Array of hosts to connect to.\n  #hosts: [\"localhost:9200\"]\n\n  # Optional protocol and basic auth credentials.\n  #protocol: \"https\"\n  #username: \"elastic\"\n  #password: \"changeme\"\n\n#----------------------------- Logstash output --------------------------------\noutput.logstash:\n  # The Logstash hosts\n hosts: ${LOGSTASH_HOSTS}\n\n  # Optional SSL. By default is off.\n  # List of root certificates for HTTPS server verifications\n  #ssl.certificate_authorities: [\"/etc/pki/root/ca.pem\"]\n\n  # Certificate for SSL client authentication\n  #ssl.certificate: \"/etc/pki/client/cert.pem\"\n\n  # Client Certificate Key\n  #ssl.key: \"/etc/pki/client/cert.key\"\n\n#================================ Logging =====================================\n\n# Sets log level. The default log level is info.\n# Available log levels are: critical, error, warning, info, debug\nlogging.level: debug\nlogging.to_files: true\nlogging.to_syslog: false\nlogging.files:\n  path: /var/log/filebeat\n  name: Filebeat.log\n  keepfiles: 7\n#logging.selectors: [\"*\"]"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "filebeat-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "guest-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/guest\nservice:\n  component:\n      settingId: 3b51a112-b4ac-452c-bc7f-0cbd644f4ae8\n      clientId: 4b805361-ff06-425b-81e3-cf66a6edfd6f \n      adapteeName: VXP\n      secretId: secret"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "guest-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "guestpreference-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/guestpreference"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "guestpreference-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "idcrossreference-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/idcrossreference\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/idcrossreference"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "idcrossreference-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "identity-access-management-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/identityaccessmanagement\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/identityaccessmanagement\nkeystore:\n  password: ${DXPKEYSTORE_VALUE}\nservice: DXP"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "identity-access-management-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "imageprocessing-service.yml": "app:\n name: imageprocessing\n imageFormat: jpg\n autheticationServiceURL: http://dxpidentityaccessmanagementservice/identityaccessmanagement-service/oauth/token?grant_type=client_credentials\n multimediaStorageServiceURL: http://dxpmultimediastorageservice/multimediastorage-service/\n clientToken: ${BASICTOKEN}\n bootstrapServers: 10.98.0.65:9092\n enableAutoCommit: true\n isolationLevel: read_committed\n keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer\n autoOffsetReset: latest\n \n bootstrapserversKey: bootstrap.servers\n KeyDeserializerKey: key.deserializer\n ValueDeserializerKey: value.deserializer\n ValueDeserializerValueKey: org.apache.kafka.common.serialization.StringDeserializer\n KeyDeserializerValueKey: org.apache.kafka.common.serialization.StringDeserializer\n IsolationLevelKey: isolation.level\n EnableAutoCommitKey: enable.auto.commit\n GroupIDKey: group.id\n AutoOffsetResetKey: auto.offset.reset\n\n groupId: 4779df07-c991-4b12-992d-aa8e593ad76f\n topicName: infra.multimediastorage\n awsAccessKey: ${S3BUCKET_ACCESSKEYID}\n awsAccessKeyValue: ${S3BUCKET_ACCESSKEY}\n awsBucketName: vv-multimedia-dev\n\nsmb:\n  username: ${FILESTORAGEUSER}\n  password: ${FILESTORAGEPASSWORD}\n\nitems:\n objectStorageURL: http://10.98.0.201:9000\n storagelocation: AWS\n\nlogLevel: INFO\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "imageprocessing-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "logistics-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/logistics\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/logistics"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "logistics-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "messaging-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/messaging\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/messaging\n \n  velocity:\n   resourceLoaderPath: classpath:/templates/\n   suffix: .vm\n   cache: false\n   check-template-location: true\n   content-type: text/html\n   charset: UTF-8\n   properties:\n    input:\n     encoding: UTF-8\n    output: \n     encoding: UTF-8\n  mail:\n   host: smtp.office365.com\n   port: 587\n   username: alert@decurtis.com\n   password: BnVt0#123\n   protocol: smtp\n   jndi-name: java:comp/env/mail/Session\n   properties:\n    mail:\n     smtp:\n      auth: false\n      starttls: \n       enable: true\n \napp:\n name: messagingservice\n imageFormat: jpg\n autheticationServiceURL: http://10.3.100.45:31362/identityaccessmanagement-service/oauth/token?grant_type=client_credentials\n multimediaStorageServiceURL: https://vv.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\n clientToken: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55aWQiOiJiMzVhMzI1YS0wMzZhLTRhZDQtODgzNi02NDY5MjNlNjAxZGUiLCJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJleHAiOjE1MDc5OTEwNzgsImF1dGhvcml0aWVzIjpbIlJPTEVfVFJVU1RFRF9DTElFTlQiXSwianRpIjoiMDM4N2ZjZTQtNjcyYi00YzllLWE0NGUtYzhhN2JhOTQ1MjFkIiwiY2xpZW50X2lkIjoiNDllMTQ2NzEtMzJkMy00MWU4LWI1NzktZDc0N2I1NGZmZDIzIn0.vzrZYrteiZXoc49opstVxcAPxmUV0aPlp8d8fyzi87YfzjXnW4iVLKi8hsDREgVsWRfJpv-VFuHuGJgLCeOh3Q3pPBLpNfEkgUtB7qS-dbbLrkGR4ysa0N4gBSWt93btP-B3Y0xMgPCUcj9hDFbBSkIr3gasm8wOGt7NN0uycfQDScgI4TK4ZQr9QSwK-hEHh0bHM8Z4NyO7tHHB5EaakCuJlHsFtiwTcsZxUgFfZVuCRIK-rUCnV3FK6JVZ1DkZmYpgujctgRqKYbTRhN3GCHkcgTcWCSi9w4WdHaZUyJcJs0C4um9MBPZcEHIjRLeqdh94fPdKmzWF8xBq_Ox0mg\n contentType: application/json\n contentTypeValue: application/json\n bootstrapServers: 10.3.100.196:9092\n enableAutoCommit: true\n autoCommitIntervalMs: 1000\n sessionTimeoutMs: 50000\n isolationLevel: read_committed\n keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer\n autoOffsetReset: nearest\n choice: consumer\n kafkaURL: 10.3.100.196:9092\n groupId: core-messaging-kafka-group\n topicName: infra.messaging\n awsAccessKey: AKIAJTN5PXRRW7WIFMGQ\n awsAccessKeyValue: onxfLy7QR2GQti58SoHLqsmebuWTWpV18iO0H2Q+\n awsBucketName: vv-multimedia-dev\n pollingIntervalMs: 200\n "
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "messaging-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "multimediastorage-service.yml": "spring:\n  datasource:\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/multimediastorage\nazureblob:\n  storageconnectionstring: DefaultEndpointsProtocol=https;AccountName=imagingmediastorageblob;AccountKey=5blr7n4wo7LSwV47BXU3hjf01dPObnJeuvmGhh18ZZ70PFsFB+xx+NPxOjewO4uyXQfo5REyOJyFOKrRgIDMyg==\n  isblobstorage: true\n  container: multimediastoragecontainer\n\nsmb:\n  username: ${FILESTORAGEUSER}\n  password: ${FILESTORAGEPASSWORD}\n\nmultipart:\n  maxfilesize: 50MB\n  maxrequestsize: 50MB\n\nkafka:\n  topicName: infra.multimediastorage\n  isKafkaEnabled: true\n  \nconfigurationsetting:\n  uploadlimit: 5000000000\n  uploadlimittime: 60\n\nAWS:\n objectStorageURL: http://10.98.0.201:9000\n storagelocation: Minio\n S3BucketAccessKeyId: ${S3BUCKET_ACCESSKEYID}\n S3BucketAccessKey: ${S3BUCKET_ACCESSKEY}\n bucketname: vv-multimedia-dev"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "multimediastorage-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "personlocation-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/personlocation\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/personlocation"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "personlocation-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "referencedata-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/referencedata\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/referencedata"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "referencedata-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "reporting-service.yml": "spring:\n  couchbase:\n           bootstrap-hosts: 10.98.0.146\n           bucket:\n                 name: reporting\n                 password: yellow*99\n           env:\n              timeouts:\n                      connect: 60000\n                      socket-connect: 60000\n                      autoreleaseAfter: 20000\nlogLevel: ERROR\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "reporting-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-framework-bff-service.yml": "selfUrl: \"http://vvship.d-aws-vxp.com/svc/sailor-framework-bff/\"\nrecommendations: \"http://recommendationsapi.getsandbox.com/\"\nsecurityPhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nprofilePhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\ndocumentMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nconsumerAppName: \"online-check-in-ui\"\nenableLogSrcFlag: \"true\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"http://vvship.d-aws-vxp.com/svc/multimediastorage-service/\"\nociModuleCode: 'OCI'\narsModuleCode: 'EXR'\ndaysToEnableOnlineCheckin: \"400\"\nsailorTypeId: '488c68c4-e80a-e711-80c9-a06699100836'\nfacebookSourceId: '11c927d1-e90a-e711-80c9-a06699100836'\niamSourceId: '12c927d1-e90a-e711-80c9-a06699100836'\nuserType: 'Guest'\nseawareSourceId: '14c927d1-e90a-e711-80c9-a06699100836'\nguestIdMapping: {\"551\":\"101\",\"550\": \"99\",\"557\":\"98\",\"556\":\"108\"}\nrequestTimeoutMiliseconds: 20000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-framework-bff-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-framework-ui-service.yml": "badWords: test,test1\nmaxLoginBeaconRange: 0.5\nnearestBeaconRange: 2\nnearerBeaconRange: 5\nnearBeaconRange: 8\nminBirthYears: 16\nbffBaseUrl: \"http://10.98.0.113:31014/sailor-framework-bff/\"\ndefaultTimeout: 9000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-framework-ui-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-vas-service.yml": "logLevel: ERROR\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-vas-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "salesoffer-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/salesoffer\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/salesoffer"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "salesoffer-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "salesorder-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/salesorder\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/salesorder"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "salesorder-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "ship-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/ship\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/ship\n      \nvoyage:\n  serviceImpl: DXP\n  shipCode: VC"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "ship-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "socialnetworking-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/socialnetworking\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/socialnetworking"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "socialnetworking-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "spring-batchjob-service.yml": "spring:\n datasource:\n  url: jdbc:postgresql://10.98.0.238:5432/batch_job\n  hikari:\n   jdbc-url: jdbc:postgresql://10.98.0.238:5432/batch_job\n   username: shipdpguser\n   password: yellow*99\n\n batch:\n  job:\n   enabled: false\n\nbatch:\n jobs:\n  isEnable:\n   fidelio-crew: false\n   fidelio-guest: false\n   release-inventory-job: true\n  cron:\n   fidelio-crew: 0 0/1 * * * ?\n   fidelio-guest: 0 0/1 * * * ?\n   release-inventory-job: 0 0/1 * * * ?\n clientId: 2b9a83ed-2a16-41c9-838a-82ca48aff898\n secretId: secret\n\nhibernateLogLevel: INFO\n\nfidelio:\n username: DeCurtis\n password: Fidelio123\n retryattempt: 3"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "spring-batchjob-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "teammember-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/teammember\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/teammember\nkafka:\n  topicName: core.teammember"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "teammember-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "vendor-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/vendor\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/vendor\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "vendor-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "visitor-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/visitor\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/visitor"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "visitor-configmap",
    "namespace": "config1"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpactivityreservationbff",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31030,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3002
      }
    ],
    "selector": {
      "load-balancer-dxpactivityreservationbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpactivityreservationcrewbff",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31032,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3032
      }
    ],
    "selector": {
      "load-balancer-dxpactivityreservationcrewbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpactivityreservationservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31403,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8403
      }
    ],
    "selector": {
      "load-balancer-dxpactivityreservationservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpactivityreservationweb",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31031,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3000
      }
    ],
    "selector": {
      "load-balancer-dxpactivityreservationweb": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpbatchjobservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31337,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8337
      }
    ],
    "selector": {
      "load-balancer-dxpbatchjobservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpboardingservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31328,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8328
      }
    ],
    "selector": {
      "load-balancer-dxpboardingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpcartservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31304,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8304
      }
    ],
    "selector": {
      "load-balancer-dxpcartservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpconfigmapsyncdaemon",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31501,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8501
      }
    ],
    "selector": {
      "load-balancer-dxpconfigmapsyncdaemon": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpcontentmanagementservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31360,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8360
      }
    ],
    "selector": {
      "load-balancer-dxpcontentmanagementservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpdaemonservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31338,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8338
      }
    ],
    "selector": {
      "load-balancer-dxpdaemonservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpdeviceservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31336,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8336
      }
    ],
    "selector": {
      "load-balancer-dxpdeviceservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpdiningservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31335,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8335
      }
    ],
    "selector": {
      "load-balancer-dxpdiningservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpembarkationadminservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31405,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8405
      }
    ],
    "selector": {
      "load-balancer-dxpembarkationadminservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpembarkationbff",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31006,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3006
      }
    ],
    "selector": {
      "load-balancer-dxpembarkationbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpguestservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31303,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8303
      }
    ],
    "selector": {
      "load-balancer-dxpguestservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpidcrossreferenceservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31326,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8326
      }
    ],
    "selector": {
      "load-balancer-dxpidcrossreferenceservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpidentityaccessmanagementservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31362,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8362
      }
    ],
    "selector": {
      "load-balancer-dxpidentityaccessmanagementservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpimageprocessingservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31767,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8767
      }
    ],
    "selector": {
      "load-balancer-dxpimageprocessingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "app": "dxpldapservice",
      "version": "latest",
      "visualize": "true"
    },
    "name": "dxpldapservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32340,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      }
    ],
    "selector": {
      "app": "dxpldapservice",
      "version": "latest",
      "visualize": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxplogisticsservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31332,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8332
      }
    ],
    "selector": {
      "load-balancer-dxplogisticsservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpluggageservice",
    "namespace": "dev"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      }
    ],
    "selector": {
      "load-balancer-dxpluggageservice": "true"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpmessagingservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31306,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8306
      }
    ],
    "selector": {
      "load-balancer-dxpmessagingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpmultimediastorageservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31310,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8310
      }
    ],
    "selector": {
      "load-balancer-dxpmultimediastorageservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxppersonlocationservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31318,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8318
      }
    ],
    "selector": {
      "load-balancer-dxppersonlocationservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpreferencedataservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31311,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8311
      }
    ],
    "selector": {
      "load-balancer-dxpreferencedataservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpreportingservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31370,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8370
      }
    ],
    "selector": {
      "load-balancer-dxpreportingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsailorframeworkbff",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31014,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3014
      }
    ],
    "selector": {
      "load-balancer-dxpsailorframeworkbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsailorservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31404,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8404
      }
    ],
    "selector": {
      "load-balancer-dxpsailorservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsalesofferservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31302,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8302
      }
    ],
    "selector": {
      "load-balancer-dxpsalesofferservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsalesorderservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31301,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8301
      }
    ],
    "selector": {
      "load-balancer-dxpsalesorderservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpshipservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31322,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8322
      }
    ],
    "selector": {
      "load-balancer-dxpshipservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsocialnetworkingservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31321,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8321
      }
    ],
    "selector": {
      "load-balancer-dxpsocialnetworkingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxptalendmessaging",
    "namespace": "dev"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      }
    ],
    "selector": {
      "load-balancer-dxptalendmessaging": "true"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpteammemberservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31315,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8315
      }
    ],
    "selector": {
      "load-balancer-dxpteammemberservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpvendorservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31319,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8319
      }
    ],
    "selector": {
      "load-balancer-dxpvendorservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpvisitorservice",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31316,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8316
      }
    ],
    "selector": {
      "load-balancer-dxpvisitorservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "component": "elasticsearch",
      "role": "client"
    },
    "name": "elasticsearch",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31723,
        "port": 9200,
        "protocol": "TCP",
        "targetPort": 9200
      }
    ],
    "selector": {
      "component": "elasticsearch",
      "role": "client"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "component": "elasticsearch",
      "role": "master"
    },
    "name": "elasticsearch-discovery",
    "namespace": "dev"
  },
  "spec": {
    "ports": [
      {
        "name": "transport",
        "port": 9300,
        "protocol": "TCP",
        "targetPort": 9300
      }
    ],
    "selector": {
      "component": "elasticsearch",
      "role": "master"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "run": "kibana"
    },
    "name": "kibana",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 30048,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 5601
      }
    ],
    "selector": {
      "run": "kibana"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "run": "logstash"
    },
    "name": "logstash",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 30379,
        "port": 5044,
        "protocol": "TCP",
        "targetPort": 5044
      }
    ],
    "selector": {
      "run": "logstash"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "app": "minio"
    },
    "name": "minio",
    "namespace": "dev"
  },
  "spec": {
    "ports": [
      {
        "name": "minio",
        "port": 9000,
        "protocol": "TCP",
        "targetPort": 9000
      }
    ],
    "selector": {
      "app": "minio"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "minio-service",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32652,
        "port": 9000,
        "protocol": "TCP",
        "targetPort": 9000
      }
    ],
    "selector": {
      "app": "minio"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"traefik-svc\",\"namespace\":\"dev\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"nodePort\":31462,\"port\":80},{\"name\":\"https\",\"port\":443}],\"selector\":{\"k8s-app\":\"traefik-ingress-lb-svc\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "traefik-svc",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31462,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      },
      {
        "name": "https",
        "nodePort": 32552,
        "port": 443,
        "protocol": "TCP",
        "targetPort": 443
      }
    ],
    "selector": {
      "k8s-app": "traefik-ingress-lb-svc"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"traefik-web\",\"namespace\":\"dev\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"nodePort\":31461,\"port\":80},{\"name\":\"https\",\"port\":443}],\"selector\":{\"k8s-app\":\"traefik-ingress-lb-web\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "traefik-web",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 31461,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      },
      {
        "name": "https",
        "nodePort": 32499,
        "port": 443,
        "protocol": "TCP",
        "targetPort": 443
      }
    ],
    "selector": {
      "k8s-app": "traefik-ingress-lb-web"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "service.beta.kubernetes.io/aws-load-balancer-proxy-protocol": "\"*\""
    },
    "labels": {
      "app": "dxpvisitorservice",
      "cluster": "dxpvisitorservice",
      "dxpvisitorservice-v005": "true",
      "load-balancer-dxpvisitorservice": "true",
      "replication-controller": "dxpvisitorservice-v005",
      "version": "5"
    },
    "name": "visitor-service",
    "namespace": "dev"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 31920,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8316
      }
    ],
    "selector": {
      "app": "dxpvisitorservice",
      "cluster": "dxpvisitorservice",
      "dxpvisitorservice-v005": "true",
      "load-balancer-dxpvisitorservice": "true",
      "replication-controller": "dxpvisitorservice-v005",
      "version": "5"
    },
    "sessionAffinity": "None",
    "type": "LoadBalancer"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "basictoken": "QmFzaWMgTkRsbE1UUTJOekV0TXpKa015MDBNV1U0TFdJMU56a3RaRGMwTjJJMU5HWm1aREl6T25ObFkzSmxkQT09",
    "dxpkeystore": "ZHhwMTIzNA==",
    "fileSystemPassword": "eWVsbG93Kjk5",
    "fileSystemUserName": "c2FtYmF1c2Vy",
    "password": "VlZwZ3VzZXIqMTAx",
    "s3bucketkey": "b254Zkx5N1FSMkdRdGk1OFNvSExxc21lYnVXVFdwVjE4aU8wSDJRKw==",
    "s3bucketkeyid": "QUtJQUpUTjVQWFJSVzdXSUZNR1E=",
    "username": "dnZwZ3VzZXI="
  },
  "kind": "Secret",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"basictoken\":\"QmFzaWMgTkRsbE1UUTJOekV0TXpKa015MDBNV1U0TFdJMU56a3RaRGMwTjJJMU5HWm1aREl6T25ObFkzSmxkQT09\",\"dxpkeystore\":\"ZHhwMTIzNA==\",\"fileSystemPassword\":\"eWVsbG93Kjk5\",\"fileSystemUserName\":\"c2FtYmF1c2Vy\",\"password\":\"VlZwZ3VzZXIqMTAx\",\"s3bucketkey\":\"b254Zkx5N1FSMkdRdGk1OFNvSExxc21lYnVXVFdwVjE4aU8wSDJRKw==\",\"s3bucketkeyid\":\"QUtJQUpUTjVQWFJSVzdXSUZNR1E=\",\"username\":\"dnZwZ3VzZXI=\"},\"kind\":\"Secret\",\"metadata\":{\"annotations\":{},\"name\":\"app-secrets\",\"namespace\":\"dev\"},\"type\":\"Opaque\"}\n"
    },
    "name": "app-secrets",
    "namespace": "dev"
  },
  "type": "Opaque"
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "dev"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "labels": {
      "app": "filebeat"
    },
    "name": "filebeat",
    "namespace": "dev"
  },
  "spec": {
    "revisionHistoryLimit": 10,
    "selector": {
      "matchLabels": {
        "app": "filebeat"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "filebeat"
        },
        "name": "filebeat"
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOGSTASH_HOSTS",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOGSTASH_HOSTS",
                    "name": "environment-variables"
                  }
                }
              },
              {
                "name": "LOG_LEVEL",
                "value": "info"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/filebeat",
            "imagePullPolicy": "Always",
            "name": "filebeat",
            "resources": {
              "limits": {
                "memory": "1Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs",
                "name": "varlogpods",
                "readOnly": true
              },
              {
                "mountPath": "/var/log/filebeat",
                "name": "filebeatlogs"
              },
              {
                "mountPath": "/etc/filebeat/",
                "name": "filebeat-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlogs"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs"
            },
            "name": "varlogpods"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs"
            },
            "name": "tomcatlogs"
          },
          {
            "hostPath": {
              "path": "/var/log/filebeat"
            },
            "name": "filebeatlogs"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "filebeat-configmap"
            },
            "name": "filebeat-properties"
          }
        ]
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxpldapservice\",\"version\":\"latest\",\"visualize\":\"true\"},\"name\":\"dxpldapservice\",\"namespace\":\"dev\"},\"spec\":{\"minReadySeconds\":60,\"replicas\":1,\"revisionHistoryLimit\":0,\"strategy\":{\"type\":\"RollingUpdate\"},\"template\":{\"metadata\":{\"labels\":{\"app\":\"dxpldapservice\",\"version\":\"latest\",\"visualize\":\"true\"}},\"spec\":{\"containers\":[{\"image\":\"osixia/openldap\",\"name\":\"openldap\",\"ports\":[{\"containerPort\":389},{\"containerPort\":636}]},{\"env\":[{\"name\":\"PHPLDAPADMIN_HTTPS\",\"value\":\"false\"},{\"name\":\"PHPLDAPADMIN_LDAP_HOSTS\",\"value\":\"localhost\"}],\"image\":\"osixia/phpldapadmin\",\"name\":\"phpldapadmin\",\"ports\":[{\"containerPort\":80}]}]}}}}\n"
    },
    "labels": {
      "app": "dxpldapservice",
      "version": "latest",
      "visualize": "true"
    },
    "name": "dxpldapservice",
    "namespace": "dev"
  },
  "spec": {
    "minReadySeconds": 60,
    "replicas": 1,
    "revisionHistoryLimit": 0,
    "selector": {
      "matchLabels": {
        "app": "dxpldapservice",
        "version": "latest",
        "visualize": "true"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpldapservice",
          "version": "latest",
          "visualize": "true"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "osixia/openldap",
            "imagePullPolicy": "Always",
            "name": "openldap",
            "ports": [
              {
                "containerPort": 389,
                "protocol": "TCP"
              },
              {
                "containerPort": 636,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          },
          {
            "env": [
              {
                "name": "PHPLDAPADMIN_HTTPS",
                "value": "false"
              },
              {
                "name": "PHPLDAPADMIN_LDAP_HOSTS",
                "value": "localhost"
              }
            ],
            "image": "osixia/phpldapadmin",
            "imagePullPolicy": "Always",
            "name": "phpldapadmin",
            "ports": [
              {
                "containerPort": 80,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "5",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"traefik-ingress-lb-svc\"},\"name\":\"traefik-ingress-controller-svc\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":3,\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"traefik-ingress-lb-svc\",\"name\":\"traefik-ingress-lb-svc\"}},\"spec\":{\"containers\":[{\"args\":[\"-d\",\"--web\",\"--web.address=:8081\",\"--kubernetes\",\"--logLevel=ERROR\",\"--kubernetes.labelselector=name=svc\",\"--accesslogsfile=/home/admin/access.log\"],\"image\":\"traefik\",\"name\":\"traefik-ingress-lb-svc\",\"ports\":[{\"containerPort\":80,\"name\":\"http\"},{\"containerPort\":8081,\"name\":\"admin\"}],\"resources\":{\"limits\":{\"cpu\":\"700m\",\"memory\":\"900Mi\"},\"requests\":{\"cpu\":\"700m\",\"memory\":\"900Mi\"}},\"securityContext\":{\"privileged\":true}}],\"serviceAccountName\":\"traefik-ingress-controller-svc\",\"terminationGracePeriodSeconds\":60}}}}\n"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-svc"
    },
    "name": "traefik-ingress-controller-svc",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-svc",
        "name": "traefik-ingress-lb-svc"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-svc",
          "name": "traefik-ingress-lb-svc"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-d",
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=svc",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik:1.4-alpine",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-svc",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-svc",
        "serviceAccountName": "traefik-ingress-controller-svc"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "2",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"traefik-ingress-lb-web\"},\"name\":\"traefik-ingress-controller-web\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":3,\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"traefik-ingress-lb-web\",\"name\":\"traefik-ingress-lb-web\"}},\"spec\":{\"containers\":[{\"args\":[\"-d\",\"--web\",\"--web.address=:8081\",\"--kubernetes\",\"--logLevel=ERROR\",\"--kubernetes.labelselector=name=web\",\"--accesslogsfile=/home/admin/access.log\"],\"image\":\"traefik\",\"name\":\"traefik-ingress-lb-web\",\"ports\":[{\"containerPort\":80,\"name\":\"http\"},{\"containerPort\":8081,\"name\":\"admin\"}],\"resources\":{\"limits\":{\"cpu\":\"700m\",\"memory\":\"900Mi\"},\"requests\":{\"cpu\":\"700m\",\"memory\":\"900Mi\"}},\"securityContext\":{\"privileged\":true}}],\"serviceAccountName\":\"traefik-ingress-controller-web\",\"terminationGracePeriodSeconds\":60}}}}\n"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-web"
    },
    "name": "traefik-ingress-controller-web",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-web",
        "name": "traefik-ingress-lb-web"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-web",
          "name": "traefik-ingress-lb-web"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=web",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-web",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-web",
        "serviceAccountName": "traefik-ingress-controller-web"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationbff",
      "cluster": "dxpactivityreservationbff",
      "dxpactivityreservationbff-v080": "true",
      "load-balancer-dxpactivityreservationbff": "true",
      "replication-controller": "dxpactivityreservationbff-v080",
      "version": "80"
    },
    "name": "dxpactivityreservationbff-v080",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationbff",
        "cluster": "dxpactivityreservationbff",
        "dxpactivityreservationbff-v080": "true",
        "replication-controller": "dxpactivityreservationbff-v080",
        "version": "80"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationbff",
          "cluster": "dxpactivityreservationbff",
          "dxpactivityreservationbff-v080": "true",
          "load-balancer-dxpactivityreservationbff": "true",
          "replication-controller": "dxpactivityreservationbff-v080",
          "version": "80"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/activity-reservation-bff:1.0.149",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "activity-reservation-system-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "activity-reservation-system-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-system-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-system-bff-configmap"
            },
            "name": "activity-reservation-system-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-system-ui-configmap"
            },
            "name": "activity-reservation-system-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationcrewbff",
      "cluster": "dxpactivityreservationcrewbff",
      "dxpactivityreservationcrewbff-v052": "true",
      "load-balancer-dxpactivityreservationcrewbff": "true",
      "replication-controller": "dxpactivityreservationcrewbff-v052",
      "version": "52"
    },
    "name": "dxpactivityreservationcrewbff-v052",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationcrewbff",
        "cluster": "dxpactivityreservationcrewbff",
        "dxpactivityreservationcrewbff-v052": "true",
        "replication-controller": "dxpactivityreservationcrewbff-v052",
        "version": "52"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationcrewbff",
          "cluster": "dxpactivityreservationcrewbff",
          "dxpactivityreservationcrewbff-v052": "true",
          "load-balancer-dxpactivityreservationcrewbff": "true",
          "replication-controller": "dxpactivityreservationcrewbff-v052",
          "version": "52"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_CREW_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_CREW_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/activity-reservation-crew-bff:1.0.55",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-crew-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "activity-reservation-crew-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "activity-reservation-crew-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-crew-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-crew-bff-configmap"
            },
            "name": "activity-reservation-crew-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-crew-ui-configmap"
            },
            "name": "activity-reservation-crew-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationservice",
      "cluster": "dxpactivityreservationservice",
      "dxpactivityreservationservice-v055": "true",
      "load-balancer-dxpactivityreservationservice": "true",
      "replication-controller": "dxpactivityreservationservice-v055",
      "version": "55"
    },
    "name": "dxpactivityreservationservice-v055",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationservice",
        "cluster": "dxpactivityreservationservice",
        "dxpactivityreservationservice-v055": "true",
        "replication-controller": "dxpactivityreservationservice-v055",
        "version": "55"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationservice",
          "cluster": "dxpactivityreservationservice",
          "dxpactivityreservationservice-v055": "true",
          "load-balancer-dxpactivityreservationservice": "true",
          "replication-controller": "dxpactivityreservationservice-v055",
          "version": "55"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx2048m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/vas-activity-reservation-service:0.6.0.70",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-service",
            "ports": [
              {
                "containerPort": 8403,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "activity-reservation-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-vas-configmap"
            },
            "name": "activity-reservation-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/activity-reservation-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpactivityreservationweb",
      "cluster": "dxpactivityreservationweb",
      "dxpactivityreservationweb-v233": "true",
      "load-balancer-dxpactivityreservationweb": "true",
      "replication-controller": "dxpactivityreservationweb-v233",
      "version": "233"
    },
    "name": "dxpactivityreservationweb-v233",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationweb",
        "cluster": "dxpactivityreservationweb",
        "dxpactivityreservationweb-v233": "true",
        "replication-controller": "dxpactivityreservationweb-v233",
        "version": "233"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationweb",
          "cluster": "dxpactivityreservationweb",
          "dxpactivityreservationweb-v233": "true",
          "load-balancer-dxpactivityreservationweb": "true",
          "replication-controller": "dxpactivityreservationweb-v233",
          "version": "233"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "baseURL",
                "value": "http://10.98.0.113:31030/activity-reservation-system-bff/"
              },
              {
                "name": "piwikURL",
                "value": "http://10.3.100.55/piwik/"
              },
              {
                "name": "siteId",
                "value": "3"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/activity-reservation-webapp:1.0.295",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-webapp",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpbatchjobservice",
      "cluster": "dxpbatchjobservice",
      "dxpbatchjobservice-v007": "true",
      "load-balancer-dxpbatchjobservice": "true",
      "replication-controller": "dxpbatchjobservice-v007",
      "version": "7"
    },
    "name": "dxpbatchjobservice-v007",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpbatchjobservice",
        "cluster": "dxpbatchjobservice",
        "dxpbatchjobservice-v007": "true",
        "replication-controller": "dxpbatchjobservice-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpbatchjobservice",
          "cluster": "dxpbatchjobservice",
          "dxpbatchjobservice-v007": "true",
          "load-balancer-dxpbatchjobservice": "true",
          "replication-controller": "dxpbatchjobservice-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-spring-batchjob-service:0.6.0.43",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-spring-batchjob-service",
            "ports": [
              {
                "containerPort": 8337,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "spring-batchjob-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/spring-batchjob-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "spring-batchjob-configmap"
            },
            "name": "spring-batchjob-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpbatchjobservice",
      "cluster": "dxpbatchjobservice",
      "dxpbatchjobservice-v008": "true",
      "load-balancer-dxpbatchjobservice": "true",
      "replication-controller": "dxpbatchjobservice-v008",
      "version": "8"
    },
    "name": "dxpbatchjobservice-v008",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpbatchjobservice",
        "cluster": "dxpbatchjobservice",
        "dxpbatchjobservice-v008": "true",
        "replication-controller": "dxpbatchjobservice-v008",
        "version": "8"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpbatchjobservice",
          "cluster": "dxpbatchjobservice",
          "dxpbatchjobservice-v008": "true",
          "load-balancer-dxpbatchjobservice": "true",
          "replication-controller": "dxpbatchjobservice-v008",
          "version": "8"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-spring-batchjob-service:0.6.0.49",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-spring-batchjob-service",
            "ports": [
              {
                "containerPort": 8337,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "spring-batchjob-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/spring-batchjob-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "spring-batchjob-configmap"
            },
            "name": "spring-batchjob-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "8"
    },
    "labels": {
      "app": "dxpboardingservice",
      "cluster": "dxpboardingservice",
      "dxpboardingservice-v012": "true",
      "load-balancer-dxpboardingservice": "true",
      "replication-controller": "dxpboardingservice-v012",
      "version": "12"
    },
    "name": "dxpboardingservice-v012",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpboardingservice",
        "cluster": "dxpboardingservice",
        "dxpboardingservice-v012": "true",
        "replication-controller": "dxpboardingservice-v012",
        "version": "12"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpboardingservice",
          "cluster": "dxpboardingservice",
          "dxpboardingservice-v012": "true",
          "load-balancer-dxpboardingservice": "true",
          "replication-controller": "dxpboardingservice-v012",
          "version": "12"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_BOARDING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-boarding-service:0.6.0.30",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/boarding-service/info",
                "port": 8328,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-boarding-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "boarding-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/boarding-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "boarding-configmap"
            },
            "name": "boarding-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/boarding-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpcartservice",
      "cluster": "dxpcartservice",
      "dxpcartservice-v019": "true",
      "load-balancer-dxpcartservice": "true",
      "replication-controller": "dxpcartservice-v019",
      "version": "19"
    },
    "name": "dxpcartservice-v019",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcartservice",
        "cluster": "dxpcartservice",
        "dxpcartservice-v019": "true",
        "replication-controller": "dxpcartservice-v019",
        "version": "19"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcartservice",
          "cluster": "dxpcartservice",
          "dxpcartservice-v019": "true",
          "load-balancer-dxpcartservice": "true",
          "replication-controller": "dxpcartservice-v019",
          "version": "19"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_CART_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-cart-service:0.6.0.47",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/cart-service/info",
                "port": 8304,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-cart-service",
            "ports": [
              {
                "containerPort": 8304,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "cart-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/cart-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "application.yml",
                  "path": "application.yml"
                }
              ],
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "cart-service.yml",
                  "path": "cart-service.yml"
                }
              ],
              "name": "cart-configmap"
            },
            "name": "cart-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/cart-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "5"
    },
    "labels": {
      "app": "dxpcontentmanagementservice",
      "cluster": "dxpcontentmanagementservice",
      "dxpcontentmanagementservice-v007": "true",
      "load-balancer-dxpcontentmanagementservice": "true",
      "replication-controller": "dxpcontentmanagementservice-v007",
      "version": "7"
    },
    "name": "dxpcontentmanagementservice-v007",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcontentmanagementservice",
        "cluster": "dxpcontentmanagementservice",
        "dxpcontentmanagementservice-v007": "true",
        "replication-controller": "dxpcontentmanagementservice-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcontentmanagementservice",
          "cluster": "dxpcontentmanagementservice",
          "dxpcontentmanagementservice-v007": "true",
          "load-balancer-dxpcontentmanagementservice": "true",
          "replication-controller": "dxpcontentmanagementservice-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-content-management-service:0.6.0.19",
            "imagePullPolicy": "IfNotPresent",
            "name": "content-management-service",
            "ports": [
              {
                "containerPort": 8060,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "content-management-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/content-management-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "content-management-configmap"
            },
            "name": "content-management-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/contentmanagement-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpdaemonservice",
      "cluster": "dxpdaemonservice",
      "dxpdaemonservice-v026": "true",
      "load-balancer-dxpdaemonservice": "true",
      "replication-controller": "dxpdaemonservice-v026",
      "version": "26"
    },
    "name": "dxpdaemonservice-v026",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdaemonservice",
        "cluster": "dxpdaemonservice",
        "dxpdaemonservice-v026": "true",
        "replication-controller": "dxpdaemonservice-v026",
        "version": "26"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdaemonservice",
          "cluster": "dxpdaemonservice",
          "dxpdaemonservice-v026": "true",
          "load-balancer-dxpdaemonservice": "true",
          "replication-controller": "dxpdaemonservice-v026",
          "version": "26"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "DXP_DAEMON_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/dxp-daemon-service:0.7.0.109",
            "imagePullPolicy": "IfNotPresent",
            "name": "dxp-daemon-service",
            "ports": [
              {
                "containerPort": 8338,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "daemon-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dxp-daemon-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "daemon-configmap"
            },
            "name": "daemon-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpdeviceservice",
      "cluster": "dxpdeviceservice",
      "dxpdeviceservice-v001": "true",
      "load-balancer-dxpdeviceservice": "true",
      "replication-controller": "dxpdeviceservice-v001",
      "version": "1"
    },
    "name": "dxpdeviceservice-v001",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdeviceservice",
        "cluster": "dxpdeviceservice",
        "dxpdeviceservice-v001": "true",
        "replication-controller": "dxpdeviceservice-v001",
        "version": "1"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdeviceservice",
          "cluster": "dxpdeviceservice",
          "dxpdeviceservice-v001": "true",
          "load-balancer-dxpdeviceservice": "true",
          "replication-controller": "dxpdeviceservice-v001",
          "version": "1"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_DEVICE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-device-service:0.6.0.10",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-device-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "device-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/device-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "device-configmap"
            },
            "name": "device-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/device-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpdiningservice",
      "cluster": "dxpdiningservice",
      "dxpdiningservice-v011": "true",
      "load-balancer-dxpdiningservice": "true",
      "replication-controller": "dxpdiningservice-v011",
      "version": "11"
    },
    "name": "dxpdiningservice-v011",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdiningservice",
        "cluster": "dxpdiningservice",
        "dxpdiningservice-v011": "true",
        "replication-controller": "dxpdiningservice-v011",
        "version": "11"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdiningservice",
          "cluster": "dxpdiningservice",
          "dxpdiningservice-v011": "true",
          "load-balancer-dxpdiningservice": "true",
          "replication-controller": "dxpdiningservice-v011",
          "version": "11"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_DINING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-dining-service:0.6.0.11",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-dining-service",
            "ports": [
              {
                "containerPort": 8335,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "dining-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dining-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "dining-configmap"
            },
            "name": "dining-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/dining-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpembarkationadminservice",
      "cluster": "dxpembarkationadminservice",
      "dxpembarkationadminservice-v053": "true",
      "load-balancer-dxpembarkationadminservice": "true",
      "replication-controller": "dxpembarkationadminservice-v053",
      "version": "53"
    },
    "name": "dxpembarkationadminservice-v053",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationadminservice",
        "cluster": "dxpembarkationadminservice",
        "dxpembarkationadminservice-v053": "true",
        "replication-controller": "dxpembarkationadminservice-v053",
        "version": "53"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationadminservice",
          "cluster": "dxpembarkationadminservice",
          "dxpembarkationadminservice-v053": "true",
          "load-balancer-dxpembarkationadminservice": "false",
          "replication-controller": "dxpembarkationadminservice-v053",
          "version": "53"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/vas-embarkationadmin-service:0.2.0.102",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-embarkationadmin-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8405,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "embarkationadmin-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkationadmin-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkationadmin-vas-configmap"
            },
            "name": "embarkationadmin-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/embarkationadmin-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpembarkationadminservice",
      "cluster": "dxpembarkationadminservice",
      "dxpembarkationadminservice-v054": "true",
      "load-balancer-dxpembarkationadminservice": "true",
      "replication-controller": "dxpembarkationadminservice-v054",
      "version": "54"
    },
    "name": "dxpembarkationadminservice-v054",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationadminservice",
        "cluster": "dxpembarkationadminservice",
        "dxpembarkationadminservice-v054": "true",
        "replication-controller": "dxpembarkationadminservice-v054",
        "version": "54"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationadminservice",
          "cluster": "dxpembarkationadminservice",
          "dxpembarkationadminservice-v054": "true",
          "load-balancer-dxpembarkationadminservice": "true",
          "replication-controller": "dxpembarkationadminservice-v054",
          "version": "54"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/vas-embarkationadmin-service:0.2.0.103",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-embarkationadmin-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8405,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "embarkationadmin-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkationadmin-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkationadmin-vas-configmap"
            },
            "name": "embarkationadmin-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/embarkationadmin-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpembarkationbff",
      "cluster": "dxpembarkationbff",
      "dxpembarkationbff-v003": "true",
      "load-balancer-dxpembarkationbff": "true",
      "replication-controller": "dxpembarkationbff-v003",
      "version": "3"
    },
    "name": "dxpembarkationbff-v003",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationbff",
        "cluster": "dxpembarkationbff",
        "dxpembarkationbff-v003": "true",
        "replication-controller": "dxpembarkationbff-v003",
        "version": "3"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationbff",
          "cluster": "dxpembarkationbff",
          "dxpembarkationbff-v003": "true",
          "load-balancer-dxpembarkationbff": "true",
          "replication-controller": "dxpembarkationbff-v003",
          "version": "3"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_EMBARKATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/embarkation-bff:1.0.142",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/embarkation-bff/version",
                "port": 3006,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "embarkation-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "embarkation-bff-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkation-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkation-bff-configmap"
            },
            "name": "embarkation-bff-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "10"
    },
    "labels": {
      "app": "dxpguestservice",
      "cluster": "dxpguestservice",
      "dxpguestservice-v018": "true",
      "load-balancer-dxpguestservice": "true",
      "replication-controller": "dxpguestservice-v018",
      "version": "18"
    },
    "name": "dxpguestservice-v018",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpguestservice",
        "cluster": "dxpguestservice",
        "dxpguestservice-v018": "true",
        "replication-controller": "dxpguestservice-v018",
        "version": "18"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpguestservice",
          "cluster": "dxpguestservice",
          "dxpguestservice-v018": "true",
          "load-balancer-dxpguestservice": "true",
          "replication-controller": "dxpguestservice-v018",
          "version": "18"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_GUEST_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-guest-service:0.6.0.81",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/guest-service/info",
                "port": 8303,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-guest-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "guest-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/guest-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "guest-configmap"
            },
            "name": "guest-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/guest-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxpidcrossreferenceservice",
      "cluster": "dxpidcrossreferenceservice",
      "dxpidcrossreferenceservice-v033": "true",
      "load-balancer-dxpidcrossreferenceservice": "true",
      "replication-controller": "dxpidcrossreferenceservice-v033",
      "version": "33"
    },
    "name": "dxpidcrossreferenceservice-v033",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpidcrossreferenceservice",
        "cluster": "dxpidcrossreferenceservice",
        "dxpidcrossreferenceservice-v033": "true",
        "replication-controller": "dxpidcrossreferenceservice-v033",
        "version": "33"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpidcrossreferenceservice",
          "cluster": "dxpidcrossreferenceservice",
          "dxpidcrossreferenceservice-v033": "true",
          "load-balancer-dxpidcrossreferenceservice": "true",
          "replication-controller": "dxpidcrossreferenceservice-v033",
          "version": "33"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-idcrossreference-service:0.6.0.40",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/idcrossreference-service/info",
                "port": 8326,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-idcrossreference-service",
            "ports": [
              {
                "containerPort": 8326,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "idcrossreference-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/idcrossreference-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "idcrossreference-configmap"
            },
            "name": "idcrossreference-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/idcrossreference-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpidentityaccessmanagementservice",
      "cluster": "dxpidentityaccessmanagementservice",
      "dxpidentityaccessmanagementservice-v020": "true",
      "load-balancer-dxpidentityaccessmanagementservice": "true",
      "replication-controller": "dxpidentityaccessmanagementservice-v020",
      "version": "20"
    },
    "name": "dxpidentityaccessmanagementservice-v020",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "dxpidentityaccessmanagementservice",
        "cluster": "dxpidentityaccessmanagementservice",
        "dxpidentityaccessmanagementservice-v020": "true",
        "replication-controller": "dxpidentityaccessmanagementservice-v020",
        "version": "20"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpidentityaccessmanagementservice",
          "cluster": "dxpidentityaccessmanagementservice",
          "dxpidentityaccessmanagementservice-v020": "true",
          "load-balancer-dxpidentityaccessmanagementservice": "true",
          "replication-controller": "dxpidentityaccessmanagementservice-v020",
          "version": "20"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DXPKEYSTORE_VALUE",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "dxpkeystore",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-identity-access-management-service:0.6.0.73",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/identityaccessmanagement-service/info",
                "port": 8362,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-identityaccessmanagement-service",
            "ports": [
              {
                "containerPort": 8362,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "identity-access-management-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/identity-access-management-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "identity-access-management-configmap"
            },
            "name": "identity-access-management-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/identityaccessmanagement-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6"
    },
    "labels": {
      "app": "dxpimageprocessingservice",
      "cluster": "dxpimageprocessingservice",
      "dxpimageprocessingservice-v005": "true",
      "load-balancer-dxpimageprocessingservice": "true",
      "replication-controller": "dxpimageprocessingservice-v005",
      "version": "5"
    },
    "name": "dxpimageprocessingservice-v005",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpimageprocessingservice",
        "cluster": "dxpimageprocessingservice",
        "dxpimageprocessingservice-v005": "true",
        "replication-controller": "dxpimageprocessingservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpimageprocessingservice",
          "cluster": "dxpimageprocessingservice",
          "dxpimageprocessingservice-v005": "true",
          "load-balancer-dxpimageprocessingservice": "true",
          "replication-controller": "dxpimageprocessingservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "BASICTOKEN",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "basictoken",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEYID",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkeyid",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEUSER",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemPassword",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-imageprocessing-service:0.6.0.49",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-imageprocessing-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "imageprocessing-properties"
              },
              {
                "mountPath": "/etc/config-server",
                "name": "application-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/imageprocessing-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "imageprocessing-configmap"
            },
            "name": "imageprocessing-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpinfraconfigmapsyncupdemon",
      "cluster": "dxpinfraconfigmapsyncupdemon",
      "dxpinfraconfigmapsyncupdemon-v003": "true",
      "load-balancer-dxpconfigmapsyncdaemon": "true",
      "replication-controller": "dxpinfraconfigmapsyncupdemon-v003",
      "version": "3"
    },
    "name": "dxpinfraconfigmapsyncupdemon-v003",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpinfraconfigmapsyncupdemon",
        "cluster": "dxpinfraconfigmapsyncupdemon",
        "dxpinfraconfigmapsyncupdemon-v003": "true",
        "replication-controller": "dxpinfraconfigmapsyncupdemon-v003",
        "version": "3"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpinfraconfigmapsyncupdemon",
          "cluster": "dxpinfraconfigmapsyncupdemon",
          "dxpinfraconfigmapsyncupdemon-v003": "true",
          "load-balancer-dxpconfigmapsyncdaemon": "true",
          "replication-controller": "dxpinfraconfigmapsyncupdemon-v003",
          "version": "3"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-configmap-daemon-service:0.1.0.27",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/configmap-daemon-service/info",
                "port": 8501,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-configmap-daemon-service",
            "ports": [
              {
                "containerPort": 8501,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "configmapdaemon-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              },
              {
                "mountPath": "/etc/couchdb-configs/ars",
                "name": "central-config-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/configmap-demon-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "configmap-daemon-configmap"
            },
            "name": "configmapdaemon-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/configmap-daemon-service/"
            },
            "name": "tomcatlog-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "central-config-doc-configmap"
            },
            "name": "central-config-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpldapservice",
      "pod-template-hash": "2412724749",
      "version": "latest",
      "visualize": "true"
    },
    "name": "dxpldapservice-2412724749",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "dxpldapservice",
        "uid": "9ca6dde5-dc11-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "minReadySeconds": 60,
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpldapservice",
        "pod-template-hash": "2412724749",
        "version": "latest",
        "visualize": "true"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpldapservice",
          "pod-template-hash": "2412724749",
          "version": "latest",
          "visualize": "true"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "osixia/openldap",
            "imagePullPolicy": "Always",
            "name": "openldap",
            "ports": [
              {
                "containerPort": 389,
                "protocol": "TCP"
              },
              {
                "containerPort": 636,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          },
          {
            "env": [
              {
                "name": "PHPLDAPADMIN_HTTPS",
                "value": "false"
              },
              {
                "name": "PHPLDAPADMIN_LDAP_HOSTS",
                "value": "localhost"
              }
            ],
            "image": "osixia/phpldapadmin",
            "imagePullPolicy": "Always",
            "name": "phpldapadmin",
            "ports": [
              {
                "containerPort": 80,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v014": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v014",
      "version": "14"
    },
    "name": "dxplogisticsservice-v014",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v014": "true",
        "replication-controller": "dxplogisticsservice-v014",
        "version": "14"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v014": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v014",
          "version": "14"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v015": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v015",
      "version": "15"
    },
    "name": "dxplogisticsservice-v015",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v015": "true",
        "replication-controller": "dxplogisticsservice-v015",
        "version": "15"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v015": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v015",
          "version": "15"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v016": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v016",
      "version": "16"
    },
    "name": "dxplogisticsservice-v016",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v016": "true",
        "replication-controller": "dxplogisticsservice-v016",
        "version": "16"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v016": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v016",
          "version": "16"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v017": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v017",
      "version": "17"
    },
    "name": "dxplogisticsservice-v017",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v017": "true",
        "replication-controller": "dxplogisticsservice-v017",
        "version": "17"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v017": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v017",
          "version": "17"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v018": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v018",
      "version": "18"
    },
    "name": "dxplogisticsservice-v018",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v018": "true",
        "replication-controller": "dxplogisticsservice-v018",
        "version": "18"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v018": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v018",
          "version": "18"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v019": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v019",
      "version": "19"
    },
    "name": "dxplogisticsservice-v019",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v019": "true",
        "replication-controller": "dxplogisticsservice-v019",
        "version": "19"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v019": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v019",
          "version": "19"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v020": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v020",
      "version": "20"
    },
    "name": "dxplogisticsservice-v020",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v020": "true",
        "replication-controller": "dxplogisticsservice-v020",
        "version": "20"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v020": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v020",
          "version": "20"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v021": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v021",
      "version": "21"
    },
    "name": "dxplogisticsservice-v021",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v021": "true",
        "replication-controller": "dxplogisticsservice-v021",
        "version": "21"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v021": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v021",
          "version": "21"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v022": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v022",
      "version": "22"
    },
    "name": "dxplogisticsservice-v022",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v022": "true",
        "replication-controller": "dxplogisticsservice-v022",
        "version": "22"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v022": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v022",
          "version": "22"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v023": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v023",
      "version": "23"
    },
    "name": "dxplogisticsservice-v023",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v023": "true",
        "replication-controller": "dxplogisticsservice-v023",
        "version": "23"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v023": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v023",
          "version": "23"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v024": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v024",
      "version": "24"
    },
    "name": "dxplogisticsservice-v024",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v024": "true",
        "replication-controller": "dxplogisticsservice-v024",
        "version": "24"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v024": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v024",
          "version": "24"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v025": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v025",
      "version": "25"
    },
    "name": "dxplogisticsservice-v025",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v025": "true",
        "replication-controller": "dxplogisticsservice-v025",
        "version": "25"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v025": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v025",
          "version": "25"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v026": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v026",
      "version": "26"
    },
    "name": "dxplogisticsservice-v026",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v026": "true",
        "replication-controller": "dxplogisticsservice-v026",
        "version": "26"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v026": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v026",
          "version": "26"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v027": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v027",
      "version": "27"
    },
    "name": "dxplogisticsservice-v027",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v027": "true",
        "replication-controller": "dxplogisticsservice-v027",
        "version": "27"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v027": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v027",
          "version": "27"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v028": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v028",
      "version": "28"
    },
    "name": "dxplogisticsservice-v028",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v028": "true",
        "replication-controller": "dxplogisticsservice-v028",
        "version": "28"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v028": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v028",
          "version": "28"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v029": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v029",
      "version": "29"
    },
    "name": "dxplogisticsservice-v029",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v029": "true",
        "replication-controller": "dxplogisticsservice-v029",
        "version": "29"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v029": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v029",
          "version": "29"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v030": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v030",
      "version": "30"
    },
    "name": "dxplogisticsservice-v030",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v030": "true",
        "replication-controller": "dxplogisticsservice-v030",
        "version": "30"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v030": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v030",
          "version": "30"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"},\"name\":\"dxplogisticsservice-v004\",\"namespace\":\"dev\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxplogisticsservice\",\"cluster\":\"dxplogisticsservice\",\"dxplogisticsservice-v004\":\"true\",\"load-balancer-dxplogisticsservice\":\"true\",\"replication-controller\":\"dxplogisticsservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"logistics-service\",\"ports\":[{\"containerPort\":8332,\"protocol\":\"TCP\"}],\"resources\":{\"limits\":{\"memory\":\"700Mi\"}},\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"logistics-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/logistics-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"logistics-configmap\"},\"name\":\"logistics-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/logistics-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v031": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v031",
      "version": "31"
    },
    "name": "dxplogisticsservice-v031",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v031": "true",
        "replication-controller": "dxplogisticsservice-v031",
        "version": "31"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v031": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v031",
          "version": "31"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "logistics-service",
            "ports": [
              {
                "containerPort": 8332,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistics-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpmessagingservice",
      "cluster": "dxpmessagingservice",
      "dxpmessagingservice-v009": "true",
      "load-balancer-dxpmessagingservice": "true",
      "replication-controller": "dxpmessagingservice-v009",
      "version": "9"
    },
    "name": "dxpmessagingservice-v009",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpmessagingservice",
        "cluster": "dxpmessagingservice",
        "dxpmessagingservice-v009": "true",
        "replication-controller": "dxpmessagingservice-v009",
        "version": "9"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmessagingservice",
          "cluster": "dxpmessagingservice",
          "dxpmessagingservice-v009": "true",
          "load-balancer-dxpmessagingservice": "true",
          "replication-controller": "dxpmessagingservice-v009",
          "version": "9"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_MESSAGING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-messaging-service:1.0.0.49",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/messaging-service/info",
                "port": 8306,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-messaging-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "messaging-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/messaging-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "messaging-configmap"
            },
            "name": "messaging-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/messaging-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpmultimediastorageservice",
      "cluster": "dxpmultimediastorageservice",
      "dxpmultimediastorageservice-v026": "true",
      "load-balancer-dxpmultimediastorageservice": "true",
      "replication-controller": "dxpmultimediastorageservice-v026",
      "version": "26"
    },
    "name": "dxpmultimediastorageservice-v026",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "dxpmultimediastorageservice",
        "cluster": "dxpmultimediastorageservice",
        "dxpmultimediastorageservice-v026": "true",
        "replication-controller": "dxpmultimediastorageservice-v026",
        "version": "26"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmultimediastorageservice",
          "cluster": "dxpmultimediastorageservice",
          "dxpmultimediastorageservice-v026": "true",
          "load-balancer-dxpmultimediastorageservice": "false",
          "replication-controller": "dxpmultimediastorageservice-v026",
          "version": "26"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEYID",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkeyid",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEUSER",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemPassword",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-multimediastorage-service:0.6.0.51",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-multimediastorage-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "multimediastorage-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/multimediastorage-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "multimediastorage-configmap"
            },
            "name": "multimediastorage-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/multimediastorage-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpmultimediastorageservice",
      "cluster": "dxpmultimediastorageservice",
      "dxpmultimediastorageservice-v027": "true",
      "load-balancer-dxpmultimediastorageservice": "true",
      "replication-controller": "dxpmultimediastorageservice-v027",
      "version": "27"
    },
    "name": "dxpmultimediastorageservice-v027",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "dxpmultimediastorageservice",
        "cluster": "dxpmultimediastorageservice",
        "dxpmultimediastorageservice-v027": "true",
        "replication-controller": "dxpmultimediastorageservice-v027",
        "version": "27"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmultimediastorageservice",
          "cluster": "dxpmultimediastorageservice",
          "dxpmultimediastorageservice-v027": "true",
          "load-balancer-dxpmultimediastorageservice": "true",
          "replication-controller": "dxpmultimediastorageservice-v027",
          "version": "27"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEYID",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkeyid",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEUSER",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemPassword",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-multimediastorage-service:0.6.0.52",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-multimediastorage-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "multimediastorage-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/multimediastorage-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "multimediastorage-configmap"
            },
            "name": "multimediastorage-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/multimediastorage-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxppersonlocationservice",
      "cluster": "dxppersonlocationservice",
      "dxppersonlocationservice-v002": "true",
      "load-balancer-dxppersonlocationservice": "true",
      "replication-controller": "dxppersonlocationservice-v002",
      "version": "2"
    },
    "name": "dxppersonlocationservice-v002",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxppersonlocationservice",
        "cluster": "dxppersonlocationservice",
        "dxppersonlocationservice-v002": "true",
        "replication-controller": "dxppersonlocationservice-v002",
        "version": "2"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxppersonlocationservice",
          "cluster": "dxppersonlocationservice",
          "dxppersonlocationservice-v002": "true",
          "load-balancer-dxppersonlocationservice": "true",
          "replication-controller": "dxppersonlocationservice-v002",
          "version": "2"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-personlocation-service:0.6.0.11",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-personlocation-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "personlocation-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/personlocation-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "personlocation-configmap"
            },
            "name": "personlocation-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/personlocation-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpreferencedataservice",
      "cluster": "dxpreferencedataservice",
      "dxpreferencedataservice-v007": "true",
      "load-balancer-dxpreferencedataservice": "true",
      "replication-controller": "dxpreferencedataservice-v007",
      "version": "7"
    },
    "name": "dxpreferencedataservice-v007",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreferencedataservice",
        "cluster": "dxpreferencedataservice",
        "dxpreferencedataservice-v007": "true",
        "replication-controller": "dxpreferencedataservice-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreferencedataservice",
          "cluster": "dxpreferencedataservice",
          "dxpreferencedataservice-v007": "true",
          "load-balancer-dxpreferencedataservice": "true",
          "replication-controller": "dxpreferencedataservice-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-referencedata-service:0.6.0.62",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/referencedata-service/info",
                "port": 8311,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-referencedata-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "referencedata-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/referencedata-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "referencedata-configmap"
            },
            "name": "referencedata-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/referencedata-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpreportingservice",
      "cluster": "dxpreportingservice",
      "dxpreportingservice-v026": "true",
      "load-balancer-dxpreportingservice": "true",
      "replication-controller": "dxpreportingservice-v026",
      "version": "26"
    },
    "name": "dxpreportingservice-v026",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreportingservice",
        "cluster": "dxpreportingservice",
        "dxpreportingservice-v026": "true",
        "replication-controller": "dxpreportingservice-v026",
        "version": "26"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreportingservice",
          "cluster": "dxpreportingservice",
          "dxpreportingservice-v026": "true",
          "load-balancer-dxpreportingservice": "true",
          "replication-controller": "dxpreportingservice-v026",
          "version": "26"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_REPORTING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-reporting-service:0.6.0.50",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-reporting-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8370,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "reporting-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/reporting-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "reporting-configmap"
            },
            "name": "reporting-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/reporting-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "11"
    },
    "labels": {
      "app": "dxpsailorframeworkbff",
      "cluster": "dxpsailorframeworkbff",
      "dxpsailorframeworkbff-v025": "true",
      "load-balancer-dxpsailorframeworkbff": "true",
      "replication-controller": "dxpsailorframeworkbff-v025",
      "version": "25"
    },
    "name": "dxpsailorframeworkbff-v025",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsailorframeworkbff",
        "cluster": "dxpsailorframeworkbff",
        "dxpsailorframeworkbff-v025": "true",
        "replication-controller": "dxpsailorframeworkbff-v025",
        "version": "25"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsailorframeworkbff",
          "cluster": "dxpsailorframeworkbff",
          "dxpsailorframeworkbff-v025": "true",
          "load-balancer-dxpsailorframeworkbff": "true",
          "replication-controller": "dxpsailorframeworkbff-v025",
          "version": "25"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/dxp-sailor-framework-bff:1.0.43",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/sailor-framework-bff/version",
                "port": 3014,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "dxp-sailor-framework-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "sailor-framework-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "sailor-framework-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dxp-sailor-framework-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-framework-bff-configmap"
            },
            "name": "sailor-framework-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-framework-ui-configmap"
            },
            "name": "sailor-framework-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpsailorservice",
      "cluster": "dxpsailorservice",
      "dxpsailorservice-v011": "true",
      "load-balancer-dxpsailorservice": "true",
      "replication-controller": "dxpsailorservice-v011",
      "version": "11"
    },
    "name": "dxpsailorservice-v011",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsailorservice",
        "cluster": "dxpsailorservice",
        "dxpsailorservice-v011": "true",
        "replication-controller": "dxpsailorservice-v011",
        "version": "11"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsailorservice",
          "cluster": "dxpsailorservice",
          "dxpsailorservice-v011": "true",
          "load-balancer-dxpsailorservice": "true",
          "replication-controller": "dxpsailorservice-v011",
          "version": "11"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_SAILOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/vas-sailor-service:0.6.0.20",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/sailorvas-service/info",
                "port": 8404,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "vas-sailor-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "sailor-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/sailor-service"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-vas-configmap"
            },
            "name": "sailor-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpsalesofferservice",
      "cluster": "dxpsalesofferservice",
      "dxpsalesofferservice-v014": "true",
      "replication-controller": "dxpsalesofferservice-v014",
      "version": "14"
    },
    "name": "dxpsalesofferservice-v014",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsalesofferservice",
        "cluster": "dxpsalesofferservice",
        "dxpsalesofferservice-v014": "true",
        "replication-controller": "dxpsalesofferservice-v014",
        "version": "14"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsalesofferservice",
          "cluster": "dxpsalesofferservice",
          "dxpsalesofferservice-v014": "true",
          "replication-controller": "dxpsalesofferservice-v014",
          "version": "14"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SALESOFFER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-salesoffer-service:0.6.0.33",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/salesoffer-service/info",
                "port": 8302,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-salesoffer-service",
            "ports": [
              {
                "containerPort": 8302,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "salesoffer-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/salesoffer-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "salesoffer-configmap"
            },
            "name": "salesoffer-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/salesoffer-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpsalesorderservice",
      "cluster": "dxpsalesorderservice",
      "dxpsalesorderservice-v024": "true",
      "load-balancer-dxpsalesorderservice": "true",
      "replication-controller": "dxpsalesorderservice-v024",
      "version": "24"
    },
    "name": "dxpsalesorderservice-v024",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsalesorderservice",
        "cluster": "dxpsalesorderservice",
        "dxpsalesorderservice-v024": "true",
        "replication-controller": "dxpsalesorderservice-v024",
        "version": "24"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsalesorderservice",
          "cluster": "dxpsalesorderservice",
          "dxpsalesorderservice-v024": "true",
          "load-balancer-dxpsalesorderservice": "true",
          "replication-controller": "dxpsalesorderservice-v024",
          "version": "24"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SALESORDER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-salesorder-service-kube:0.6.0.20",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/salesorder-service/info",
                "port": 8301,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-salesorder-service-kube",
            "ports": [
              {
                "containerPort": 8301,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "salesorder-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/salesorder-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "salesorder-configmap"
            },
            "name": "salesorder-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/salesorder-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpshipservice",
      "cluster": "dxpshipservice",
      "dxpshipservice-v015": "true",
      "load-balancer-dxpshipservice": "true",
      "replication-controller": "dxpshipservice-v015",
      "version": "15"
    },
    "name": "dxpshipservice-v015",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpshipservice",
        "cluster": "dxpshipservice",
        "dxpshipservice-v015": "true",
        "replication-controller": "dxpshipservice-v015",
        "version": "15"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpshipservice",
          "cluster": "dxpshipservice",
          "dxpshipservice-v015": "true",
          "load-balancer-dxpshipservice": "true",
          "replication-controller": "dxpshipservice-v015",
          "version": "15"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SHIP_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-ship-service:0.6.0.53",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/ship-service/info",
                "port": 8322,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-ship-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "ship-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/ship-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "ship-configmap"
            },
            "name": "ship-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/ship-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpsocialnetworkingservice",
      "cluster": "dxpsocialnetworkingservice",
      "dxpsocialnetworkingservice-v033": "true",
      "load-balancer-dxpsocialnetworkingservice": "true",
      "replication-controller": "dxpsocialnetworkingservice-v033",
      "version": "33"
    },
    "name": "dxpsocialnetworkingservice-v033",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsocialnetworkingservice",
        "cluster": "dxpsocialnetworkingservice",
        "dxpsocialnetworkingservice-v033": "true",
        "replication-controller": "dxpsocialnetworkingservice-v033",
        "version": "33"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsocialnetworkingservice",
          "cluster": "dxpsocialnetworkingservice",
          "dxpsocialnetworkingservice-v033": "true",
          "load-balancer-dxpsocialnetworkingservice": "true",
          "replication-controller": "dxpsocialnetworkingservice-v033",
          "version": "33"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-socialnetworking-service:0.6.0.41",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/socialnetworking-service/info",
                "port": 8321,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-socialnetworking-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "socialnetworking-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/socialnetworking-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "socialnetworking-configmap"
            },
            "name": "socialnetworking-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/socialnetworking-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxptalendmessaging",
      "cluster": "dxptalendmessaging",
      "dxptalendmessaging-v006": "true",
      "load-balancer-dxptalendmessaging": "true",
      "replication-controller": "dxptalendmessaging-v006",
      "version": "6"
    },
    "name": "dxptalendmessaging-v006",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxptalendmessaging",
        "cluster": "dxptalendmessaging",
        "dxptalendmessaging-v006": "true",
        "replication-controller": "dxptalendmessaging-v006",
        "version": "6"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxptalendmessaging",
          "cluster": "dxptalendmessaging",
          "dxptalendmessaging-v006": "true",
          "load-balancer-dxptalendmessaging": "true",
          "replication-controller": "dxptalendmessaging-v006",
          "version": "6"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/talend-messaging:0.1.0.12",
            "imagePullPolicy": "IfNotPresent",
            "name": "talend-messaging",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/talend/MainJob_EventSyncingProcess/syncgatewaytorestapialertupdates/messages_eventsyncingprocess_0_1/contexts",
                "name": "talend-messaging-properties"
              },
              {
                "mountPath": "/talend/MainJob_EventSyncingProcess/syncgatewaytorestapialertupdates/alerts_eventsyncingprocess_0_1/contexts/",
                "name": "talend-alerting-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "talendmessaging-configmap"
            },
            "name": "talend-messaging-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "talendalerting-configmap"
            },
            "name": "talend-alerting-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpteammemberservice",
      "cluster": "dxpteammemberservice",
      "dxpteammemberservice-v008": "true",
      "load-balancer-dxpteammemberservice": "true",
      "replication-controller": "dxpteammemberservice-v008",
      "version": "8"
    },
    "name": "dxpteammemberservice-v008",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpteammemberservice",
        "cluster": "dxpteammemberservice",
        "dxpteammemberservice-v008": "true",
        "replication-controller": "dxpteammemberservice-v008",
        "version": "8"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpteammemberservice",
          "cluster": "dxpteammemberservice",
          "dxpteammemberservice-v008": "true",
          "load-balancer-dxpteammemberservice": "true",
          "replication-controller": "dxpteammemberservice-v008",
          "version": "8"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-teammember-service:0.6.0.53",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/teammember-service/info",
                "port": 8315,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-teammember-service",
            "ports": [
              {
                "containerPort": 8315,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "teammember-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/teammember-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "teammember-configmap"
            },
            "name": "teammember-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/teammember-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpvendorservice",
      "cluster": "dxpvendorservice",
      "dxpvendorservice-v014": "true",
      "replication-controller": "dxpvendorservice-v014",
      "version": "14"
    },
    "name": "dxpvendorservice-v014",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvendorservice",
        "cluster": "dxpvendorservice",
        "dxpvendorservice-v014": "true",
        "replication-controller": "dxpvendorservice-v014",
        "version": "14"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvendorservice",
          "cluster": "dxpvendorservice",
          "dxpvendorservice-v014": "true",
          "replication-controller": "dxpvendorservice-v014",
          "version": "14"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VENDOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-vendor-service:0.6.0.21",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/vendor-service/info",
                "port": 8319,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-vendor-service",
            "ports": [
              {
                "containerPort": 8319,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "vendor-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/vendor-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "vendor-configmap"
            },
            "name": "vendor-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/vendor-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpvendorservice",
      "cluster": "dxpvendorservice",
      "dxpvendorservice-v015": "true",
      "replication-controller": "dxpvendorservice-v015",
      "version": "15"
    },
    "name": "dxpvendorservice-v015",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvendorservice",
        "cluster": "dxpvendorservice",
        "dxpvendorservice-v015": "true",
        "replication-controller": "dxpvendorservice-v015",
        "version": "15"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvendorservice",
          "cluster": "dxpvendorservice",
          "dxpvendorservice-v015": "true",
          "replication-controller": "dxpvendorservice-v015",
          "version": "15"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VENDOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-vendor-service:0.6.0.6",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/vendor-service/info",
                "port": 8319,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-vendor-service",
            "ports": [
              {
                "containerPort": 8319,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "vendor-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/vendor-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "vendor-configmap"
            },
            "name": "vendor-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/vendor-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6"
    },
    "labels": {
      "app": "dxpvisitorservice",
      "cluster": "dxpvisitorservice",
      "dxpvisitorservice-v008": "true",
      "load-balancer-dxpvisitorservice": "true",
      "replication-controller": "dxpvisitorservice-v008",
      "version": "8"
    },
    "name": "dxpvisitorservice-v008",
    "namespace": "dev"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvisitorservice",
        "cluster": "dxpvisitorservice",
        "dxpvisitorservice-v008": "true",
        "replication-controller": "dxpvisitorservice-v008",
        "version": "8"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvisitorservice",
          "cluster": "dxpvisitorservice",
          "dxpvisitorservice-v008": "true",
          "load-balancer-dxpvisitorservice": "true",
          "replication-controller": "dxpvisitorservice-v008",
          "version": "8"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VISITOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-visitor-service:0.6.0.56",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/visitor-service/info",
                "port": 8316,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "visitor-service",
            "ports": [
              {
                "containerPort": 8316,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "visitor-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/visitor-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "visitor-configmap"
            },
            "name": "visitor-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/visitor-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "4",
      "deployment.kubernetes.io/revision-history": "1"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-svc",
      "name": "traefik-ingress-lb-svc",
      "pod-template-hash": "3702663936"
    },
    "name": "traefik-ingress-controller-svc-3702663936",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-svc",
        "uid": "5a902c36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-svc",
        "name": "traefik-ingress-lb-svc",
        "pod-template-hash": "3702663936"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-svc",
          "name": "traefik-ingress-lb-svc",
          "pod-template-hash": "3702663936"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-d",
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=svc",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-svc",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-svc",
        "serviceAccountName": "traefik-ingress-controller-svc"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-svc",
      "name": "traefik-ingress-lb-svc",
      "pod-template-hash": "4095259297"
    },
    "name": "traefik-ingress-controller-svc-4095259297",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-svc",
        "uid": "5a902c36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-svc",
        "name": "traefik-ingress-lb-svc",
        "pod-template-hash": "4095259297"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-svc",
          "name": "traefik-ingress-lb-svc",
          "pod-template-hash": "4095259297"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "--d",
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=svc",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-svc",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-svc",
        "serviceAccountName": "traefik-ingress-controller-svc"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-svc",
      "name": "traefik-ingress-lb-svc",
      "pod-template-hash": "681862215"
    },
    "name": "traefik-ingress-controller-svc-681862215",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-svc",
        "uid": "5a902c36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-svc",
        "name": "traefik-ingress-lb-svc",
        "pod-template-hash": "681862215"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-svc",
          "name": "traefik-ingress-lb-svc",
          "pod-template-hash": "681862215"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=svc",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-svc",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-svc",
        "serviceAccountName": "traefik-ingress-controller-svc"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "5"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-svc",
      "name": "traefik-ingress-lb-svc",
      "pod-template-hash": "941089485"
    },
    "name": "traefik-ingress-controller-svc-941089485",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-svc",
        "uid": "5a902c36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-svc",
        "name": "traefik-ingress-lb-svc",
        "pod-template-hash": "941089485"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-svc",
          "name": "traefik-ingress-lb-svc",
          "pod-template-hash": "941089485"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-d",
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=svc",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik:1.4-alpine",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-svc",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-svc",
        "serviceAccountName": "traefik-ingress-controller-svc"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-web",
      "name": "traefik-ingress-lb-web",
      "pod-template-hash": "2025279088"
    },
    "name": "traefik-ingress-controller-web-2025279088",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-web",
        "uid": "5aa88a36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-web",
        "name": "traefik-ingress-lb-web",
        "pod-template-hash": "2025279088"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-web",
          "name": "traefik-ingress-lb-web",
          "pod-template-hash": "2025279088"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-d",
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=web",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-web",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-web",
        "serviceAccountName": "traefik-ingress-controller-web"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb-web",
      "name": "traefik-ingress-lb-web",
      "pod-template-hash": "3129170755"
    },
    "name": "traefik-ingress-controller-web-3129170755",
    "namespace": "dev",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "traefik-ingress-controller-web",
        "uid": "5aa88a36-bfd9-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb-web",
        "name": "traefik-ingress-lb-web",
        "pod-template-hash": "3129170755"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb-web",
          "name": "traefik-ingress-lb-web",
          "pod-template-hash": "3129170755"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR",
              "--kubernetes.labelselector=name=web",
              "--accesslogsfile=/home/admin/access.log"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb-web",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              },
              {
                "containerPort": 8081,
                "name": "admin",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "700m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "700m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller-web",
        "serviceAccountName": "traefik-ingress-controller-web"
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-crew-bff-service.yml": "selfUrl: \"http://10.98.0.113:31032/activity-reservation-crew-bff/\"\nconsumerAppName: \"activity-reservation-crew-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"http://10.98.0.113:31310/multimediastorage-service/\""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-crew-bff-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-crew-ui-service.yml": "beaconScanningTimeDurationInSeconds: 100\nchannels: ['NC_ARS_T']\ncouchBucketName: 'appdocstore' \nchatSyncBucketName: 'dxpawschat'\nloggingBucketName: 'dxplogging'\nloggingMode: 'info'\nmediaItemUrl: 'http://dxpship.decurtiscorp.com/svc/multimediastorage-service/mediaitems/'\nappointmentChannel: 'ARS_NC_NC0007_Appointment'"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-crew-ui-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-system-bff-service.yml": "selfUrl: \"http://10.98.0.113:31030/activity-reservation-system-bff/\"\nconsumerAppName: \"activity-reservation-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"http://10.98.0.113:31310/multimediastorage-service/\"\nisDisabledActivityRequired : false\nisDisabledActivitySlotRequired: false\ninventoryBasedProductCode: \"I\"\ninProgressCartStatusId: 1\nactivityCartTypeId: 2"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-system-bff-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-system-ui-service.yml": "inProgressCartStatusId: 1\ncheckedOutCartStatusId: 2"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-system-ui-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-vas-service.yml": "inventory:\n holdtime:\n  excursion: 14\nlogLevel: INFO\nhibernateLogLevel: INFO\nseawareBaseUrl: http://10.3.0.14:8280/ota/rest \n#seawareBaseUrl: http://activity-reservation-service.getsandbox.com\nscheduler:\n  timer: 0 0/5 * * * ?\nkafka:\n topic:\n  appointments: ars-vas.activity-reservation\n  product: ProductTypes\n send:\n  appointmentEvent: true\n  productEvent: false"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-vas-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "application.yml": "spring:\n  datasource:\n    hikari:\n      driver-class-name: org.postgresql.Driver\n      username: ${DB_USERNAME}\n      password: ${DB_PASSWORD}\n      maximum-pool-size: 20\n      connection-timeout: 10000\n      idle-timeout: 30000\n      minimum-idle: 1\n      max-lifetime: 60000\n\n  data:\n    jpa:\n      repositories:\n        enabled: true\n    #mongodb:\n      #database: Reservation\n      #host : 10.3.100.55\n      #port: 27017\n  jmx:\n    enabled: false\n\nhibernate:\n  dialect: org.hibernate.dialect.PostgreSQLDialect\n  format_sql: false\n  show_sql: true\n\nformat:\n  date: yyyy-MM-dd\n  datetime: yyyy-MM-dd'T'HH:mm:ss\n\nhibernateLogLevel: ERROR\nlogLevel: INFO\n\nlog:\n  level:\n    hibernate: INFO\n    service: INFO\n    dbpool: OFF\ntimeout:\n  db:\n    transaction: 10\n    \nmanagement:\n    security:\n        enabled: false\nsecurity:\n    basic:\n        enabled: true\nredis:\n  host:\n    name: 10.98.0.232\n  port: 6379 \n\nkafka:\n bootstrap:\n  servers: 10.98.0.65:9092\n serializer:\n  key: org.apache.kafka.common.serialization.StringSerializer\n  value: org.apache.kafka.common.serialization.StringSerializer\n\n\n\n#tenant:\n  #service:\n        #uri: http://10.8.196.58:8327/tenantmanager-service/componentsettings\n\n#Authentication:\n  #service:\n        #uri: http://10.8.196.42:8308/authentication-service/oauth/token?grant_type=client_credentials\nserver:\n  tomcat:\n   accesslog:\n      directory: ${TOMCAT_LOG_LOCATION}\n      enabled: true\n      rotate: true\n      buffered: true\n      pattern: \"{\\\"Hostname\\\":\\\"%h\\\", \\\"Logical username from identd\\\":\\\"%l\\\", \\\"Remote user\\\":\\\"%u\\\", \\\"Remote IP Address\\\":\\\"%a\\\", \\\"Request protocol\\\":\\\"%H\\\", \\\"Query string\\\":\\\"%q\\\", \\\"First line of Request\\\":\\\"%r\\\", \\\"Date&Time\\\":\\\"%t\\\", \\\"HTTP Status code\\\":\\\"%s\\\", \\\"Current Request Thread Name\\\":\\\"%I\\\",\\\"Bytes Sent\\\":\\\"%b\\\", \\\"Time taken to process the request\\\":\\\"%D\\\", \\\"Local IPAdderss\\\":\\\"%A\\\", \\\"Local port\\\":\\\"%p\\\", \\\"Time taken to Commit the Response\\\":\\\"%F\\\", \\\"Request Method\\\":\\\"%m\\\", \\\" User SessionID\\\":\\\"%S\\\", \\\"Requested URL path\\\":\\\"%U\\\", \\\"Local ServerName\\\":\\\"%v\\\"}\"\n   background-processor-delay: 5\n  compression:\n    enabled: true\n    mime-types:\n    - application/json\n    - application/hal+json\n    - text/html\n    - text/plain\n    \ndaemon:\n service:\n  resvas:\n   isDemoMode: true\n clientId: 2b9a83ed-2a16-41c9-838a-82ca48aff898\n secretId: secret\n   \nsyncgateway:\n  username: vvdevappdocstorenew\n  password: yellow*99\n  multimedia:\n    username: vvdev\n    password: yellow*99\n  \ndaemonrange:\n  isrange: false\n  numberofdaysembark: 5\n  numberofdaysdebark: 2\n   \nurl:\n    path:\n        guest: http://dxpguestservice/guest-service/\n        reporting: http://dxpreportingservice/reporting-service/\n        salesoffer: http://dxpsalesofferservice/salesoffer-service/\n        salesorder: http://dxpsalesorderservice/salesorder-service/\n        vendor: http://dxpvendorservice/vendor-service/\n        recommendations: http://recommendationsapi.getsandbox.com/\n        activityreservation: http://dxpactivityreservationservice/activity-reservation-service/\n        contentmanagement: http://dxpcontentmanagementservice/content-management-service/\n        identityaccessmanagement: http://dxpidentityaccessmanagementservice/identityaccessmanagement-service/\n        guestpreference: http://dxpguestpreferenceservice/guestpreference-service/\n        referencedata: http://dxpreferencedataservice/referencedata-service/\n        teammember: http://dxpteammemberservice/teammember-service/\n        ship: http://dxpshipservice/ship-service/\n        sailorVas: http://dxpsailorservice/sailorvas-service/\n        embarkation: http://dxpembarkationservice/embarkation-service/\n        multimedia: http://dxpmultimediastorageservice/multimediastorage-service/\n        socialnetworking: http://dxpsocialnetworkingservice/socialnetworking-service/\n        personlocation: http://dxppersonlocationservice/personlocation-service/\n        idcrossreference: http://dxpidcrossreferenceservice/idcrossreference-service\n        rule: http://dxpruleservice/rule-service/\n        couchbase: http://10.98.0.85:4984/\n        boarding: http://dxpboardingservice/boarding-service/\n        device: http://dxpdeviceservice/device-service/\n        messaging: http://dxpmessagingservice/messaging-service/\n        embarkationadmin: http://dxpembarkationadminservice/embarkationadmin-service/\n        visitor: http://dxpvisitorservice/visitor-service/\n        multimediaPublicURL: http://vvship.d-aws-vxp.com/svc/multimediastorage-service/\n        cart: http://dxpcartservice/cart-service\n        nclURL : https://qa-api.ncl.com/\n        fidelio: http://167.118.6.146/FCWebServices/FCWebServices.asmx/FidelioSPMSWSJsonPost\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "application-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "ars-doc.yml": "{\n    \"_id\": \"test1\",\n    \"_rev\": \"3-fd98dbf167c1efa1d5abd0818d838539\",\n    \"url\": [\n        {\n            \"path\": \"www.google.com\"\n        },\n        {\n            \"path\": \"www.amazon.com\"\n        }\n    ]\n}"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "ars-doc-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "authentication-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/authentication\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/authentication\nkeystore:\n  password: dxp1234"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "authentication-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "boarding-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/boarding"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "boarding-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "cart-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/cart\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/cart"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "cart-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "central-config-doc.yml": "{\n  \"AppBuckets\": {\n    \"Chat\": {\n      \"Name\": \"dxpawschat\",\n      \"Password\": \"yellow*99\",\n      \"Uid\": \"vvdevappdocstorenew\"\n    },\n    \"Data\": {\n      \"Name\": \"appdocstorenew\",\n      \"Password\": \"yellow*99\",\n      \"Uid\": \"vvdevappdocstorenew\"\n    },\n    \"Logging\": {\n      \"Name\": \"dxplogging\",\n      \"Password\": \"yellow*99\",\n      \"Uid\": \"vvdevappdocstorenew\"\n    }\n  },\n  \"AppChannels\": {\n    \"ACI\": [\n      \"emb_aci_t\",\n      \"Master\"\n    ],\n    \"Airport\": [\n      \"emb_ap_t\",\n      \"Master\"\n    ],\n    \"GangWay\": [\n      \"emb_gw_t\",\n      \"Master\"\n    ],\n    \"Validate\": [\n      \"emb_va_t\",\n      \"Master\"\n    ]\n  },\n  \"AppConfig\": {\n    \"LoggingMode\": true,\n    \"NSDefaultMode\": \"Ship\",\n    \"NearByMode\": true\n  },\n  \"Brands\": [\n    {\n      \"BrandID\": \"CEEE93F2-B284-E611-80C1-00155DF80332\",\n      \"Code\": \"DX\",\n      \"Name\": \"Norwegian Cruise Line\"\n    },\n    {\n      \"BrandID\": \"0B22E08E-E4AF-E611-80C5-00155DF80332\",\n      \"Code\": \"DX1\",\n      \"Name\": \"Decurtis Experience Platform\"\n    }\n  ],\n  \"BuildConfiguration\": {\n    \"ACI\": {\n      \"AppLocalDBName\": \"vvdevembarkation\",\n      \"ZipPostfix\": \"embarkationtext\"\n    },\n    \"Airport\": {\n      \"AppLocalDBName\": \"vvdevembarkation\",\n      \"ZipPostfix\": \"embarkationtext\"\n    },\n    \"GangWay\": {\n      \"AppLocalDBName\": \"vvdevgangway\",\n      \"ZipPostfix\": \"gangwaytext\"\n    },\n    \"Validate\": {\n      \"AppLocalDBName\": \"vvdevembarkation\",\n      \"ZipPostfix\": \"embarkationtext\"\n    }\n  },\n  \"Ships\": [\n    {\n      \"BrandKey\": \"DX\",\n      \"Code\": \"BX\",\n      \"ShipName\": \"Bliss\",\n      \"ShipURLs\": {\n        \"AuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/authenticate\",\n        \"BaseSyncUrl\": \"http://10.98.0.85:4984/\",\n        \"DBZipDownloadURL\": \"http://10.98.0.85:8080/CBLWeb/downloadzip/\",\n        \"MediaItemUrl\": \"https://vv.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\",\n        \"SocialAuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/sociallogin\",\n        \"SsnIds\": [\n          \"DeCurtis\",\n          \"DeCurtis1\"\n        ]\n      }\n    },\n    {\n      \"BrandKey\": \"DX\",\n      \"Code\": \"DX\",\n      \"ShipName\": \"Dream\",\n      \"ShipURLs\": {\n        \"AuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/authenticate\",\n        \"BaseSyncUrl\": \"http://10.98.0.85:4984/\",\n        \"DBZipDownloadURL\": \"http://10.98.0.85:8080/CBLWeb/downloadzip/\",\n        \"MediaItemUrl\": \"https://vv.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\",\n        \"SocialAuthUrl\": \"http://10.98.0.113:31006/embarkation-bff/user/sociallogin\",\n        \"SsnIds\": [\n          \"DeCurtis\",\n          \"DeCurtis1\"\n        ]\n      }\n    }\n  ],\n  \"ShoreURLs\": {\n    \"AuthUrl\": \"https://vv.d-aws-vxp.com/svc/embarkation-bff/user/authenticate\",\n    \"BaseSyncUrl\": \"http://10.3.100.115:4984/\",\n    \"DBZipDownloadURL\": \"http://10.3.100.115:8080/CBLWeb/downloadzip/\",\n    \"MediaItemUrl\": \"https://ncl-shore.decurtiscorp.com/svc/multimediastorage-service/mediaitems/\",\n    \"SocialAuthUrl\": \"https://ncl-shore.decurtiscorp.com/svc/embarkation-bff/user/sociallogin\",\n    \"SsnIds\": [\n      \"DeCurtis\",\n      \"DeCurtis1\"\n    ]\n  },\n  \"_id\": \"CentralConfiguration::8ea12580-8844-4d07-a72d-692b90f0b113\",\n  \"_rev\": \"7-f0ca19b94727720dca450e0039482096\",\n  \"channels\": [\n    \"Master\"\n  ],\n  \"type\": \"CentralConfiguration\"\n}"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "central-config-doc-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "configmap-daemon-service.yml": "app:\n  configMapPath: /etc/couchdb-configs/centralconfig\n\nfile:\n  extension: yml\n\nsync:\n  gateway:\n    url: http://10.98.0.85:4984\n    username: vvdevappdocstorenew\n    password: yellow*99\n\nbucket:\n  name: appdocstorenew\n\nwatch:\n  interval:\n    time: 10000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "configmap-daemon-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "configmap-demon-service.yml": "app:\n  configMapPath: /etc/couchdb-configs/ars,/etc/couchdb-configs/gangway,/etc/couchdb-configs/embarkation\n\nfile:\n  extension: yml\n\nsync:\n  gateway:\n    url: http://10.98.0.85:4984\n    username: NA\n    password: NA\n\nbucket:\n  name: NA\n\nwatch:\n  interval:\n    time: 10000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "configmap-demon-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "content-management-service.yml": "magnoliaBaseURL: http://10.98.0.42:8080/magnoliaPublic/\nmagnoliaAuthKey: c3VwZXJ1c2VyOnN1cGVydXNlcg==\ncmsName: MagnoliaCMS"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "content-management-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "action_file.yml": "---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\n#\n# Also remember that all examples have 'disable_action' set to True.  If you\n# want to use this action as a template, be sure to set this to False after\n# copying it.\nactions:\n  1:\n    action: delete_indices\n    description: \"Clean up ES by deleting old indices\"\n    options:\n      timeout_override:\n      continue_if_exception: False\n      disable_action: False\n    filters:\n    - filtertype: pattern\n      kind: regex\n      value: '^(filebeat|applog-|^metricbeat-|webserverlog-|elblog-).*$'\n    - filtertype: age\n      source: name\n      direction: older\n      timestring: '%Y.%m.%d'\n      unit: days\n      unit_count: 7",
    "config.yml": "---\n# Remember, leave a key empty if there is no value.  None will be a string,\n# not a Python \"NoneType\"\nclient:\n  hosts:\n    - elasticsearch\n  port: 9200\n  url_prefix:\n  use_ssl: False\n  certificate:\n  client_cert:\n  client_key:\n  ssl_no_validate: False\n  http_auth:\n  timeout: 30\n  master_only: False\nlogging:\n  loglevel: INFO\n  logfile:\n  logformat: default\n  blacklist: ['elasticsearch', 'urllib3']"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "curator-config",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "daemon-service.yml": "spring:\n datasource:\n  url: jdbc:postgresql://10.98.0.238:5432/batch_job\n  hikari:\n   jdbc-url: jdbc:postgresql://10.98.0.238:5432/batch_job\n                    \ncouchbase:\n   bucket:\n    ars: appdocstorenew\n    resvas: appdocstorenew/\n    module: sailorframework/\n    oci: appdocstorenew/\n    embarkationadminvas: appdocstorenew/\n    multimedia: multimedia/\n    guestcore: appdocstorenew/\n   shipcode:\n    ars: VC\n\nkafka:\n topic:\n  ncl:\n   ship:\n    fidelio: ars-vas.activity-reservation\n  appointment: ars-vas.activity-reservation\n  resvas: res-vas.voyage-reservation\n  module: devicecontent-core.module\n  oci: embarkation-vas.oci\n  embarkationadminvas: embarkationadmin-vas.gangway\n  guestcore: guest-core.guest\n group: \n  ncl:\n   ship:\n    fidelio: ars-ncl\n  appointment: ars-res0\n  resvas: res-vas\n  module: dev-con\n  oci: oci-embarkation\n  embarkationadminvas: embarkationadmin-vas\n  guestcore: guest-guestcore\n  \ndaemon:\n module:\n  ncl: false  \n\nhibernateLogLevel: INFO"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "daemon-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "device-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/device\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/device"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "device-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "dining-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/dining\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/dining"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "dining-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkation-bff-service.yml": "selfUrl: \"http://vvship.d-aws-vxp.com/svc/embarkation-bff\"\nconsumerAppName: \"embarkation-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\nmultimedia: \"http://vvship.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\ngoogleLoginSourceId: \"a3290d44-785d-11e7-959e-0a1a4261e962\"\nidCrossTeamMemberSourceId: \"29979f56-831e-11e7-a99f-0a1a4261e962\"\nidCrossWearableSourceId: \"15c927d1-e90a-e711-80c9-a06699100836\"\nauthLoginSourceId: \"12c927d1-e90a-e711-80c9-a06699100836\"\nuserTypeId: \"ba0e0fc5-9bf6-4310-b6e4-829fe6b45afb\"\nrequestTimeoutMiliseconds: 5000\ncouchBaseSyncGatewayAdminApi: \"http://10.98.0.85:4985/appdocstorenew/\"\ncouchBaseSyncGatewayUrl: \"10.98.0.85:4984\"\nsessionTimeToLiveSeconds: 604800"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkation-bff-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkation-doc.yml": "{\n    \"_id\": \"test3\",\n    \"_rev\": \"3-6139a5c75907e81acf96ddb020a9c853\",\n    \"url\": [\n        {\n            \"path\": \"www.facebook.com123\"\n        },\n        {\n            \"path\": \"www.amazon.com\"\n        }\n    ]\n}"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkation-doc-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkation-ui-service.yml": ""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkation-ui-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkationadmin-vas-service.yml": "kafka:\n    topic:\n        admin: embarkationadmin-vas.gangway\n    bypass: false\n    \nhttp:\n    connection-pool:\n        configuration:\n              connect-timeout: 20000\n              max-total: 150\n              connection-request-timeout: 20000\n              socket-timeout: 20000\nlogLevel: INFO\nhibernateLogLevel: ERROR\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkationadmin-vas-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "APPLICATION_PROPERTIES_PATH": "/etc/config-server/application.yml",
    "BFF_ACTIVITY_RESERVATION_CREW_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/activity-reservation-crew-ui-service.yml",
    "BFF_ACTIVITY_RESERVATION_CREW_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/activity-reservation-crew-bff-service.yml",
    "BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/activity-reservation-system-ui-service.yml",
    "BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/activity-reservation-system-bff-service.yml",
    "BFF_DEPOSIT_CONSUMER_PROPERTIES_PATH": "/etc/config/ui-applications/deposit-ui-service.yml",
    "BFF_DEPOSIT_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/deposit-bff-service.yml",
    "BFF_EMBARKATION_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/embarkation-bff-service.yml",
    "BFF_MODERATE_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/moderate-online-check-in-ui-service.yml",
    "BFF_MODERATE_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/moderate-online-check-in-bff-service.yml",
    "BFF_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/online-check-in-ui-service.yml",
    "BFF_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/online-check-in-bff-service.yml",
    "BFF_RESERVATION_CONSUMER_PROPERTIES_PATH": "/etc/config/ui-applications/reservation-ui-service.yml",
    "BFF_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/reservation-bff-service.yml",
    "BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/sailor-framework-ui-service.yml",
    "BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/sailor-framework-bff-service.yml",
    "CORE_BOARDING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/boarding-service.yml",
    "CORE_CART_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/cart-service.yml",
    "CORE_CHILDREGISTRATION_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/childregistration-service.yml",
    "CORE_COMPONENTCATALOG_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/componentcatalog-service.yml",
    "CORE_DEAMON_APPDATAPOPULATOR_PROPERTIES_PATH": "/etc/config/core-services/deamon-appdatapopulator-service.yml",
    "CORE_DEVICECONTENT_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/devicecontent-service.yml",
    "CORE_DEVICE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/device-service.yml",
    "CORE_DINING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/dining-service.yml",
    "CORE_EVENTSTORE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/eventstore-service.yml",
    "CORE_FOODNBEVERAGE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/foodnbeverage-service.yml",
    "CORE_GUESTMULTIMEDIA_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guestmultimedia-service.yml",
    "CORE_GUESTPREFERENCE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guestpreference-service.yml",
    "CORE_GUEST_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guest-service.yml",
    "CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/idcrossreference-service.yml",
    "CORE_INCIDENTMANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/incident-service.yml",
    "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/logistics-service.yml",
    "CORE_LUGGAGE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/luggage-service.yml",
    "CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/personlocation-service.yml",
    "CORE_SALESOFFER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/salesoffer-service.yml",
    "CORE_SALESORDER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/salesorder-service.yml",
    "CORE_SHIP_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/ship-service.yml",
    "CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/socialnetworking-service.yml",
    "CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/spring-batchjob-service.yml",
    "CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/teammember-service.yml",
    "CORE_TENANTMANAGER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/tenantmanager-service.yml",
    "CORE_VENDOR_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/vendor-service.yml",
    "CORE_VENUE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/venue-service.yml",
    "CORE_VISITOR_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/visitor-service.yml",
    "CORE_WEARABLE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/wearable-service.yml",
    "DXP_DAEMON_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/daemon-service.yml",
    "INFRA_AUTHENTICATION_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/authentication-service.yml",
    "INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/configmap-daemon-service.yml",
    "INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/content-management-service.yml",
    "INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/identity-access-management-service.yml",
    "INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/imageprocessing-service.yml",
    "INFRA_MESSAGING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/messaging-service.yml",
    "INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/multimediastorage-service.yml",
    "INFRA_OCR_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/ocr-service.yml",
    "INFRA_PAYMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/payment-service.yml",
    "INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/referencedata-service.yml",
    "INFRA_REPORTING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/reporting-service.yml",
    "INFRA_RULES_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/rules-service.yml",
    "INFRA_WORD_PRESS_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/word-press-service.yml",
    "LOG_LOCATION": "/var/log/applogs/",
    "TOMCAT_LOG_LOCATION": "/var/log/tomcatlogs/",
    "VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/activity-reservation-vas-service.yml",
    "VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/embarkationadmin-vas-service.yml",
    "VAS_EMBARKATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/embarkation-vas-service.yml",
    "VAS_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/reservation-service.yml",
    "VAS_SAILOR_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/sailor-vas-service.yml",
    "VAS_SEAWARE_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/seaware-activity-reservation-vas-service.yml"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"APPLICATION_PROPERTIES_PATH\":\"/etc/config-server/application.yml\",\"BFF_ACTIVITY_RESERVATION_CREW_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/activity-reservation-crew-ui-service.yml\",\"BFF_ACTIVITY_RESERVATION_CREW_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/activity-reservation-crew-bff-service.yml\",\"BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/activity-reservation-system-ui-service.yml\",\"BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/activity-reservation-system-bff-service.yml\",\"BFF_DEPOSIT_CONSUMER_PROPERTIES_PATH\":\"/etc/config/ui-applications/deposit-ui-service.yml\",\"BFF_DEPOSIT_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/deposit-bff-service.yml\",\"BFF_EMBARKATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/embarkation-bff-service.yml\",\"BFF_MODERATE_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/moderate-online-check-in-ui-service.yml\",\"BFF_MODERATE_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/moderate-online-check-in-bff-service.yml\",\"BFF_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/online-check-in-ui-service.yml\",\"BFF_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/online-check-in-bff-service.yml\",\"BFF_RESERVATION_CONSUMER_PROPERTIES_PATH\":\"/etc/config/ui-applications/reservation-ui-service.yml\",\"BFF_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/reservation-bff-service.yml\",\"BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/sailor-framework-ui-service.yml\",\"BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/sailor-framework-bff-service.yml\",\"CORE_BOARDING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/boarding-service.yml\",\"CORE_CART_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/cart-service.yml\",\"CORE_CHILDREGISTRATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/childregistration-service.yml\",\"CORE_COMPONENTCATALOG_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/componentcatalog-service.yml\",\"CORE_DEAMON_APPDATAPOPULATOR_PROPERTIES_PATH\":\"/etc/config/core-services/deamon-appdatapopulator-service.yml\",\"CORE_DEVICECONTENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/devicecontent-service.yml\",\"CORE_DEVICE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/device-service.yml\",\"CORE_DINING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/dining-service.yml\",\"CORE_EVENTSTORE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/eventstore-service.yml\",\"CORE_FOODNBEVERAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/foodnbeverage-service.yml\",\"CORE_GUESTMULTIMEDIA_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guestmultimedia-service.yml\",\"CORE_GUESTPREFERENCE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guestpreference-service.yml\",\"CORE_GUEST_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guest-service.yml\",\"CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/idcrossreference-service.yml\",\"CORE_INCIDENTMANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/incident-service.yml\",\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/logistics-service.yml\",\"CORE_LUGGAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/luggage-service.yml\",\"CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/personlocation-service.yml\",\"CORE_SALESOFFER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/salesoffer-service.yml\",\"CORE_SALESORDER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/salesorder-service.yml\",\"CORE_SHIP_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/ship-service.yml\",\"CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/socialnetworking-service.yml\",\"CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/spring-batchjob-service.yml\",\"CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/teammember-service.yml\",\"CORE_TENANTMANAGER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/tenantmanager-service.yml\",\"CORE_VENDOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/vendor-service.yml\",\"CORE_VENUE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/venue-service.yml\",\"CORE_VISITOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/visitor-service.yml\",\"CORE_WEARABLE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/wearable-service.yml\",\"DXP_DAEMON_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/daemon-service.yml\",\"INFRA_AUTHENTICATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/authentication-service.yml\",\"INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/configmap-daemon-service.yml\",\"INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/content-management-service.yml\",\"INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/identity-access-management-service.yml\",\"INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/imageprocessing-service.yml\",\"INFRA_MESSAGING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/messaging-service.yml\",\"INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/multimediastorage-service.yml\",\"INFRA_OCR_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/ocr-service.yml\",\"INFRA_PAYMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/payment-service.yml\",\"INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/referencedata-service.yml\",\"INFRA_REPORTING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/reporting-service.yml\",\"INFRA_RULES_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/rules-service.yml\",\"INFRA_WORD_PRESS_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/word-press-service.yml\",\"LOG_LOCATION\":\"/var/log/applogs/\",\"TOMCAT_LOG_LOCATION\":\"/var/log/tomcatlogs/\",\"VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/activity-reservation-vas-service.yml\",\"VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/embarkationadmin-vas-service.yml\",\"VAS_EMBARKATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/embarkation-vas-service.yml\",\"VAS_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/reservation-service.yml\",\"VAS_SAILOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/sailor-vas-service.yml\",\"VAS_SEAWARE_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/seaware-activity-reservation-vas-service.yml\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"environment-configmap\",\"namespace\":\"dev\"}}\n"
    },
    "name": "environment-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "LOGSTASH_HOSTS": "10.98.0.39:5044"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"LOGSTASH_HOSTS\":\"10.98.0.39:5044\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"environment-variables\",\"namespace\":\"dev\"}}\n"
    },
    "name": "environment-variables",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "filebeat.yml": "###################### Filebeat Configuration Example #########################\n\n# This file is an example configuration file highlighting only the most common\n# options. The filebeat.full.yml file from the same directory contains all the\n# supported options with more comments. You can use it as a reference.\n#\n# You can find the full configuration reference here:\n# https://www.elastic.co/guide/en/beats/filebeat/index.html\n\n#=========================== Filebeat prospectors =============================\n\nfilebeat.prospectors:\n\n# Each - is a prospector. Most options can be set at the prospector level, so\n# you can use different prospectors for various configurations.\n# Below are the prospector specific configurations.\n- input_type: log \n\n  paths:\n    - /var/log/tomcatlogs/*/*.log\n  tags: [\"tomcat-log\"]\n  \n- input_type: log\n\n  paths:\n    - /var/log/applogs/**/*.log\n  tags: [\"webapp-log\"]\n\n\n    #- c:\\programdata\\elasticsearch\\logs\\*\n\n  # Exclude lines. A list of regular expressions to match. It drops the lines that are\n  # matching any regular expression from the list.\n  #exclude_lines: [\"^DBG\"]\n\n  # Include lines. A list of regular expressions to match. It exports the lines that are\n  # matching any regular expression from the list.\n  #include_lines: [\"^ERR\", \"^WARN\"]\n\n  # Exclude files. A list of regular expressions to match. Filebeat drops the files that\n  # are matching any regular expression from the list. By default, no files are dropped.\n  #exclude_files: [\".gz$\"]\n\n  # Optional additional fields. These field can be freely picked\n  # to add additional information to the crawled log files for filtering\n  #fields:\n  #  level: debug\n  #  review: 1\n\n  ### Multiline options\n\n  # Mutiline can be used for log messages spanning multiple lines. This is common\n  # for Java Stack Traces or C-Line Continuation\n\n  # The regexp Pattern that has to be matched. The example pattern matches all lines starting with [\n  multiline.pattern: '^\\{'\n\n  # Defines if the pattern set under pattern should be negated or not. Default is false.\n  multiline.negate: true\n\n  # Match can be set to \"after\" or \"before\". It is used to define if lines should be append to a pattern\n  # that was (not) matched before or after or as long as a pattern is not matched based on negate.\n  # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash\n  multiline.match: after\n  multiline.max_lines: 500\n\n#================================ General =====================================\n\n# The name of the shipper that publishes the network data. It can be used to group\n# all the transactions sent by a single shipper in the web interface.\n#name:\n\n# The tags of the shipper are included in their own field with each\n# transaction published.\n#tags: [\"service-X\", \"web-tier\"]\n\n# Optional fields that you can specify to add additional information to the\n# output.\n#fields:\n#  env: staging\n\n#================================ Outputs =====================================\n\n# Configure what outputs to use when sending the data collected by the beat.\n# Multiple outputs may be used.\n\n#-------------------------- Elasticsearch output ------------------------------\n#output.elasticsearch:\n  # Array of hosts to connect to.\n  #hosts: [\"localhost:9200\"]\n\n  # Optional protocol and basic auth credentials.\n  #protocol: \"https\"\n  #username: \"elastic\"\n  #password: \"changeme\"\n\n#----------------------------- Logstash output --------------------------------\noutput.logstash:\n  # The Logstash hosts\n hosts: ${LOGSTASH_HOSTS}\n\n  # Optional SSL. By default is off.\n  # List of root certificates for HTTPS server verifications\n  #ssl.certificate_authorities: [\"/etc/pki/root/ca.pem\"]\n\n  # Certificate for SSL client authentication\n  #ssl.certificate: \"/etc/pki/client/cert.pem\"\n\n  # Client Certificate Key\n  #ssl.key: \"/etc/pki/client/cert.key\"\n\n#================================ Logging =====================================\n\n# Sets log level. The default log level is info.\n# Available log levels are: critical, error, warning, info, debug\nlogging.level: debug\nlogging.to_files: true\nlogging.to_syslog: false\nlogging.files:\n  path: /var/log/filebeat\n  name: Filebeat.log\n  keepfiles: 7\n#logging.selectors: [\"*\"]"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "filebeat-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "gangway-doc.yml": "{\n    \"_id\": \"test2\",\n    \"_rev\": \"3-ca77e8b9d71fb22deb6bbf0804f59e1f\",\n    \"url\": [\n        {\n            \"path\": \"www.google.com\"\n        },\n        {\n            \"path\": \"www.amazon.com\"\n        }\n    ]\n}"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "gangway-doc-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "guest-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/guest\nservice:\n  component:\n      settingId: 3b51a112-b4ac-452c-bc7f-0cbd644f4ae8\n      clientId: 4b805361-ff06-425b-81e3-cf66a6edfd6f \n      adapteeName: VXP\n      secretId: secret"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "guest-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "guestpreference-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/guestpreference"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "guestpreference-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "idcrossreference-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/idcrossreference\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/idcrossreference"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "idcrossreference-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "identity-access-management-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/identityaccessmanagement\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/identityaccessmanagement\nkeystore:\n  password: ${DXPKEYSTORE_VALUE}\nservice: DXP"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "identity-access-management-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "imageprocessing-service.yml": "app:\n name: imageprocessing\n imageFormat: jpg\n autheticationServiceURL: http://dxpidentityaccessmanagementservice/identityaccessmanagement-service/oauth/token?grant_type=client_credentials\n multimediaStorageServiceURL: http://dxpmultimediastorageservice/multimediastorage-service/\n clientToken: ${BASICTOKEN}\n bootstrapServers: 10.98.0.65:9092\n enableAutoCommit: true\n isolationLevel: read_committed\n keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer\n autoOffsetReset: latest\n \n bootstrapserversKey: bootstrap.servers\n KeyDeserializerKey: key.deserializer\n ValueDeserializerKey: value.deserializer\n ValueDeserializerValueKey: org.apache.kafka.common.serialization.StringDeserializer\n KeyDeserializerValueKey: org.apache.kafka.common.serialization.StringDeserializer\n IsolationLevelKey: isolation.level\n EnableAutoCommitKey: enable.auto.commit\n GroupIDKey: group.id\n AutoOffsetResetKey: auto.offset.reset\n\n groupId: 4779df07-c991-4b12-992d-aa8e593ad76f\n topicName: infra.multimediastorage\n awsAccessKey: ${S3BUCKET_ACCESSKEYID}\n awsAccessKeyValue: ${S3BUCKET_ACCESSKEY}\n awsBucketName: vv-multimedia-dev\n\nsmb:\n  username: ${FILESTORAGEUSER}\n  password: ${FILESTORAGEPASSWORD}\n\nitems:\n objectStorageURL: http://10.98.0.201:9000\n storagelocation: AWS\n\nlogLevel: INFO\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "imageprocessing-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "kibana.yml": "# Kibana is served by a back end server. This setting specifies the port to use.\n#server.port: 5601\n\n# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n# The default is 'localhost', which usually means remote machines will not be able to connect.\n# To allow connections from remote users, set this parameter to a non-loopback address.\nserver.host: '0.0.0.0'\n\n# Enables you to specify a path to mount Kibana at if you are running behind a proxy. This only affects\n# the URLs generated by Kibana, your proxy is expected to remove the basePath value before forwarding requests\n# to Kibana. This setting cannot end in a slash.\n#server.basePath: \"\"\n\n# The maximum payload size in bytes for incoming server requests.\n#server.maxPayloadBytes: 1048576\n\n# The Kibana server's name.  This is used for display purposes.\n#server.name: \"your-hostname\"\n#elastalert.serverHost: localhost\n# The URL of the Elasticsearch instance to use for all your queries.\nelasticsearch.url: 'http://elasticsearch'\n\n# When this setting's value is true Kibana uses the hostname specified in the server.host\n# setting. When the value of this setting is false, Kibana uses the hostname of the host\n# that connects to this Kibana instance.\n#elasticsearch.preserveHost: true\n\n# Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n# dashboards. Kibana creates a new index if the index doesn't already exist.\n#kibana.index: \".kibana\"\n\n# The default application to load.\n#kibana.defaultAppId: \"discover\"\n\n# If your Elasticsearch is protected with basic authentication, these settings provide\n# the username and password that the Kibana server uses to perform maintenance on the Kibana\n# index at startup. Your Kibana users still need to authenticate with Elasticsearch, which\n# is proxied through the Kibana server.\n#elasticsearch.username: \"user\"\n#elasticsearch.password: \"pass\"\n\n# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.\n# These settings enable SSL for outgoing requests from the Kibana server to the browser.\n#server.ssl.enabled: false\n#server.ssl.certificate: /path/to/your/server.crt\n#server.ssl.key: /path/to/your/server.key\n\n# Optional settings that provide the paths to the PEM-format SSL certificate and key files.\n# These files validate that your Elasticsearch backend uses the same key files.\n#elasticsearch.ssl.certificate: /path/to/your/client.crt\n#elasticsearch.ssl.key: /path/to/your/client.key\n\n# Optional setting that enables you to specify a path to the PEM file for the certificate\n# authority for your Elasticsearch instance.\n#elasticsearch.ssl.certificateAuthorities: [ \"/path/to/your/CA.pem\" ]\n\n# To disregard the validity of SSL certificates, change this setting's value to 'none'.\n#elasticsearch.ssl.verificationMode: full\n\n# Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of\n# the elasticsearch.requestTimeout setting.\n#elasticsearch.pingTimeout: 1500\n\n# Time in milliseconds to wait for responses from the back end or Elasticsearch. This value\n# must be a positive integer.\n#elasticsearch.requestTimeout: 30000\n\n# List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side\n# headers, set this value to [] (an empty list).\n#elasticsearch.requestHeadersWhitelist: [ authorization ]\n\n# Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten\n# by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.\n#elasticsearch.customHeaders: {}\n\n# Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.\n#elasticsearch.shardTimeout: 0\n\n# Time in milliseconds to wait for Elasticsearch at Kibana startup before retrying.\n#elasticsearch.startupTimeout: 5000\n\n# Specifies the path where Kibana creates the process ID file.\n#pid.file: /var/run/kibana.pid\n\n# Enables you specify a file where Kibana stores log output.\n#logging.dest: stdout\n\n# Set the value of this setting to true to suppress all logging output.\n#logging.silent: false\n\n# Set the value of this setting to true to suppress all logging output other than error messages.\n#logging.quiet: false\n\n# Set the value of this setting to true to log all events, including system usage information\n# and all requests.\n#logging.verbose: false\n\n# Set the interval in milliseconds to sample system and process performance\n# metrics. Minimum is 100ms. Defaults to 5000.\n#ops.interval: 5000\n\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "kibana-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "logistics-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/logistics\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/logistics"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "logistics-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "logstash.conf": "input {\n beats {\n    port => 5044   \t\n  }\nkafka {\n    bootstrap_servers => \"10.98.0.65:9092\"\n    topics => [\"mobile-app-log\"]\n  }\n}\n\nfilter {\n\n if \"webapp-log\" in [tags]  \n {\n   json {\n     \tsource => \"message\"\n     }\n\n  mutate {\n    convert => { \"[traceinfo][duration]\" => \"integer\" }\n  }\n\n  mutate {\n       remove_field => [\"[beat][hostname]\",\"host\",\"hostname\",\"msg\",\"input_type\",\"level\",\"name\",\"pid\",\"[src][file]\",\"[src][func]\",\"[src][line]\",\"time\",\"v\",\"n\",\"t\",\"l\",\"m\"]\n    }\n \n    mutate {\n         rename => { \"offset\" => \"dateOffset\" }\n         rename => { \"timestamp\" => \"timeStamp\" }\n    }\n }\n else if \"tomcat-log\" in [tags]\n  {\n   json {\n\tsource => \"message\"\n     }\n    mutate {\n       remove_field => [\"[beat][hostname]\",\"host\"]\n    }\n}\n\n else\n {\n    json {\n\tsource => \"message\"\n\ttarget => \"parsedmain\"\n     }\n\n    json {\n        source => [\"[parsedmain][payload][content]\"]\n        target => \"parsedcontent\"\n        add_tag => [ \"mobileapp-logs\" ]\n     }\n   \n    mutate {\n          remove_field => [\"[parsedmain][payload][bySeqno]\",\"[parsedmain][payload][cas]\",\"[parsedmain][payload][content]\",\"[parsedmain][payload][event]\",\"[parsedmain][payload][expiration]\",\"[parsedmain][payload][flags]\",\"[parsedmain][payload][key]\",\"[parsedmain][payload][lockTime]\",\"[parsedmain][payload][partition]\",\"[parsedmain][payload][revSeqno]\",\"[parsedmain][schema][fields]\",\"[parsedmain][schema][name]\",\"[parsedmain][schema][optional]\",\"[parsedmain][schema][type]\",\"[parsedcontent][_sync][history][channels]\",\"[parsedcontent][_sync][history][parents]\",\"[parsedcontent][_sync][history][revs]\",\"[parsedcontent][_sync][recent_sequences]\",\"[parsedcontent][_sync][rev]\",\"[parsedcontent][_sync][sequence]\",\"[parsedcontent][_sync][time_saved]\",\"[parsedcontent][userinfo][token]\",\"[parsedcontent][created_at]\",\"[parsedcontent][_rev]\",\"[parsedcontent][lastSequence]\"]\n     }\n\n    mutate {\n         rename => { \"[parsedcontent][componentName]\" => \"componentName\" }\n         rename => { \"[parsedcontent][componentVersion]\" => \"componentVersion\" }\n         rename => { \"[parsedcontent][correlationId]\" => \"correlationId\" }\n         rename => { \"[parsedcontent][hostName]\" => \"hostName\" }\n         rename => { \"[parsedcontent][message]\" => \"message\" }\n         rename => { \"[parsedcontent][messageCode]\" => \"messageCode\" }\n         rename => { \"[parsedcontent][messageDetail]\" => \"messageDetail\" }\n         rename => { \"[parsedcontent][severity]\" => \"severity\" }\n         rename => { \"[parsedcontent][stacktrace]\" => \"stackTrace\" }\n         rename => { \"[parsedcontent][stackTrace]\" => \"stackTrace\" }\n         rename => { \"[parsedcontent][timeStamp]\" => \"timeStamp\" }\n         rename => { \"[parsedcontent][timestamp]\" => \"timeStamp\" }\n         rename => { \"[parsedcontent][type]\" => \"type\" }\n         rename => { \"[parsedcontent][deviceInfo][id]\" => \"[deviceInfo][id]\" }\n         rename => { \"[parsedcontent][deviceInfo][name]\" => \"[deviceInfo][name]\" }\n         rename => { \"[parsedcontent][deviceInfo][operatingSystem]\" => \"[deviceInfo][operatingSystem]\" }\n         rename => { \"[parsedcontent][deviceInfo][osVersion]\" => \"[deviceInfo][osVersion]\" }\n         rename => { \"[parsedcontent][deviceInfo][type]\" => \"[deviceInfo][type]\" }\n         rename => { \"[parsedcontent][traceInfo][loggingPoint]\" => \"[traceInfo][loggingPoint]\" }\n         rename => { \"[parsedcontent][traceInfo][duration]\" => \"[traceInfo][duration]\" }\n         rename => { \"[parsedcontent][traceInfo][methodTime]\" => \"[traceInfo][methodTime]\" }\n         rename => { \"[parsedcontent][traceInfo][callerInfo][class]\" => \"[traceInfo][callerInfo][class]\" }\n         rename => { \"[parsedcontent][traceInfo][callerInfo][name]\" => \"[traceInfo][callerInfo][name]\" }\n         rename => { \"[parsedcontent][traceInfo][callerInfo][method]\" => \"[traceInfo][callerInfo][method]\" }\n         rename => { \"[parsedcontent][traceInfo][sourceInfo][class]\" => \"[traceInfo][sourceInfo][class]\" }\n         rename => { \"[parsedcontent][traceInfo][sourceInfo][method]\" => \"[traceInfo][sourceInfo][method]\" }\n         rename => { \"[parsedcontent][traceInfo][methodTime]\" => \"[traceInfo][methodTime]\" }\n         rename => { \"[parsedcontent][userInfo][id]\" => \"[userInfo][id]\" }\n         rename => { \"[parsedcontent][userInfo][deviceId]\" => \"[userInfo][deviceId]\" } \n         rename => { \"[parsedcontent][userInfo][appId]\" => \"[userInfo][appId]\" }\n         rename => { \"[parsedcontent][userInfo][type]\" => \"[userInfo][type]\" }\n         rename => { \"[parsedcontent][offset]\" => \"dateOffset\" }\n\n      }\n   }\n}\n\noutput {\n  if \"tomcat-log\" in [tags]\n  {\n    elasticsearch {\n       hosts => \"elasticsearch\"\n      manage_template => false\n       index => \"webserverlog-%{+YYYY.MM.dd}\"\n       document_type => \"%{[@metadata][type]}\"\n   }\n  }\n  else\n  {\n    elasticsearch {\n       hosts => \"elasticsearch\"\n       manage_template => false\n       index => \"applog-%{+YYYY.MM.dd}\"\n       document_type => \"%{[@metadata][type]}\"\n   }\n  }\n}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "logstash-conf-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "log4j2.properties": "status = error\nname = LogstashPropertiesConfig\n\nappender.rolling.type = RollingFile\nappender.rolling.name = plain_rolling\nappender.rolling.fileName = ${sys:ls.logs}/logstash-${sys:ls.log.format}.log\nappender.rolling.filePattern = ${sys:ls.logs}/logstash-${sys:ls.log.format}-%d{yyyy-MM-dd}.log\nappender.rolling.policies.type = Policies\nappender.rolling.policies.time.type = TimeBasedTriggeringPolicy\nappender.rolling.policies.time.interval = 1\nappender.rolling.policies.time.modulate = true\nappender.rolling.layout.type = PatternLayout\nappender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %-.10000m%n\n\nappender.json_rolling.type = RollingFile\nappender.json_rolling.name = json_rolling\nappender.json_rolling.fileName = ${sys:ls.logs}/logstash-${sys:ls.log.format}.log\nappender.json_rolling.filePattern = ${sys:ls.logs}/logstash-${sys:ls.log.format}-%d{yyyy-MM-dd}.log\nappender.json_rolling.policies.type = Policies\nappender.json_rolling.policies.time.type = TimeBasedTriggeringPolicy\nappender.json_rolling.policies.time.interval = 1\nappender.json_rolling.policies.time.modulate = true\nappender.json_rolling.layout.type = JSONLayout\nappender.json_rolling.layout.compact = true\nappender.json_rolling.layout.eventEol = true\n\nrootLogger.level = ${sys:ls.log.level}\nrootLogger.appenderRef.rolling.ref = ${sys:ls.log.format}_rolling\n",
    "logstash.yml": "# Settings file in YAML\n#\n# Settings can be specified either in hierarchical form, e.g.:\n#\n#   pipeline:\n#     batch:\n#       size: 125\n#       delay: 5\n#\n# Or as flat keys:\n#\n#   pipeline.batch.size: 125\n#   pipeline.batch.delay: 5\n#\n# ------------  Node identity ------------\n#\n# Use a descriptive name for the node:\n#\n# node.name: test\n#\n# If omitted the node name will default to the machine's host name\n#\n# ------------ Data path ------------------\n#\n# Which directory should be used by logstash and its plugins\n# for any persistent needs. Defaults to LOGSTASH_HOME/data\n#\npath.data: /var/lib/logstash\n#\n# ------------ Pipeline Settings --------------\n#\n# Set the number of workers that will, in parallel, execute the filters+outputs\n# stage of the pipeline.\n#\n# This defaults to the number of the host's CPU cores.\n#\n# pipeline.workers: 2\n#\n# How many workers should be used per output plugin instance\n#\n# pipeline.output.workers: 1\n#\n# How many events to retrieve from inputs before sending to filters+workers\n#\n# pipeline.batch.size: 125\n#\n# How long to wait before dispatching an undersized batch to filters+workers\n# Value is in milliseconds.\n#\n# pipeline.batch.delay: 5\n#\n# Force Logstash to exit during shutdown even if there are still inflight\n# events in memory. By default, logstash will refuse to quit until all\n# received events have been pushed to the outputs.\n#\n# WARNING: enabling this can lead to data loss during shutdown\n#\n# pipeline.unsafe_shutdown: false\n#\n# ------------ Pipeline Configuration Settings --------------\n#\n# Where to fetch the pipeline configuration for the main pipeline\n#\npath.config: /etc/logstash/conf.d\n#\n# Pipeline configuration string for the main pipeline\n#\n# config.string:\n#\n# At startup, test if the configuration is valid and exit (dry run)\n#\n# config.test_and_exit: false\n#\n# Periodically check if the configuration has changed and reload the pipeline\n# This can also be triggered manually through the SIGHUP signal\n#\n# config.reload.automatic: false\n#\n# How often to check if the pipeline configuration has changed (in seconds)\n#\n# config.reload.interval: 3\n#\n# Show fully compiled configuration as debug log message\n# NOTE: --log.level must be 'debug'\n#\nconfig.debug: true\n#\n# ------------ Queuing Settings --------------\n#\n# Internal queuing model, \"memory\" for legacy in-memory based queuing and\n# \"persisted\" for disk-based acked queueing. Defaults is memory\n#\n# queue.type: memory\n#\n# If using queue.type: persisted, the directory path where the data files will be stored.\n# Default is path.data/queue\n#\n# path.queue:\n#\n# If using queue.type: persisted, the page data files size. The queue data consists of\n# append-only data files separated into pages. Default is 250mb\n#\n# queue.page_capacity: 250mb\n#\n# If using queue.type: persisted, the maximum number of unread events in the queue.\n# Default is 0 (unlimited)\n#\n# queue.max_events: 0\n#\n# If using queue.type: persisted, the total capacity of the queue in number of bytes.\n# If you would like more unacked events to be buffered in Logstash, you can increase the\n# capacity using this setting. Please make sure your disk drive has capacity greater than\n# the size specified here. If both max_bytes and max_events are specified, Logstash will pick\n# whichever criteria is reached first\n# Default is 1024mb or 1gb\n#\n# queue.max_bytes: 1024mb\n#\n# If using queue.type: persisted, the maximum number of acked events before forcing a checkpoint\n# Default is 1024, 0 for unlimited\n#\n# queue.checkpoint.acks: 1024\n#\n# If using queue.type: persisted, the maximum number of written events before forcing a checkpoint\n# Default is 1024, 0 for unlimited\n#\n# queue.checkpoint.writes: 1024\n#\n# If using queue.type: persisted, the interval in milliseconds when a checkpoint is forced on the head page\n# Default is 1000, 0 for no periodic checkpoint.\n#\n# queue.checkpoint.interval: 1000\n#\n# ------------ Metrics Settings --------------\n#\n# Bind address for the metrics REST endpoint\n#\n# http.host: \"127.0.0.1\"\n#\n# Bind port for the metrics REST endpoint, this option also accept a range\n# (9600-9700) and logstash will pick up the first available ports.\n#\n# http.port: 9600-9700\n#\n# ------------ Debugging Settings --------------\n#\n# Options for log.level:\n#   * fatal\n#   * error\n#   * warn\n#   * info (default)\n#   * debug\n#   * trace\n#\nlog.level: debug\npath.logs: /var/log/logstash\n#\n# ------------ Other Settings --------------\n#\n# Where to find custom plugins\n# path.plugins: []\n\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "logstash-properties-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "messaging-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/messaging\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/messaging\n \n  velocity:\n   resourceLoaderPath: classpath:/templates/\n   suffix: .vm\n   cache: false\n   check-template-location: true\n   content-type: text/html\n   charset: UTF-8\n   properties:\n    input:\n     encoding: UTF-8\n    output: \n     encoding: UTF-8\n  mail:\n   host: smtp.office365.com\n   port: 587\n   username: alert@decurtis.com\n   password: BnVt0#123\n   protocol: smtp\n   jndi-name: java:comp/env/mail/Session\n   properties:\n    mail:\n     smtp:\n      auth: false\n      starttls: \n       enable: true\n \napp:\n name: messagingservice\n imageFormat: jpg\n autheticationServiceURL: http://10.3.100.45:31362/identityaccessmanagement-service/oauth/token?grant_type=client_credentials\n multimediaStorageServiceURL: https://vv.d-aws-vxp.com/svc/multimediastorage-service/mediaitems/\n clientToken: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55aWQiOiJiMzVhMzI1YS0wMzZhLTRhZDQtODgzNi02NDY5MjNlNjAxZGUiLCJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJleHAiOjE1MDc5OTEwNzgsImF1dGhvcml0aWVzIjpbIlJPTEVfVFJVU1RFRF9DTElFTlQiXSwianRpIjoiMDM4N2ZjZTQtNjcyYi00YzllLWE0NGUtYzhhN2JhOTQ1MjFkIiwiY2xpZW50X2lkIjoiNDllMTQ2NzEtMzJkMy00MWU4LWI1NzktZDc0N2I1NGZmZDIzIn0.vzrZYrteiZXoc49opstVxcAPxmUV0aPlp8d8fyzi87YfzjXnW4iVLKi8hsDREgVsWRfJpv-VFuHuGJgLCeOh3Q3pPBLpNfEkgUtB7qS-dbbLrkGR4ysa0N4gBSWt93btP-B3Y0xMgPCUcj9hDFbBSkIr3gasm8wOGt7NN0uycfQDScgI4TK4ZQr9QSwK-hEHh0bHM8Z4NyO7tHHB5EaakCuJlHsFtiwTcsZxUgFfZVuCRIK-rUCnV3FK6JVZ1DkZmYpgujctgRqKYbTRhN3GCHkcgTcWCSi9w4WdHaZUyJcJs0C4um9MBPZcEHIjRLeqdh94fPdKmzWF8xBq_Ox0mg\n contentType: application/json\n contentTypeValue: application/json\n bootstrapServers: 10.3.100.196:9092\n enableAutoCommit: true\n autoCommitIntervalMs: 1000\n sessionTimeoutMs: 50000\n isolationLevel: read_committed\n keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer\n autoOffsetReset: nearest\n choice: consumer\n kafkaURL: 10.3.100.196:9092\n groupId: core-messaging-kafka-group\n topicName: infra.messaging\n awsAccessKey: AKIAJTN5PXRRW7WIFMGQ\n awsAccessKeyValue: onxfLy7QR2GQti58SoHLqsmebuWTWpV18iO0H2Q+\n awsBucketName: vv-multimedia-dev\n pollingIntervalMs: 200\n "
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "messaging-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "multimediastorage-service.yml": "spring:\n  datasource:\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/multimediastorage\nazureblob:\n  storageconnectionstring: DefaultEndpointsProtocol=https;AccountName=imagingmediastorageblob;AccountKey=5blr7n4wo7LSwV47BXU3hjf01dPObnJeuvmGhh18ZZ70PFsFB+xx+NPxOjewO4uyXQfo5REyOJyFOKrRgIDMyg==\n  isblobstorage: true\n  container: multimediastoragecontainer\n\nsmb:\n  username: ${FILESTORAGEUSER}\n  password: ${FILESTORAGEPASSWORD}\n\nmultipart:\n  maxfilesize: 50MB\n  maxrequestsize: 50MB\n\nkafka:\n  topicName: infra.multimediastorage\n  isKafkaEnabled: true\n  \nconfigurationsetting:\n  uploadlimit: 5000000000\n  uploadlimittime: 60\n\nAWS:\n objectStorageURL: http://10.98.0.201:9000\n storagelocation: Minio\n S3BucketAccessKeyId: ${S3BUCKET_ACCESSKEYID}\n S3BucketAccessKey: ${S3BUCKET_ACCESSKEY}\n bucketname: vv-multimedia-dev"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "multimediastorage-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "personlocation-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/personlocation\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/personlocation"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "personlocation-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "referencedata-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/referencedata\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/referencedata"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "referencedata-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "reporting-service.yml": "spring:\n  couchbase:\n           bootstrap-hosts: 10.98.0.146\n           bucket:\n                 name: reporting\n                 password: yellow*99\n           env:\n              timeouts:\n                      connect: 60000\n                      socket-connect: 60000\n                      autoreleaseAfter: 20000\nlogLevel: ERROR\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "reporting-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-framework-bff-service.yml": "selfUrl: \"http://vvship.d-aws-vxp.com/svc/sailor-framework-bff/\"\nrecommendations: \"http://recommendationsapi.getsandbox.com/\"\nsecurityPhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nprofilePhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\ndocumentMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nconsumerAppName: \"online-check-in-ui\"\nenableLogSrcFlag: \"true\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"http://vvship.d-aws-vxp.com/svc/multimediastorage-service/\"\nociModuleCode: 'OCI'\narsModuleCode: 'EXR'\ndaysToEnableOnlineCheckin: \"400\"\nsailorTypeId: '488c68c4-e80a-e711-80c9-a06699100836'\nfacebookSourceId: '11c927d1-e90a-e711-80c9-a06699100836'\niamSourceId: '12c927d1-e90a-e711-80c9-a06699100836'\nuserType: 'Guest'\nseawareSourceId: '14c927d1-e90a-e711-80c9-a06699100836'\nguestIdMapping: {\"551\":\"101\",\"550\": \"99\",\"557\":\"98\",\"556\":\"108\"}\nrequestTimeoutMiliseconds: 20000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-framework-bff-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-framework-ui-service.yml": "badWords: test,test1\nmaxLoginBeaconRange: 0.5\nnearestBeaconRange: 2\nnearerBeaconRange: 5\nnearBeaconRange: 8\nminBirthYears: 16\nbffBaseUrl: \"http://10.98.0.113:31014/sailor-framework-bff/\"\ndefaultTimeout: 9000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-framework-ui-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-vas-service.yml": "logLevel: ERROR\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-vas-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "salesoffer-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/salesoffer\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/salesoffer"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "salesoffer-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "salesorder-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/salesorder\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/salesorder"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "salesorder-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "ship-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/ship\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/ship\n      \nvoyage:\n  serviceImpl: DXP\n  shipCode: VC\n  serverUrl: https://ship.com/cruiseservice\n  xmlns: http://shipapi/schemas\n  primaryLangId: en-us\n  altLangId: en-us\n  sequenceNumber: 1\n  version: 2.1\n  timeStamp: 2014-07-17T14:18:38.370-05:00\n  echoToken: String\n  booking:\n    type: 1\n    code: DXP\n    codeContext: IATA\n  requestorId: 604615\n  requestorType: 5\n  requestor:\n    code: DXP\n    codeContext: DXP\n    \nkafka:      \n  app:\n    topicName: core.ship"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "ship-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "socialnetworking-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/socialnetworking\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/socialnetworking"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "socialnetworking-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "spring-batchjob-service.yml": "spring:\n datasource:\n  url: jdbc:postgresql://10.98.0.238:5432/batch_job\n  hikari:\n   jdbc-url: jdbc:postgresql://10.98.0.238:5432/batch_job\n   username: shipdpguser\n   password: yellow*99\n\n batch:\n  job:\n   enabled: false\n\nbatch:\n jobs:\n  isEnable:\n   fidelio-crew: false\n   fidelio-guest: false\n   release-inventory-job: true\n  cron:\n   fidelio-crew: 0 0/1 * * * ?\n   fidelio-guest: 0 0/1 * * * ?\n   release-inventory-job: 0 0/1 * * * ?\n clientId: 2b9a83ed-2a16-41c9-838a-82ca48aff898\n secretId: secret\n\nhibernateLogLevel: INFO\n\nfidelio:\n username: DeCurtis\n password: Fidelio123\n retryattempt: 3"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "spring-batchjob-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "talendalerting.properties": "#this is context properties\n#Tue Dec 19 14:08:15 IST 2017\nGToGALastSequenceJSON={\"_id\"\\: \"_local/GToGALastSequence\",\"_rev\"\\: \"<LAST_REV>\",\"channels\"\\: [\"GToGALastSequence\"],\"alertLastSequence\"\\: <AlertLAST_SEQ>,\"messageLastSequence\"\\: <MessageLAST_SEQ>,\"type\"\\: \"GToGALastSequence\"}\nlastrevnumber=a\nAlertlatestsequence=b\nAlertprevsequencenumber=c\nSyncGatewayUrl=http\\://10.3.100.115\\:4984/\nSyncGatewayUsername=vvdevappdocstorenew\nSyncGatewayPassword=yellow*99\nCouchbaseBucketName=appdocstorenew\nLimit=0\nFilter=sync_gateway/bychannel\nChannels=GuestPersonAlert,VisitorPersonAlert,TeamMemberPersonAlert\nFeed=normal\nTimeout=300000\nRestApiUrl=http\\://vvship.d-aws-vxp.com/svc/messaging-service/alerts/\nEnvironmentName=VV-Dev-SHIP\nRestApiAutorizationToken=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55aWQiOiJiMzVhMzI1YS0wMzZhLTRhZDQtODgzNi02NDY5MjNlNjAxZGUiLCJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJleHAiOjE1MTU5MzA4MzQsImF1dGhvcml0aWVzIjpbIlJPTEVfVFJVU1RFRF9DTElFTlQiXSwianRpIjoiOTUxMTEyYTQtOWFkMi00MGJhLTk4ZTEtMmRjMzFkYjA3ZWQ0IiwiY2xpZW50X2lkIjoiNDllMTQ2NzEtMzJkMy00MWU4LWI1NzktZDc0N2I1NGZmZDIzIn0.lptUyHLIak2h7Fg8yGWJOPLZx9fWMThDpduMCRMgXJXr8U9fRVqqd4J-EOI8hN3GMPIsxhMbrzfbNlmNiGRXrg9McKXy9dF7m3yG8v2nwBBjugNiZ7GrHenwUwHvwIM0aLZPiIfcW9YBpF8HA3vInLjQ4Cf-s27YbscqeCkhrSA2x37QCW_BrML9XRfTjjM5SuL9ioufA1ybTidq_1WSd0OKN81SG7fSit57EdbCfTQSibIHv8GX8DL0nC6laKEXL7Toa755Pp1NUgCcHk5wjFYSd31Qtk-SH6qjuc_uFPWYkIH5iuf6V-QiwYyLwmTWFN2LqRCNs8-Z9ELUsjkIHA\nMessagelatestsequence=d\nMessageprevsequencenumber=e\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "talendalerting-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "talendmessaging.properties": "#this is context properties\n#Tue Dec 19 14:08:15 IST 2017\nGToGALastSequenceJSON={\"_id\"\\: \"_local/GToGALastSequence\",\"_rev\"\\: \"<LAST_REV>\",\"channels\"\\: [\"GToGALastSequence\"],\"alertLastSequence\"\\: <AlertLAST_SEQ>,\"messageLastSequence\"\\: <MessageLAST_SEQ>,\"type\"\\: \"GToGALastSequence\"}\nlastrevnumber=a\nMessagelatestsequence=b\nMessageprevsequencenumber=c\nSyncGatewayUrl=http\\://10.98.0.85\\:4984/\nSyncGatewayUsername=vvdevappdocstorenew\nSyncGatewayPassword=yellow*99\nCouchbaseBucketName=appdocstorenew\nLimit=0\nFilter=sync_gateway/bychannel\nFeed=normal\nTimeout=300000\nRestApiUrl=http\\://vvship.d-aws-vxp.com/svc/messaging-service/alerts/\nEnvironmentName=VV-SHIP-DEV\nRestApiAutorizationToken=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55aWQiOiJiMzVhMzI1YS0wMzZhLTRhZDQtODgzNi02NDY5MjNlNjAxZGUiLCJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJleHAiOjE1MTU5MzA4MzQsImF1dGhvcml0aWVzIjpbIlJPTEVfVFJVU1RFRF9DTElFTlQiXSwianRpIjoiOTUxMTEyYTQtOWFkMi00MGJhLTk4ZTEtMmRjMzFkYjA3ZWQ0IiwiY2xpZW50X2lkIjoiNDllMTQ2NzEtMzJkMy00MWU4LWI1NzktZDc0N2I1NGZmZDIzIn0.lptUyHLIak2h7Fg8yGWJOPLZx9fWMThDpduMCRMgXJXr8U9fRVqqd4J-EOI8hN3GMPIsxhMbrzfbNlmNiGRXrg9McKXy9dF7m3yG8v2nwBBjugNiZ7GrHenwUwHvwIM0aLZPiIfcW9YBpF8HA3vInLjQ4Cf-s27YbscqeCkhrSA2x37QCW_BrML9XRfTjjM5SuL9ioufA1ybTidq_1WSd0OKN81SG7fSit57EdbCfTQSibIHv8GX8DL0nC6laKEXL7Toa755Pp1NUgCcHk5wjFYSd31Qtk-SH6qjuc_uFPWYkIH5iuf6V-QiwYyLwmTWFN2LqRCNs8-Z9ELUsjkIHA\nChannels=TeamMemberMessage,VisitorMessage,GuestMessage\nAlertlatestsequence=e\nAlertprevsequencenumber=f\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "talendmessaging-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "teammember-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/teammember\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/teammember\nkafka:\n  topicName: core.teammember"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "teammember-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "vendor-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/vendor\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/vendor\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "vendor-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "visitor-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://10.98.0.238:5432/visitor\n    hikari:\n      jdbc-url: jdbc:postgresql://10.98.0.238:5432/visitor"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "visitor-configmap",
    "namespace": "dev"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "component": "elasticsearch",
      "role": "data"
    },
    "name": "elasticsearch",
    "namespace": "elk"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 9200,
        "protocol": "TCP",
        "targetPort": 9200
      }
    ],
    "selector": {
      "component": "elasticsearch",
      "role": "data"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "component": "elasticsearch",
      "role": "data"
    },
    "name": "elasticsearch-discovery",
    "namespace": "elk"
  },
  "spec": {
    "ports": [
      {
        "name": "transport",
        "port": 9300,
        "protocol": "TCP",
        "targetPort": 9300
      }
    ],
    "selector": {
      "component": "elasticsearch",
      "role": "data"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "component": "kibana"
    },
    "name": "kibana",
    "namespace": "elk"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 31376,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 5601
      }
    ],
    "selector": {
      "component": "kibana"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "elk"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "run": "kibana"
    },
    "name": "kibana",
    "namespace": "elk"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "run": "kibana"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "run": "kibana"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/kibana",
            "imagePullPolicy": "IfNotPresent",
            "name": "kibana",
            "ports": [
              {
                "containerPort": 5601,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/kibana/kibana.yml",
                "name": "kibana-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "kibana-configmap"
            },
            "name": "kibana-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "pod-template-hash": "802613787",
      "run": "kibana"
    },
    "name": "kibana-802613787",
    "namespace": "elk",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kibana",
        "uid": "5eb66419-cb5e-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "pod-template-hash": "802613787",
        "run": "kibana"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "pod-template-hash": "802613787",
          "run": "kibana"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/kibana",
            "imagePullPolicy": "IfNotPresent",
            "name": "kibana",
            "ports": [
              {
                "containerPort": 5601,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/kibana/kibana.yml",
                "name": "kibana-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "kibana-configmap"
            },
            "name": "kibana-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "elasticsearch.yml": "cluster:\n  name: ${CLUSTER_NAME}\n\nnode:\n  master: ${NODE_MASTER}\n  data: ${NODE_DATA}\n  name: ${NODE_NAME}\n  ingest: ${NODE_INGEST}\n  max_local_storage_nodes: ${MAX_LOCAL_STORAGE_NODES}\n\nnetwork.host: ${NETWORK_HOST}\n\npath:\n  data: /data/data\n  logs: /data/log\n\nbootstrap:\n  memory_lock: ${MEMORY_LOCK}\n\nhttp:\n  enabled: ${HTTP_ENABLE}\n  compression: true\n  cors:\n    enabled: ${HTTP_CORS_ENABLE}\n    allow-origin: ${HTTP_CORS_ALLOW_ORIGIN}\n\ndiscovery:\n  zen:\n    ping.unicast.hosts: ${DISCOVERY_SERVICE}\n    minimum_master_nodes: ${NUMBER_OF_MASTERS}\n",
    "log4j2.properties": "status = error\n\nappender.console.type = Console\nappender.console.name = console\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\n\nrootLogger.level = info\nrootLogger.appenderRef.console.ref = console\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "elasticsearch-configmap",
    "namespace": "elk"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "kibana.yml": "# Kibana is served by a back end server. This setting specifies the port to use.\n#server.port: 5601\n\n# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n# The default is 'localhost', which usually means remote machines will not be able to connect.\n# To allow connections from remote users, set this parameter to a non-loopback address.\nserver.host: '0.0.0.0'\n\n# Enables you to specify a path to mount Kibana at if you are running behind a proxy. This only affects\n# the URLs generated by Kibana, your proxy is expected to remove the basePath value before forwarding requests\n# to Kibana. This setting cannot end in a slash.\n#server.basePath: \"\"\n\n# The maximum payload size in bytes for incoming server requests.\n#server.maxPayloadBytes: 1048576\n\n# The Kibana server's name.  This is used for display purposes.\n#server.name: \"your-hostname\"\n#elastalert.serverHost: localhost\n# The URL of the Elasticsearch instance to use for all your queries.\nelasticsearch.url: 'http://10.98.0.39:9200'\n\n# When this setting's value is true Kibana uses the hostname specified in the server.host\n# setting. When the value of this setting is false, Kibana uses the hostname of the host\n# that connects to this Kibana instance.\n#elasticsearch.preserveHost: true\n\n# Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n# dashboards. Kibana creates a new index if the index doesn't already exist.\n#kibana.index: \".kibana\"\n\n# The default application to load.\n#kibana.defaultAppId: \"discover\"\n\n# If your Elasticsearch is protected with basic authentication, these settings provide\n# the username and password that the Kibana server uses to perform maintenance on the Kibana\n# index at startup. Your Kibana users still need to authenticate with Elasticsearch, which\n# is proxied through the Kibana server.\n#elasticsearch.username: \"user\"\n#elasticsearch.password: \"pass\"\n\n# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.\n# These settings enable SSL for outgoing requests from the Kibana server to the browser.\n#server.ssl.enabled: false\n#server.ssl.certificate: /path/to/your/server.crt\n#server.ssl.key: /path/to/your/server.key\n\n# Optional settings that provide the paths to the PEM-format SSL certificate and key files.\n# These files validate that your Elasticsearch backend uses the same key files.\n#elasticsearch.ssl.certificate: /path/to/your/client.crt\n#elasticsearch.ssl.key: /path/to/your/client.key\n\n# Optional setting that enables you to specify a path to the PEM file for the certificate\n# authority for your Elasticsearch instance.\n#elasticsearch.ssl.certificateAuthorities: [ \"/path/to/your/CA.pem\" ]\n\n# To disregard the validity of SSL certificates, change this setting's value to 'none'.\n#elasticsearch.ssl.verificationMode: full\n\n# Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of\n# the elasticsearch.requestTimeout setting.\n#elasticsearch.pingTimeout: 1500\n\n# Time in milliseconds to wait for responses from the back end or Elasticsearch. This value\n# must be a positive integer.\n#elasticsearch.requestTimeout: 30000\n\n# List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side\n# headers, set this value to [] (an empty list).\n#elasticsearch.requestHeadersWhitelist: [ authorization ]\n\n# Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten\n# by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.\n#elasticsearch.customHeaders: {}\n\n# Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.\n#elasticsearch.shardTimeout: 0\n\n# Time in milliseconds to wait for Elasticsearch at Kibana startup before retrying.\n#elasticsearch.startupTimeout: 5000\n\n# Specifies the path where Kibana creates the process ID file.\n#pid.file: /var/run/kibana.pid\n\n# Enables you specify a file where Kibana stores log output.\n#logging.dest: stdout\n\n# Set the value of this setting to true to suppress all logging output.\n#logging.silent: false\n\n# Set the value of this setting to true to suppress all logging output other than error messages.\n#logging.quiet: false\n\n# Set the value of this setting to true to log all events, including system usage information\n# and all requests.\n#logging.verbose: false\n\n# Set the interval in milliseconds to sample system and process performance\n# metrics. Minimum is 100ms. Defaults to 5000.\n#ops.interval: 5000\n\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "kibana-configmap",
    "namespace": "elk"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"bootstrap\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":9092}],\"selector\":{\"app\":\"kafka\"}}}\n"
    },
    "name": "bootstrap",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 9092,
        "protocol": "TCP",
        "targetPort": 9092
      }
    ],
    "selector": {
      "app": "kafka"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"broker\",\"namespace\":\"kafka\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"port\":9092}],\"selector\":{\"app\":\"kafka\"}}}\n"
    },
    "name": "broker",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 9092,
        "protocol": "TCP",
        "targetPort": 9092
      }
    ],
    "selector": {
      "app": "kafka"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-manager\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":80,\"protocol\":\"TCP\",\"targetPort\":80}],\"selector\":{\"app\":\"kafka-manager\"}}}\n"
    },
    "name": "kafka-manager",
    "namespace": "kafka"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 30077,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      }
    ],
    "selector": {
      "app": "kafka-manager"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-ui\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":8000}],\"selector\":{\"app\":\"kafka-topic-ui\"}}}\n"
    },
    "name": "kafka-ui",
    "namespace": "kafka"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 31533,
        "port": 8000,
        "protocol": "TCP",
        "targetPort": 8000
      }
    ],
    "selector": {
      "app": "kafka-topic-ui"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"outside-0\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"nodePort\":32400,\"port\":32400,\"protocol\":\"TCP\",\"targetPort\":9094}],\"selector\":{\"app\":\"kafka\",\"kafka-broker-id\":\"0\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "outside-0",
    "namespace": "kafka"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32400,
        "port": 32400,
        "protocol": "TCP",
        "targetPort": 9094
      }
    ],
    "selector": {
      "app": "kafka",
      "kafka-broker-id": "0"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"outside-1\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"nodePort\":32401,\"port\":32401,\"protocol\":\"TCP\",\"targetPort\":9094}],\"selector\":{\"app\":\"kafka\",\"kafka-broker-id\":\"1\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "outside-1",
    "namespace": "kafka"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32401,
        "port": 32401,
        "protocol": "TCP",
        "targetPort": 9094
      }
    ],
    "selector": {
      "app": "kafka",
      "kafka-broker-id": "1"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"outside-2\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"nodePort\":32402,\"port\":32402,\"protocol\":\"TCP\",\"targetPort\":9094}],\"selector\":{\"app\":\"kafka\",\"kafka-broker-id\":\"2\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "outside-2",
    "namespace": "kafka"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32402,
        "port": 32402,
        "protocol": "TCP",
        "targetPort": 9094
      }
    ],
    "selector": {
      "app": "kafka",
      "kafka-broker-id": "2"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"pzoo\",\"namespace\":\"kafka\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"peer\",\"port\":2888},{\"name\":\"leader-election\",\"port\":3888}],\"selector\":{\"app\":\"zookeeper\",\"storage\":\"persistent\"}}}\n"
    },
    "name": "pzoo",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "name": "peer",
        "port": 2888,
        "protocol": "TCP",
        "targetPort": 2888
      },
      {
        "name": "leader-election",
        "port": 3888,
        "protocol": "TCP",
        "targetPort": 3888
      }
    ],
    "selector": {
      "app": "zookeeper",
      "storage": "persistent"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"rest\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":8082}],\"selector\":{\"app\":\"kafka-rest\"}}}\n"
    },
    "name": "rest",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 8082,
        "protocol": "TCP",
        "targetPort": 8082
      }
    ],
    "selector": {
      "app": "kafka-rest"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"schema\",\"namespace\":\"kafka\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"port\":8081}],\"selector\":{\"app\":\"schema-registry\"}}}\n"
    },
    "name": "schema",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 8081,
        "protocol": "TCP",
        "targetPort": 8081
      }
    ],
    "selector": {
      "app": "schema-registry"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"zookeeper\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"name\":\"client\",\"port\":2181}],\"selector\":{\"app\":\"zookeeper\"}}}\n"
    },
    "name": "zookeeper",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "name": "client",
        "port": 2181,
        "protocol": "TCP",
        "targetPort": 2181
      }
    ],
    "selector": {
      "app": "zookeeper"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "kafka"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-manager\",\"namespace\":\"kafka\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"kafka-manager\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"kafka-manager\"}},\"spec\":{\"containers\":[{\"command\":[\"./bin/kafka-manager\",\"-Dhttp.port=80\"],\"env\":[{\"name\":\"ZK_HOSTS\",\"value\":\"zookeeper:2181\"}],\"image\":\"solsson/kafka-manager@sha256:e07b5c50b02c761b3471ebb62ede88afc0625e325fe428316e32fec7f227ff9b\",\"name\":\"kafka-manager\",\"ports\":[{\"containerPort\":80}]}]}}}}\n"
    },
    "labels": {
      "app": "kafka-manager"
    },
    "name": "kafka-manager",
    "namespace": "kafka"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 1,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "kafka-manager"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-manager"
        }
      },
      "spec": {
        "containers": [
          {
            "command": [
              "./bin/kafka-manager",
              "-Dhttp.port=80"
            ],
            "env": [
              {
                "name": "ZK_HOSTS",
                "value": "zookeeper:2181"
              }
            ],
            "image": "solsson/kafka-manager@sha256:e07b5c50b02c761b3471ebb62ede88afc0625e325fe428316e32fec7f227ff9b",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-manager",
            "ports": [
              {
                "containerPort": 80,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "2",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-ui\",\"namespace\":\"kafka\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"kafka-topic-ui\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"KAFKA_REST_PROXY_URL\",\"value\":\"rest:8082\"},{\"name\":\"PROXY\",\"value\":\"true\"},{\"name\":\"KAFKA_REST_SCHEMA_REGISTRY_URL\",\"value\":\"registry-0.schema.kafka.svc.cluster.local\"}],\"image\":\"landoop/kafka-topics-ui\",\"name\":\"kafka-topc-ui\",\"ports\":[{\"containerPort\":8000}]}]}}}}\n"
    },
    "labels": {
      "app": "kafka-topic-ui"
    },
    "name": "kafka-ui",
    "namespace": "kafka"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 1,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "kafka-topic-ui"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-topic-ui"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_PROXY_URL",
                "value": "rest:8082"
              },
              {
                "name": "PROXY",
                "value": "true"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              }
            ],
            "image": "landoop/kafka-topics-ui",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-topc-ui",
            "ports": [
              {
                "containerPort": 8000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "2",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"rest\",\"namespace\":\"kafka\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"kafka-rest\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"KAFKA_REST_ZOOKEEPER_CONNECT\",\"value\":\"zookeeper:2181\"},{\"name\":\"KAFKA_REST_SCHEMA_REGISTRY_URL\",\"value\":\"registry-0.schema.kafka.svc.cluster.local\"},{\"name\":\"KAFKA_REST_BOOTSTRAP_SERVERS\",\"value\":\"PLAINTEXT://kafka-0.broker.kafka.svc.cluster.local:9092,kafka-1.broker.kafka.svc.cluster.local:9092\"},{\"name\":\"KAFKA_REST_HOST_NAME\",\"value\":\"localhost\"},{\"name\":\"KAFKA_REST_LISTENERS\",\"value\":\"http://0.0.0.0:8082\"}],\"image\":\"confluentinc/cp-kafka-rest:3.2.0@sha256:82206b1609d84e30279688ed036b034c503feb35543637d930f3d95136296245\",\"name\":\"kafka-rest\",\"ports\":[{\"containerPort\":8082}]}]}}}}\n"
    },
    "labels": {
      "app": "kafka-rest"
    },
    "name": "rest",
    "namespace": "kafka"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 1,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "kafka-rest"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-rest"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_ZOOKEEPER_CONNECT",
                "value": "zookeeper:2181"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              },
              {
                "name": "KAFKA_REST_BOOTSTRAP_SERVERS",
                "value": "PLAINTEXT://kafka-0.broker.kafka.svc.cluster.local:9092,kafka-1.broker.kafka.svc.cluster.local:9092"
              },
              {
                "name": "KAFKA_REST_HOST_NAME",
                "value": "localhost"
              },
              {
                "name": "KAFKA_REST_LISTENERS",
                "value": "http://0.0.0.0:8082"
              }
            ],
            "image": "confluentinc/cp-kafka-rest:3.2.0@sha256:82206b1609d84e30279688ed036b034c503feb35543637d930f3d95136296245",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-rest",
            "ports": [
              {
                "containerPort": 8082,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kafka-manager",
      "pod-template-hash": "459835487"
    },
    "name": "kafka-manager-459835487",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kafka-manager",
        "uid": "bed15024-dfdd-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "kafka-manager",
        "pod-template-hash": "459835487"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-manager",
          "pod-template-hash": "459835487"
        }
      },
      "spec": {
        "containers": [
          {
            "command": [
              "./bin/kafka-manager",
              "-Dhttp.port=80"
            ],
            "env": [
              {
                "name": "ZK_HOSTS",
                "value": "zookeeper:2181"
              }
            ],
            "image": "solsson/kafka-manager@sha256:e07b5c50b02c761b3471ebb62ede88afc0625e325fe428316e32fec7f227ff9b",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-manager",
            "ports": [
              {
                "containerPort": 80,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "kafka-topic-ui",
      "pod-template-hash": "1163151572"
    },
    "name": "kafka-ui-1163151572",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kafka-ui",
        "uid": "23095246-dfde-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "kafka-topic-ui",
        "pod-template-hash": "1163151572"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-topic-ui",
          "pod-template-hash": "1163151572"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_PROXY_URL",
                "value": "rest:8082"
              },
              {
                "name": "PROXY",
                "value": "true"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              }
            ],
            "image": "landoop/kafka-topics-ui",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-topc-ui",
            "ports": [
              {
                "containerPort": 8000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kafka-topic-ui",
      "pod-template-hash": "3180806025"
    },
    "name": "kafka-ui-3180806025",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kafka-ui",
        "uid": "23095246-dfde-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "kafka-topic-ui",
        "pod-template-hash": "3180806025"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-topic-ui",
          "pod-template-hash": "3180806025"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_PROXY_URL",
                "value": "rest:8082"
              },
              {
                "name": "PROXY",
                "value": "true"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              }
            ],
            "image": "landoop/kafka-topics-ui:0.8.3",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-topc-ui",
            "ports": [
              {
                "containerPort": 8000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "kafka-rest",
      "pod-template-hash": "2762903035"
    },
    "name": "rest-2762903035",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "rest",
        "uid": "93d9dbfc-df47-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "kafka-rest",
        "pod-template-hash": "2762903035"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-rest",
          "pod-template-hash": "2762903035"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_ZOOKEEPER_CONNECT",
                "value": "zookeeper:2181"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              },
              {
                "name": "KAFKA_REST_BOOTSTRAP_SERVERS",
                "value": "PLAINTEXT://kafka-0.broker.kafka.svc.cluster.local:9092,kafka-1.broker.kafka.svc.cluster.local:9092"
              },
              {
                "name": "KAFKA_REST_HOST_NAME",
                "value": "localhost"
              },
              {
                "name": "KAFKA_REST_LISTENERS",
                "value": "http://0.0.0.0:8082"
              }
            ],
            "image": "confluentinc/cp-kafka-rest:3.2.0@sha256:82206b1609d84e30279688ed036b034c503feb35543637d930f3d95136296245",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-rest",
            "ports": [
              {
                "containerPort": 8082,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kafka-rest",
      "pod-template-hash": "740779334"
    },
    "name": "rest-740779334",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "rest",
        "uid": "93d9dbfc-df47-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "kafka-rest",
        "pod-template-hash": "740779334"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-rest",
          "pod-template-hash": "740779334"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_ZOOKEEPER_CONNECT",
                "value": "zookeeper:2181"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              },
              {
                "name": "KAFKA_REST_BOOTSTRAP_SERVERS",
                "value": "PLAINTEXT://kafka-0.broker.kafka.svc.cluster.local:9092,kafka-1.broker.kafka.svc.cluster.local:9092,kafka-2.broker.kafka.svc.cluster.local:9092"
              },
              {
                "name": "KAFKA_REST_HOST_NAME",
                "value": "localhost"
              },
              {
                "name": "KAFKA_REST_LISTENERS",
                "value": "http://0.0.0.0:8082"
              }
            ],
            "image": "confluentinc/cp-kafka-rest:3.2.0@sha256:82206b1609d84e30279688ed036b034c503feb35543637d930f3d95136296245",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-rest",
            "ports": [
              {
                "containerPort": 8082,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "init.sh": "#!/bin/bash\nset -x\n\nKAFKA_BROKER_ID=${HOSTNAME##*-}\nsed -i \"s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/\" /etc/kafka/server.properties\n\nhash kubectl 2>/dev/null || {\n  sed -i \"s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/\" /etc/kafka/server.properties\n} && {\n  ZONE=$(kubectl get node \"$NODE_NAME\" -o=go-template='{{index .metadata.labels \"failure-domain.beta.kubernetes.io/zone\"}}')\n  if [ $? -ne 0 ]; then\n    sed -i \"s/#init#broker.rack=#init#/#init#broker.rack=# zone lookup failed, see -c init-config logs/\" /etc/kafka/server.properties\n  elif [ \"x$ZONE\" == \"x<no value>\" ]; then\n    sed -i \"s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/\" /etc/kafka/server.properties\n  else\n    sed -i \"s/#init#broker.rack=#init#/broker.rack=$ZONE/\" /etc/kafka/server.properties\n  fi\n\n  kubectl -n $POD_NAMESPACE label pod $POD_NAME kafka-broker-id=$KAFKA_BROKER_ID\n\n  OUTSIDE_HOST=$(kubectl get node \"$NODE_NAME\" -o jsonpath='{.status.addresses[?(@.type==\"InternalIP\")].address}')\n  if [ $? -ne 0 ]; then\n    echo \"Outside (i.e. cluster-external access) host lookup command failed\"\n  else\n    OUTSIDE_HOST=${OUTSIDE_HOST}:3240${KAFKA_BROKER_ID}\n    sed -i \"s|#init#advertised.listeners=OUTSIDE://#init#|advertised.listeners=OUTSIDE://${OUTSIDE_HOST}|\" /etc/kafka/server.properties\n  fi\n}",
    "log4j.properties": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Unspecified loggers and loggers with additivity=true output to server.log and stdout\n# Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise\nlog4j.rootLogger=INFO, stdout\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log\nlog4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log\nlog4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log\nlog4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log\nlog4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log\nlog4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log\nlog4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\n# Change the two lines below to adjust ZK client logging\nlog4j.logger.org.I0Itec.zkclient.ZkClient=INFO\nlog4j.logger.org.apache.zookeeper=INFO\n\n# Change the two lines below to adjust the general broker logging level (output to server.log and stdout)\nlog4j.logger.kafka=INFO\nlog4j.logger.org.apache.kafka=INFO\n\n# Change to DEBUG or TRACE to enable request logging\nlog4j.logger.kafka.request.logger=WARN, requestAppender\nlog4j.additivity.kafka.request.logger=false\n\n# Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output\n# related to the handling of requests\n#log4j.logger.kafka.network.Processor=TRACE, requestAppender\n#log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender\n#log4j.additivity.kafka.server.KafkaApis=false\nlog4j.logger.kafka.network.RequestChannel$=WARN, requestAppender\nlog4j.additivity.kafka.network.RequestChannel$=false\n\nlog4j.logger.kafka.controller=TRACE, controllerAppender\nlog4j.additivity.kafka.controller=false\n\nlog4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender\nlog4j.additivity.kafka.log.LogCleaner=false\n\nlog4j.logger.state.change.logger=TRACE, stateChangeAppender\nlog4j.additivity.state.change.logger=false\n\n# Change to DEBUG to enable audit log for the authorizer\nlog4j.logger.kafka.authorizer.logger=WARN, authorizerAppender\nlog4j.additivity.kafka.authorizer.logger=false",
    "server.properties": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# see kafka.server.KafkaConfig for additional details and defaults\n\n############################# Server Basics #############################\n\n# The id of the broker. This must be set to a unique integer for each broker.\n#init#broker.id=#init#\n\n#init#broker.rack=#init#\n\n############################# Socket Server Settings #############################\n\n# The address the socket server listens on. It will get the value returned from\n# java.net.InetAddress.getCanonicalHostName() if not configured.\n#   FORMAT:\n#     listeners = listener_name://host_name:port\n#   EXAMPLE:\n#     listeners = PLAINTEXT://your.host.name:9092\n#listeners=PLAINTEXT://:9092\nlisteners=OUTSIDE://:9094,PLAINTEXT://:9092\n\n# Hostname and port the broker will advertise to producers and consumers. If not set,\n# it uses the value for \"listeners\" if configured.  Otherwise, it will use the value\n# returned from java.net.InetAddress.getCanonicalHostName().\n#advertised.listeners=PLAINTEXT://your.host.name:9092\n#init#advertised.listeners=OUTSIDE://#init#,PLAINTEXT://:9092\n\n# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details\n#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL\nlistener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT\ninter.broker.listener.name=PLAINTEXT\n\n# The number of threads that the server uses for receiving requests from the network and sending responses to the network\nnum.network.threads=3\n\n# The number of threads that the server uses for processing requests, which may include disk I/O\nnum.io.threads=8\n\n# The send buffer (SO_SNDBUF) used by the socket server\nsocket.send.buffer.bytes=102400\n\n# The receive buffer (SO_RCVBUF) used by the socket server\nsocket.receive.buffer.bytes=102400\n\n# The maximum size of a request that the socket server will accept (protection against OOM)\nsocket.request.max.bytes=104857600\n\n\n############################# Log Basics #############################\n\n# A comma seperated list of directories under which to store log files\nlog.dirs=/tmp/kafka-logs\n\n# The default number of log partitions per topic. More partitions allow greater\n# parallelism for consumption, but this will also result in more files across\n# the brokers.\nnum.partitions=1\n\n# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.\n# This value is recommended to be increased for installations with data dirs located in RAID array.\nnum.recovery.threads.per.data.dir=1\n\n############################# Internal Topic Settings  #############################\n# The replication factor for the group metadata internal topics \"__consumer_offsets\" and \"__transaction_state\"\n# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\n\n############################# Log Flush Policy #############################\n\n# Messages are immediately written to the filesystem but by default we only fsync() to sync\n# the OS cache lazily. The following configurations control the flush of data to disk.\n# There are a few important trade-offs here:\n#    1. Durability: Unflushed data may be lost if you are not using replication.\n#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.\n#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.\n# The settings below allow one to configure the flush policy to flush data after a period of time or\n# every N messages (or both). This can be done globally and overridden on a per-topic basis.\n\n# The number of messages to accept before forcing a flush of data to disk\n#log.flush.interval.messages=10000\n\n# The maximum amount of time a message can sit in a log before we force a flush\n#log.flush.interval.ms=1000\n\n############################# Log Retention Policy #############################\n\n# The following configurations control the disposal of log segments. The policy can\n# be set to delete segments after a period of time, or after a given size has accumulated.\n# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens\n# from the end of the log.\n\n# The minimum age of a log file to be eligible for deletion due to age\nlog.retention.hours=168\n\n# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining\n# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.\n#log.retention.bytes=1073741824\n\n# The maximum size of a log segment file. When this size is reached a new log segment will be created.\nlog.segment.bytes=1073741824\n\n# The interval at which log segments are checked to see if they can be deleted according\n# to the retention policies\nlog.retention.check.interval.ms=300000\n\n############################# Zookeeper #############################\n\n# Zookeeper connection string (see zookeeper docs for details).\n# This is a comma separated host:port pairs, each corresponding to a zk\n# server. e.g. \"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\".\n# You can also append an optional chroot string to the urls to specify the\n# root directory for all kafka znodes.\nzookeeper.connect=localhost:2181\n\n# Timeout in ms for connecting to zookeeper\nzookeeper.connection.timeout.ms=6000\n\n\n############################# Group Coordinator Settings #############################\n\n# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.\n# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.\n# The default value for this is 3 seconds.\n# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.\n# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.\ngroup.initial.rebalance.delay.ms=0"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"init.sh\":\"#!/bin/bash\\nset -x\\n\\nKAFKA_BROKER_ID=${HOSTNAME##*-}\\nsed -i \\\"s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/\\\" /etc/kafka/server.properties\\n\\nhash kubectl 2\\u003e/dev/null || {\\n  sed -i \\\"s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/\\\" /etc/kafka/server.properties\\n} \\u0026\\u0026 {\\n  ZONE=$(kubectl get node \\\"$NODE_NAME\\\" -o=go-template='{{index .metadata.labels \\\"failure-domain.beta.kubernetes.io/zone\\\"}}')\\n  if [ $? -ne 0 ]; then\\n    sed -i \\\"s/#init#broker.rack=#init#/#init#broker.rack=# zone lookup failed, see -c init-config logs/\\\" /etc/kafka/server.properties\\n  elif [ \\\"x$ZONE\\\" == \\\"x\\u003cno value\\u003e\\\" ]; then\\n    sed -i \\\"s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/\\\" /etc/kafka/server.properties\\n  else\\n    sed -i \\\"s/#init#broker.rack=#init#/broker.rack=$ZONE/\\\" /etc/kafka/server.properties\\n  fi\\n\\n  kubectl -n $POD_NAMESPACE label pod $POD_NAME kafka-broker-id=$KAFKA_BROKER_ID\\n\\n  OUTSIDE_HOST=$(kubectl get node \\\"$NODE_NAME\\\" -o jsonpath='{.status.addresses[?(@.type==\\\"InternalIP\\\")].address}')\\n  if [ $? -ne 0 ]; then\\n    echo \\\"Outside (i.e. cluster-external access) host lookup command failed\\\"\\n  else\\n    OUTSIDE_HOST=${OUTSIDE_HOST}:3240${KAFKA_BROKER_ID}\\n    sed -i \\\"s|#init#advertised.listeners=OUTSIDE://#init#|advertised.listeners=OUTSIDE://${OUTSIDE_HOST}|\\\" /etc/kafka/server.properties\\n  fi\\n}\",\"log4j.properties\":\"# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\\"License\\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#    http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n\\n# Unspecified loggers and loggers with additivity=true output to server.log and stdout\\n# Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise\\nlog4j.rootLogger=INFO, stdout\\n\\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log\\nlog4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log\\nlog4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log\\nlog4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log\\nlog4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log\\nlog4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log\\nlog4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\n# Change the two lines below to adjust ZK client logging\\nlog4j.logger.org.I0Itec.zkclient.ZkClient=INFO\\nlog4j.logger.org.apache.zookeeper=INFO\\n\\n# Change the two lines below to adjust the general broker logging level (output to server.log and stdout)\\nlog4j.logger.kafka=INFO\\nlog4j.logger.org.apache.kafka=INFO\\n\\n# Change to DEBUG or TRACE to enable request logging\\nlog4j.logger.kafka.request.logger=WARN, requestAppender\\nlog4j.additivity.kafka.request.logger=false\\n\\n# Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output\\n# related to the handling of requests\\n#log4j.logger.kafka.network.Processor=TRACE, requestAppender\\n#log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender\\n#log4j.additivity.kafka.server.KafkaApis=false\\nlog4j.logger.kafka.network.RequestChannel$=WARN, requestAppender\\nlog4j.additivity.kafka.network.RequestChannel$=false\\n\\nlog4j.logger.kafka.controller=TRACE, controllerAppender\\nlog4j.additivity.kafka.controller=false\\n\\nlog4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender\\nlog4j.additivity.kafka.log.LogCleaner=false\\n\\nlog4j.logger.state.change.logger=TRACE, stateChangeAppender\\nlog4j.additivity.state.change.logger=false\\n\\n# Change to DEBUG to enable audit log for the authorizer\\nlog4j.logger.kafka.authorizer.logger=WARN, authorizerAppender\\nlog4j.additivity.kafka.authorizer.logger=false\",\"server.properties\":\"# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\\"License\\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#    http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n\\n# see kafka.server.KafkaConfig for additional details and defaults\\n\\n############################# Server Basics #############################\\n\\n# The id of the broker. This must be set to a unique integer for each broker.\\n#init#broker.id=#init#\\n\\n#init#broker.rack=#init#\\n\\n############################# Socket Server Settings #############################\\n\\n# The address the socket server listens on. It will get the value returned from\\n# java.net.InetAddress.getCanonicalHostName() if not configured.\\n#   FORMAT:\\n#     listeners = listener_name://host_name:port\\n#   EXAMPLE:\\n#     listeners = PLAINTEXT://your.host.name:9092\\n#listeners=PLAINTEXT://:9092\\nlisteners=OUTSIDE://:9094,PLAINTEXT://:9092\\n\\n# Hostname and port the broker will advertise to producers and consumers. If not set,\\n# it uses the value for \\\"listeners\\\" if configured.  Otherwise, it will use the value\\n# returned from java.net.InetAddress.getCanonicalHostName().\\n#advertised.listeners=PLAINTEXT://your.host.name:9092\\n#init#advertised.listeners=OUTSIDE://#init#,PLAINTEXT://:9092\\n\\n# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details\\n#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL\\nlistener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT\\ninter.broker.listener.name=PLAINTEXT\\n\\n# The number of threads that the server uses for receiving requests from the network and sending responses to the network\\nnum.network.threads=3\\n\\n# The number of threads that the server uses for processing requests, which may include disk I/O\\nnum.io.threads=8\\n\\n# The send buffer (SO_SNDBUF) used by the socket server\\nsocket.send.buffer.bytes=102400\\n\\n# The receive buffer (SO_RCVBUF) used by the socket server\\nsocket.receive.buffer.bytes=102400\\n\\n# The maximum size of a request that the socket server will accept (protection against OOM)\\nsocket.request.max.bytes=104857600\\n\\n\\n############################# Log Basics #############################\\n\\n# A comma seperated list of directories under which to store log files\\nlog.dirs=/tmp/kafka-logs\\n\\n# The default number of log partitions per topic. More partitions allow greater\\n# parallelism for consumption, but this will also result in more files across\\n# the brokers.\\nnum.partitions=1\\n\\n# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.\\n# This value is recommended to be increased for installations with data dirs located in RAID array.\\nnum.recovery.threads.per.data.dir=1\\n\\n############################# Internal Topic Settings  #############################\\n# The replication factor for the group metadata internal topics \\\"__consumer_offsets\\\" and \\\"__transaction_state\\\"\\n# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.\\noffsets.topic.replication.factor=1\\ntransaction.state.log.replication.factor=1\\ntransaction.state.log.min.isr=1\\n\\n############################# Log Flush Policy #############################\\n\\n# Messages are immediately written to the filesystem but by default we only fsync() to sync\\n# the OS cache lazily. The following configurations control the flush of data to disk.\\n# There are a few important trade-offs here:\\n#    1. Durability: Unflushed data may be lost if you are not using replication.\\n#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.\\n#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.\\n# The settings below allow one to configure the flush policy to flush data after a period of time or\\n# every N messages (or both). This can be done globally and overridden on a per-topic basis.\\n\\n# The number of messages to accept before forcing a flush of data to disk\\n#log.flush.interval.messages=10000\\n\\n# The maximum amount of time a message can sit in a log before we force a flush\\n#log.flush.interval.ms=1000\\n\\n############################# Log Retention Policy #############################\\n\\n# The following configurations control the disposal of log segments. The policy can\\n# be set to delete segments after a period of time, or after a given size has accumulated.\\n# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens\\n# from the end of the log.\\n\\n# The minimum age of a log file to be eligible for deletion due to age\\nlog.retention.hours=168\\n\\n# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining\\n# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.\\n#log.retention.bytes=1073741824\\n\\n# The maximum size of a log segment file. When this size is reached a new log segment will be created.\\nlog.segment.bytes=1073741824\\n\\n# The interval at which log segments are checked to see if they can be deleted according\\n# to the retention policies\\nlog.retention.check.interval.ms=300000\\n\\n############################# Zookeeper #############################\\n\\n# Zookeeper connection string (see zookeeper docs for details).\\n# This is a comma separated host:port pairs, each corresponding to a zk\\n# server. e.g. \\\"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\\\".\\n# You can also append an optional chroot string to the urls to specify the\\n# root directory for all kafka znodes.\\nzookeeper.connect=localhost:2181\\n\\n# Timeout in ms for connecting to zookeeper\\nzookeeper.connection.timeout.ms=6000\\n\\n\\n############################# Group Coordinator Settings #############################\\n\\n# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.\\n# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.\\n# The default value for this is 3 seconds.\\n# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.\\n# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.\\ngroup.initial.rebalance.delay.ms=0\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"broker-config\",\"namespace\":\"kafka\"}}\n"
    },
    "name": "broker-config",
    "namespace": "kafka"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "aws.region": "us-east-1",
    "file.system.id": "fs-5d93bc14",
    "provisioner.name": "aws-efs"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"aws.region\":\"us-east-1\",\"file.system.id\":\"fs-5d93bc14\",\"provisioner.name\":\"aws-efs\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"efs-provisioner\",\"namespace\":\"kafka\"}}\n"
    },
    "name": "efs-provisioner",
    "namespace": "kafka"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "init.sh": "#!/bin/bash\nset -x\n\n[ -z \"$ID_OFFSET\" ] && ID_OFFSET=1\nexport ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-} + $ID_OFFSET))\necho \"${ZOOKEEPER_SERVER_ID:-1}\" | tee /var/lib/zookeeper/data/myid\nsed -i \"s/server\\.$ZOOKEEPER_SERVER_ID\\=[a-z0-9.-]*/server.$ZOOKEEPER_SERVER_ID=0.0.0.0/\" /etc/kafka/zookeeper.properties",
    "log4j.properties": "log4j.rootLogger=INFO, stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\n# Suppress connection log messages, three lines per livenessProbe execution\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxnFactory=WARN\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN",
    "zookeeper.properties": "tickTime=2000\ndataDir=/var/lib/zookeeper/data\ndataLogDir=/var/lib/zookeeper/log\nclientPort=2181\ninitLimit=5\nsyncLimit=2\nserver.1=pzoo-0.pzoo:2888:3888:participant\nserver.2=pzoo-1.pzoo:2888:3888:participant\nserver.3=pzoo-2.pzoo:2888:3888:participant"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"init.sh\":\"#!/bin/bash\\nset -x\\n\\n[ -z \\\"$ID_OFFSET\\\" ] \\u0026\\u0026 ID_OFFSET=1\\nexport ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-} + $ID_OFFSET))\\necho \\\"${ZOOKEEPER_SERVER_ID:-1}\\\" | tee /var/lib/zookeeper/data/myid\\nsed -i \\\"s/server\\\\.$ZOOKEEPER_SERVER_ID\\\\=[a-z0-9.-]*/server.$ZOOKEEPER_SERVER_ID=0.0.0.0/\\\" /etc/kafka/zookeeper.properties\",\"log4j.properties\":\"log4j.rootLogger=INFO, stdout\\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\n# Suppress connection log messages, three lines per livenessProbe execution\\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxnFactory=WARN\\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN\",\"zookeeper.properties\":\"tickTime=2000\\ndataDir=/var/lib/zookeeper/data\\ndataLogDir=/var/lib/zookeeper/log\\nclientPort=2181\\ninitLimit=5\\nsyncLimit=2\\nserver.1=pzoo-0.pzoo:2888:3888:participant\\nserver.2=pzoo-1.pzoo:2888:3888:participant\\nserver.3=pzoo-2.pzoo:2888:3888:participant\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"zookeeper-config\",\"namespace\":\"kafka\"}}\n"
    },
    "name": "zookeeper-config",
    "namespace": "kafka"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/path\":\"/metrics\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"name\":\"alertmanager\"},\"name\":\"alertmanager\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"name\":\"alertmanager\",\"port\":9093,\"protocol\":\"TCP\",\"targetPort\":9093}],\"selector\":{\"app\":\"alertmanager\"},\"type\":\"NodePort\"}}\n",
      "prometheus.io/path": "/metrics",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "name": "alertmanager"
    },
    "name": "alertmanager",
    "namespace": "monitoring"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "alertmanager",
        "nodePort": 31859,
        "port": 9093,
        "protocol": "TCP",
        "targetPort": 9093
      }
    ],
    "selector": {
      "app": "alertmanager"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "component": "elasticsearch",
      "role": "data"
    },
    "name": "elasticsearch",
    "namespace": "monitoring"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "http",
        "nodePort": 32328,
        "port": 9200,
        "protocol": "TCP",
        "targetPort": 9200
      }
    ],
    "selector": {
      "component": "elasticsearch",
      "role": "data"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "component": "elasticsearch",
      "role": "data"
    },
    "name": "elasticsearch-discovery",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "name": "transport",
        "port": 9300,
        "protocol": "TCP",
        "targetPort": 9300
      }
    ],
    "selector": {
      "component": "elasticsearch",
      "role": "data"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"grafana\",\"component\":\"core\"},\"name\":\"grafana\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"port\":3000}],\"selector\":{\"app\":\"grafana\",\"component\":\"core\"},\"type\":\"NodePort\"}}\n"
    },
    "labels": {
      "app": "grafana",
      "component": "core"
    },
    "name": "grafana",
    "namespace": "monitoring"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 31527,
        "port": 3000,
        "protocol": "TCP",
        "targetPort": 3000
      }
    ],
    "selector": {
      "app": "grafana",
      "component": "core"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "run": "kibana"
    },
    "name": "kibana",
    "namespace": "monitoring"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32454,
        "port": 5601,
        "protocol": "TCP",
        "targetPort": 5601
      }
    ],
    "selector": {
      "run": "kibana"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"kube-state-metrics\"},\"name\":\"kube-state-metrics\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"name\":\"kube-state-metrics\",\"port\":8080,\"protocol\":\"TCP\"}],\"selector\":{\"app\":\"kube-state-metrics\"}}}\n",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "app": "kube-state-metrics"
    },
    "name": "kube-state-metrics",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "name": "kube-state-metrics",
        "port": 8080,
        "protocol": "TCP",
        "targetPort": 8080
      }
    ],
    "selector": {
      "app": "kube-state-metrics"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "run": "logstash"
    },
    "name": "logstash",
    "namespace": "monitoring"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32762,
        "port": 5044,
        "protocol": "TCP",
        "targetPort": 5044
      }
    ],
    "selector": {
      "run": "logstash"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"prometheus\",\"component\":\"core\"},\"name\":\"prometheus\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"name\":\"webui\",\"port\":9090,\"protocol\":\"TCP\"}],\"selector\":{\"app\":\"prometheus\",\"component\":\"core\"},\"type\":\"NodePort\"}}\n",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "app": "prometheus",
      "component": "core"
    },
    "name": "prometheus",
    "namespace": "monitoring"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "name": "webui",
        "nodePort": 30184,
        "port": 9090,
        "protocol": "TCP",
        "targetPort": 9090
      }
    ],
    "selector": {
      "app": "prometheus",
      "component": "core"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"name\":\"prometheus-node-exporter\",\"namespace\":\"monitoring\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"prometheus-node-exporter\",\"port\":9100,\"protocol\":\"TCP\"}],\"selector\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"type\":\"ClusterIP\"}}\n",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "app": "prometheus",
      "component": "node-exporter"
    },
    "name": "prometheus-node-exporter",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "name": "prometheus-node-exporter",
        "port": 9100,
        "protocol": "TCP",
        "targetPort": 9100
      }
    ],
    "selector": {
      "app": "prometheus",
      "component": "node-exporter"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "monitoring"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "labels": {
      "app": "filebeat"
    },
    "name": "filebeat",
    "namespace": "monitoring"
  },
  "spec": {
    "revisionHistoryLimit": 10,
    "selector": {
      "matchLabels": {
        "app": "filebeat"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "filebeat"
        },
        "name": "filebeat"
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOGSTASH_HOSTS",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOGSTASH_HOSTS",
                    "name": "environment-variables"
                  }
                }
              },
              {
                "name": "LOG_LEVEL",
                "value": "info"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/filebeat:custom",
            "imagePullPolicy": "IfNotPresent",
            "name": "filebeat",
            "resources": {
              "limits": {
                "memory": "1Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs",
                "name": "varlogpods",
                "readOnly": true
              },
              {
                "mountPath": "/var/log/filebeat",
                "name": "filebeatlogs"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlogs"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs"
            },
            "name": "varlogpods"
          },
          {
            "hostPath": {
              "path": "/var/log/filebeat"
            },
            "name": "filebeatlogs"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs"
            },
            "name": "tomcatlogs"
          }
        ]
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "annotations": {
      "description": "This `DaemonSet` provides metrics in Prometheus format about disk usage on the nodes.\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\nThe other container `caddy` just hands out the contents of that file on request via `http` on `/metrics` at port `9102` which are the defaults for Prometheus.\nThese are scheduled on every node in the Kubernetes cluster.\nTo choose directories from the node to check, just mount them on the `read-du` container below `/mnt`.\n",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{\"description\":\"This `DaemonSet` provides metrics in Prometheus format about disk usage on the nodes.\\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\\nThe other container `caddy` just hands out the contents of that file on request via `http` on `/metrics` at port `9102` which are the defaults for Prometheus.\\nThese are scheduled on every node in the Kubernetes cluster.\\nTo choose directories from the node to check, just mount them on the `read-du` container below `/mnt`.\\n\"},\"name\":\"node-directory-size-metrics\",\"namespace\":\"monitoring\"},\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"description\":\"This `Pod` provides metrics in Prometheus format about disk usage on the node.\\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\\nThe other container `caddy` just hands out the contents of that file on request on `/metrics` at port `9102` which are the defaults for Prometheus.\\nThis `Pod` is scheduled on every node in the Kubernetes cluster.\\nTo choose directories from the node to check just mount them on `read-du` below `/mnt`.\\n\",\"prometheus.io/port\":\"9102\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"node-directory-size-metrics\"}},\"spec\":{\"containers\":[{\"command\":[\"fish\",\"--command\",\"touch /tmp/metrics-temp\\nwhile true\\n  for directory in (du --bytes --separate-dirs --threshold=100M /mnt)\\n    echo $directory | read size path\\n    echo \\\"node_directory_size_bytes{path=\\\\\\\"$path\\\\\\\"} $size\\\" \\\\\\n      \\u003e\\u003e /tmp/metrics-temp\\n  end\\n  mv /tmp/metrics-temp /tmp/metrics\\n  sleep 300\\nend\\n\"],\"image\":\"giantswarm/tiny-tools\",\"imagePullPolicy\":\"Always\",\"name\":\"read-du\",\"volumeMounts\":[{\"mountPath\":\"/mnt/var\",\"name\":\"host-fs-var\",\"readOnly\":true},{\"mountPath\":\"/tmp\",\"name\":\"metrics\"}]},{\"command\":[\"caddy\",\"-port=9102\",\"-root=/var/www\"],\"image\":\"dockermuenster/caddy:0.9.3\",\"name\":\"caddy\",\"ports\":[{\"containerPort\":9102}],\"volumeMounts\":[{\"mountPath\":\"/var/www\",\"name\":\"metrics\"}]}],\"volumes\":[{\"hostPath\":{\"path\":\"/var\"},\"name\":\"host-fs-var\"},{\"emptyDir\":{\"medium\":\"Memory\"},\"name\":\"metrics\"}]}}}}\n"
    },
    "labels": {
      "app": "node-directory-size-metrics"
    },
    "name": "node-directory-size-metrics",
    "namespace": "monitoring"
  },
  "spec": {
    "revisionHistoryLimit": 10,
    "selector": {
      "matchLabels": {
        "app": "node-directory-size-metrics"
      }
    },
    "template": {
      "metadata": {
        "annotations": {
          "description": "This `Pod` provides metrics in Prometheus format about disk usage on the node.\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\nThe other container `caddy` just hands out the contents of that file on request on `/metrics` at port `9102` which are the defaults for Prometheus.\nThis `Pod` is scheduled on every node in the Kubernetes cluster.\nTo choose directories from the node to check just mount them on `read-du` below `/mnt`.\n",
          "prometheus.io/port": "9102",
          "prometheus.io/scrape": "true"
        },
        "creationTimestamp": null,
        "labels": {
          "app": "node-directory-size-metrics"
        }
      },
      "spec": {
        "containers": [
          {
            "command": [
              "fish",
              "--command",
              "touch /tmp/metrics-temp\nwhile true\n  for directory in (du --bytes --separate-dirs --threshold=100M /mnt)\n    echo $directory | read size path\n    echo \"node_directory_size_bytes{path=\\\"$path\\\"} $size\" \\\n      >> /tmp/metrics-temp\n  end\n  mv /tmp/metrics-temp /tmp/metrics\n  sleep 300\nend\n"
            ],
            "image": "giantswarm/tiny-tools",
            "imagePullPolicy": "Always",
            "name": "read-du",
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/mnt/var",
                "name": "host-fs-var",
                "readOnly": true
              },
              {
                "mountPath": "/tmp",
                "name": "metrics"
              }
            ]
          },
          {
            "command": [
              "caddy",
              "-port=9102",
              "-root=/var/www"
            ],
            "image": "dockermuenster/caddy:0.9.3",
            "imagePullPolicy": "IfNotPresent",
            "name": "caddy",
            "ports": [
              {
                "containerPort": 9102,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/www",
                "name": "metrics"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var"
            },
            "name": "host-fs-var"
          },
          {
            "emptyDir": {
              "medium": "Memory",
              "sizeLimit": "0"
            },
            "name": "metrics"
          }
        ]
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"name\":\"prometheus-node-exporter\",\"namespace\":\"monitoring\"},\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"name\":\"prometheus-node-exporter\"},\"spec\":{\"containers\":[{\"image\":\"prom/node-exporter:v0.14.0\",\"name\":\"prometheus-node-exporter\",\"ports\":[{\"containerPort\":9100,\"hostPort\":9100,\"name\":\"prom-node-exp\"}]}],\"hostNetwork\":true,\"hostPID\":true}}}}\n"
    },
    "labels": {
      "app": "prometheus",
      "component": "node-exporter"
    },
    "name": "prometheus-node-exporter",
    "namespace": "monitoring"
  },
  "spec": {
    "revisionHistoryLimit": 10,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "node-exporter"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "node-exporter"
        },
        "name": "prometheus-node-exporter"
      },
      "spec": {
        "containers": [
          {
            "image": "prom/node-exporter:v0.14.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus-node-exporter",
            "ports": [
              {
                "containerPort": 9100,
                "hostPort": 9100,
                "name": "prom-node-exp",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "hostNetwork": true,
        "hostPID": true,
        "schedulerName": "default-scheduler"
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"alertmanager\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"alertmanager\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"alertmanager\"},\"name\":\"alertmanager\"},\"spec\":{\"containers\":[{\"args\":[\"-config.file=/etc/alertmanager/config.yml\",\"-storage.path=/alertmanager\"],\"image\":\"quay.io/prometheus/alertmanager:v0.7.1\",\"name\":\"alertmanager\",\"ports\":[{\"containerPort\":9093,\"name\":\"alertmanager\"}],\"volumeMounts\":[{\"mountPath\":\"/etc/alertmanager\",\"name\":\"config-volume\"},{\"mountPath\":\"/etc/alertmanager-templates\",\"name\":\"templates-volume\"},{\"mountPath\":\"/alertmanager\",\"name\":\"alertmanager\"}]}],\"volumes\":[{\"configMap\":{\"name\":\"alertmanager\"},\"name\":\"config-volume\"},{\"configMap\":{\"name\":\"alertmanager-templates\"},\"name\":\"templates-volume\"},{\"emptyDir\":{},\"name\":\"alertmanager\"}]}}}}\n"
    },
    "labels": {
      "app": "alertmanager"
    },
    "name": "alertmanager",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "alertmanager"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "alertmanager"
        },
        "name": "alertmanager"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-config.file=/etc/alertmanager/config.yml",
              "-storage.path=/alertmanager"
            ],
            "image": "quay.io/prometheus/alertmanager:v0.7.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "alertmanager",
            "ports": [
              {
                "containerPort": 9093,
                "name": "alertmanager",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/alertmanager",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/alertmanager-templates",
                "name": "templates-volume"
              },
              {
                "mountPath": "/alertmanager",
                "name": "alertmanager"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager-templates"
            },
            "name": "templates-volume"
          },
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "alertmanager"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"grafana\",\"component\":\"core\"},\"name\":\"grafana-core\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"grafana\",\"component\":\"core\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"GF_AUTH_BASIC_ENABLED\",\"value\":\"true\"},{\"name\":\"GF_AUTH_ANONYMOUS_ENABLED\",\"value\":\"false\"}],\"image\":\"grafana/grafana:4.2.0\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"grafana-core\",\"readinessProbe\":{\"httpGet\":{\"path\":\"/login\",\"port\":3000}},\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/var\",\"name\":\"grafana-persistent-storage\"}]}],\"volumes\":[{\"emptyDir\":{},\"name\":\"grafana-persistent-storage\"}]}}}}\n"
    },
    "labels": {
      "app": "grafana",
      "component": "core"
    },
    "name": "grafana-core",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "grafana",
        "component": "core"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "grafana",
          "component": "core"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "GF_AUTH_BASIC_ENABLED",
                "value": "true"
              },
              {
                "name": "GF_AUTH_ANONYMOUS_ENABLED",
                "value": "false"
              }
            ],
            "image": "grafana/grafana:4.2.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "grafana-core",
            "readinessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/login",
                "port": 3000,
                "scheme": "HTTP"
              },
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var",
                "name": "grafana-persistent-storage"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "grafana-persistent-storage"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "run": "kibana"
    },
    "name": "kibana",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "run": "kibana"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "run": "kibana"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/kibana-x-pack",
            "imagePullPolicy": "IfNotPresent",
            "name": "kibana",
            "ports": [
              {
                "containerPort": 5601,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/kibana/kibana.yml",
                "name": "kibana-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "kibana-configmap"
            },
            "name": "kibana-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"kube-state-metrics\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":2,\"template\":{\"metadata\":{\"labels\":{\"app\":\"kube-state-metrics\"}},\"spec\":{\"containers\":[{\"image\":\"gcr.io/google_containers/kube-state-metrics:v0.5.0\",\"name\":\"kube-state-metrics\",\"ports\":[{\"containerPort\":8080}]}],\"serviceAccountName\":\"kube-state-metrics\"}}}}\n"
    },
    "labels": {
      "app": "kube-state-metrics"
    },
    "name": "kube-state-metrics",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "kube-state-metrics"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kube-state-metrics"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "gcr.io/google_containers/kube-state-metrics:v0.5.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "kube-state-metrics",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "kube-state-metrics",
        "serviceAccountName": "kube-state-metrics"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "run": "logstash"
    },
    "name": "logstash",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "run": "logstash"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "run": "logstash"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/logstash:6.0.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "logstash",
            "ports": [
              {
                "containerPort": 5044,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/home/administrator/",
                "name": "logstash-conf-properties"
              },
              {
                "mountPath": "/etc/logstash/",
                "name": "logstash-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logstash-conf-configmap"
            },
            "name": "logstash-conf-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logstash-properties-configmap"
            },
            "name": "logstash-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "4",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"prometheus\",\"component\":\"core\"},\"name\":\"prometheus-core\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"prometheus\",\"component\":\"core\"},\"name\":\"prometheus-main\"},\"spec\":{\"containers\":[{\"args\":[\"-storage.local.retention=12h\",\"-storage.local.memory-chunks=500000\",\"-config.file=/etc/prometheus/prometheus.yaml\",\"-alertmanager.url=http://alertmanager:9093/\"],\"image\":\"prom/prometheus:v1.7.0\",\"name\":\"prometheus\",\"ports\":[{\"containerPort\":9090,\"name\":\"webui\"}],\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"500M\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"500M\"}},\"volumeMounts\":[{\"mountPath\":\"/etc/prometheus\",\"name\":\"config-volume\"},{\"mountPath\":\"/etc/prometheus-rules\",\"name\":\"rules-volume\"}]}],\"serviceAccountName\":\"prometheus-k8s\",\"volumes\":[{\"configMap\":{\"name\":\"prometheus-core\"},\"name\":\"config-volume\"},{\"configMap\":{\"name\":\"prometheus-rules\"},\"name\":\"rules-volume\"}]}}}}\n"
    },
    "labels": {
      "app": "prometheus",
      "component": "core"
    },
    "name": "prometheus-core",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "700M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "alertmanager",
      "pod-template-hash": "4083012769"
    },
    "name": "alertmanager-4083012769",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "alertmanager",
        "uid": "8b664410-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "alertmanager",
        "pod-template-hash": "4083012769"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "alertmanager",
          "pod-template-hash": "4083012769"
        },
        "name": "alertmanager"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-config.file=/etc/alertmanager/config.yml",
              "-storage.path=/alertmanager"
            ],
            "image": "quay.io/prometheus/alertmanager:v0.7.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "alertmanager",
            "ports": [
              {
                "containerPort": 9093,
                "name": "alertmanager",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/alertmanager",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/alertmanager-templates",
                "name": "templates-volume"
              },
              {
                "mountPath": "/alertmanager",
                "name": "alertmanager"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager-templates"
            },
            "name": "templates-volume"
          },
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "alertmanager"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "grafana",
      "component": "core",
      "pod-template-hash": "4152035735"
    },
    "name": "grafana-core-4152035735",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "grafana-core",
        "uid": "8b7364fe-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "grafana",
        "component": "core",
        "pod-template-hash": "4152035735"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "grafana",
          "component": "core",
          "pod-template-hash": "4152035735"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "GF_AUTH_BASIC_ENABLED",
                "value": "true"
              },
              {
                "name": "GF_AUTH_ANONYMOUS_ENABLED",
                "value": "false"
              }
            ],
            "image": "grafana/grafana:4.2.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "grafana-core",
            "readinessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/login",
                "port": 3000,
                "scheme": "HTTP"
              },
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var",
                "name": "grafana-persistent-storage"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "grafana-persistent-storage"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "pod-template-hash": "3554334834",
      "run": "kibana"
    },
    "name": "kibana-3554334834",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kibana",
        "uid": "7e00865e-dcbd-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "pod-template-hash": "3554334834",
        "run": "kibana"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "pod-template-hash": "3554334834",
          "run": "kibana"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/kibana-x-pack",
            "imagePullPolicy": "IfNotPresent",
            "name": "kibana",
            "ports": [
              {
                "containerPort": 5601,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/kibana/kibana.yml",
                "name": "kibana-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "kibana-configmap"
            },
            "name": "kibana-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "2",
      "deployment.kubernetes.io/max-replicas": "3",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kube-state-metrics",
      "pod-template-hash": "810928288"
    },
    "name": "kube-state-metrics-810928288",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kube-state-metrics",
        "uid": "8b9ef709-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "kube-state-metrics",
        "pod-template-hash": "810928288"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kube-state-metrics",
          "pod-template-hash": "810928288"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "gcr.io/google_containers/kube-state-metrics:v0.5.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "kube-state-metrics",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "kube-state-metrics",
        "serviceAccountName": "kube-state-metrics"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "pod-template-hash": "1528882837",
      "run": "logstash"
    },
    "name": "logstash-1528882837",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "logstash",
        "uid": "67a800f2-dcba-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "pod-template-hash": "1528882837",
        "run": "logstash"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "pod-template-hash": "1528882837",
          "run": "logstash"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "virginvoyages-vxp-images.jfrog.io/logstash:6.0.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "logstash",
            "ports": [
              {
                "containerPort": 5044,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/home/administrator/",
                "name": "logstash-conf-properties"
              },
              {
                "mountPath": "/etc/logstash/",
                "name": "logstash-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logstash-conf-configmap"
            },
            "name": "logstash-conf-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logstash-properties-configmap"
            },
            "name": "logstash-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "170368795"
    },
    "name": "prometheus-core-170368795",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "8b99be54-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "170368795"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "170368795"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "700M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "3958872088"
    },
    "name": "prometheus-core-3958872088",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "8b99be54-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "3958872088"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "3958872088"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "In",
                      "values": [
                        "node1"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "500M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              },
              {
                "mountPath": "/prometheus/data",
                "name": "prometheus-data"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          },
          {
            "hostPath": {
              "path": "/mnt/efs"
            },
            "name": "prometheus-data"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3",
      "deployment.kubernetes.io/revision-history": "1"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "549408679"
    },
    "name": "prometheus-core-549408679",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "8b99be54-8e37-11e7-b6c9-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "549408679"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "549408679"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "500M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "config.yml": "\nglobal:\n   # The smarthost and SMTP sender used for mail notifications.\n  #smtp_smarthost: 'smtp.offic365.com:587'\n  #smtp_from: 'alert@decurtis.com'\n  #smtp_auth_username: 'alert'\n  #smtp_auth_password: 'BnVt0#123'\n  #smtp_require_tls: false\nroute:\n  group_by: ['alertname', 'cluster', 'service']\n  group_wait: 30s\n  group_interval: 30s\n  repeat_interval: 2m\n  receiver: Decurtis\n\n  routes:\n  - match:\n      severity: page\n    receiver: Decurtis\n    repeat_interval: 20m\n  #routes:\n  #- match:\n   #   severity: instancedown\n   # receiver: Embarkation\n    #repeat_interval: 2m\n  #routes:\n  #- match:\n      #severity: critical\n    #receiver: team-X-mails\n   # repeat_interval: 10s\n#  routes:\n # - match:\n  #    severity: emergency\n   # receiver: team-X-mails\n    #repeat_interval: 10s\n\n\nreceivers:\n#- name: 'Embarkation'\n # email_configs:\n  #- to:  Shashank.chaturvedi@decurtis.com\n   # from: ankit.rai@decurtis.com\n    #smarthost: smtp.office365.com:587\n    #auth_username: \"ankit.rai@decurtis.com\"\n    #auth_identity: \"ankit.rai@decurtis.com\"\n    #auth_password: \"Suku4835\"\n    #send_resolved: true\n    #require_tls: false\n- name: 'Decurtis'\n  email_configs:\n  - to:  aatif.maqsood@decurtis.com\n    from: ankit.rai@decurtis.com\n    smarthost: smtp.office365.com:587\n    auth_username: \"ankit.rai@decurtis.com\"\n    auth_identity: \"ankit.rai@decurtis.com\"\n    auth_password: \"Suku4835\"\n    #send_resolved: true\n    #require_tls: false\n  #pagerduty_configs:\n  #- service_key: 9e0aef4d60ba4566918a704138aeaa82"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"config.yml\":\"\\nglobal:\\n   # The smarthost and SMTP sender used for mail notifications.\\n  #smtp_smarthost: 'smtp.offic365.com:587'\\n  #smtp_from: 'alert@decurtis.com'\\n  #smtp_auth_username: 'alert'\\n  #smtp_auth_password: 'BnVt0#123'\\n  #smtp_require_tls: false\\nroute:\\n  group_by: ['alertname', 'cluster', 'service']\\n  group_wait: 30s\\n  group_interval: 30s\\n  repeat_interval: 2m\\n  receiver: Decurtis\\n\\n  routes:\\n  - match:\\n      severity: page\\n    receiver: Decurtis\\n    repeat_interval: 1s\\n  #routes:\\n  #- match:\\n   #   severity: instancedown\\n   # receiver: Embarkation\\n    #repeat_interval: 2m\\n  #routes:\\n  #- match:\\n      #severity: critical\\n    #receiver: team-X-mails\\n   # repeat_interval: 10s\\n#  routes:\\n # - match:\\n  #    severity: emergency\\n   # receiver: team-X-mails\\n    #repeat_interval: 10s\\n\\n\\nreceivers:\\n#- name: 'Embarkation'\\n # email_configs:\\n  #- to:  Shashank.chaturvedi@decurtis.com\\n   # from: ankit.rai@decurtis.com\\n    #smarthost: smtp.office365.com:587\\n    #auth_username: \\\"ankit.rai@decurtis.com\\\"\\n    #auth_identity: \\\"ankit.rai@decurtis.com\\\"\\n    #auth_password: \\\"Suku4835\\\"\\n    #send_resolved: true\\n    #require_tls: false\\n- name: 'Decurtis'\\n  email_configs:\\n  - to:  aatif.maqsood@decurtis.com\\n    from: ankit.rai@decurtis.com\\n    smarthost: smtp.office365.com:587\\n    auth_username: \\\"ankit.rai@decurtis.com\\\"\\n    auth_identity: \\\"ankit.rai@decurtis.com\\\"\\n    auth_password: \\\"Suku4835\\\"\\n    #send_resolved: true\\n    #require_tls: false\\n  #pagerduty_configs:\\n  #- service_key: 9e0aef4d60ba4566918a704138aeaa82\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"alertmanager\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "alertmanager",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "default.tmpl": "{{ define \"__alertmanager\" }}AlertManager{{ end }}\n{{ define \"__alertmanagerURL\" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver }}{{ end }}\n\n{{ define \"__subject\" }}[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join \" \" }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join \" \" }}{{ end }}){{ end }}{{ end }}\n{{ define \"__description\" }}{{ end }}\n\n{{ define \"__text_alert_list\" }}{{ range . }}Labels:\n{{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}Annotations:\n{{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}Source: {{ .GeneratorURL }}\n{{ end }}{{ end }}\n\n\n{{ define \"slack.default.title\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"slack.default.username\" }}{{ template \"__alertmanager\" . }}{{ end }}\n{{ define \"slack.default.fallback\" }}{{ template \"slack.default.title\" . }} | {{ template \"slack.default.titlelink\" . }}{{ end }}\n{{ define \"slack.default.pretext\" }}{{ end }}\n{{ define \"slack.default.titlelink\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n{{ define \"slack.default.iconemoji\" }}{{ end }}\n{{ define \"slack.default.iconurl\" }}{{ end }}\n{{ define \"slack.default.text\" }}{{ end }}\n\n\n{{ define \"hipchat.default.from\" }}{{ template \"__alertmanager\" . }}{{ end }}\n{{ define \"hipchat.default.message\" }}{{ template \"__subject\" . }}{{ end }}\n\n\n{{ define \"pagerduty.default.description\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"pagerduty.default.client\" }}{{ template \"__alertmanager\" . }}{{ end }}\n{{ define \"pagerduty.default.clientURL\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n{{ define \"pagerduty.default.instances\" }}{{ template \"__text_alert_list\" . }}{{ end }}\n\n\n{{ define \"opsgenie.default.message\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"opsgenie.default.description\" }}{{ .CommonAnnotations.SortedPairs.Values | join \" \" }}\n{{ if gt (len .Alerts.Firing) 0 -}}\nAlerts Firing:\n{{ template \"__text_alert_list\" .Alerts.Firing }}\n{{- end }}\n{{ if gt (len .Alerts.Resolved) 0 -}}\nAlerts Resolved:\n{{ template \"__text_alert_list\" .Alerts.Resolved }}\n{{- end }}\n{{- end }}\n{{ define \"opsgenie.default.source\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n\n\n{{ define \"victorops.default.message\" }}{{ template \"__subject\" . }} | {{ template \"__alertmanagerURL\" . }}{{ end }}\n{{ define \"victorops.default.from\" }}{{ template \"__alertmanager\" . }}{{ end }}\n\n\n{{ define \"email.default.subject\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"email.default.html\" }}\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<!--\nStyle and HTML derived from https://github.com/mailgun/transactional-email-templates\n\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Mailgun\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns=\"http://www.w3.org/1999/xhtml\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n<head style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n<meta name=\"viewport\" content=\"width=device-width\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n<title style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">{{ template \"__subject\" . }}</title>\n\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/EmailMessage\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; -webkit-font-smoothing: antialiased; -webkit-text-size-adjust: none; height: 100%; line-height: 1.6em; width: 100% !important; background-color: #f6f6f6; margin: 0; padding: 0;\" bgcolor=\"#f6f6f6\">\n\n<table style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; background-color: #f6f6f6; margin: 0;\" bgcolor=\"#f6f6f6\">\n  <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n    <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\" valign=\"top\"></td>\n    <td width=\"600\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; display: block !important; max-width: 600px !important; clear: both !important; width: 100% !important; margin: 0 auto; padding: 0;\" valign=\"top\">\n      <div style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; max-width: 600px; display: block; margin: 0 auto; padding: 0;\">\n        <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; border-radius: 3px; background-color: #fff; margin: 0; border: 1px solid #e9e9e9;\" bgcolor=\"#fff\">\n          <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n            <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 16px; vertical-align: top; color: #fff; font-weight: 500; text-align: center; border-radius: 3px 3px 0 0; background-color: #E6522C; margin: 0; padding: 20px;\" align=\"center\" bgcolor=\"#E6522C\" valign=\"top\">\n              {{ .Alerts | len }} alert{{ if gt (len .Alerts) 1 }}s{{ end }} for {{ range .GroupLabels.SortedPairs }}\n                {{ .Name }}={{ .Value }}\n              {{ end }}\n            </td>\n          </tr>\n          <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n            <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 10px;\" valign=\"top\">\n              <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <a href=\"{{ template \"__alertmanagerURL\" . }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #FFF; text-decoration: none; line-height: 2em; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 5px; text-transform: capitalize; background-color: #348eda; margin: 0; border-color: #348eda; border-style: solid; border-width: 10px 20px;\">View in {{ template \"__alertmanager\" . }}</a>\n                  </td>\n                </tr>\n                {{ if gt (len .Alerts.Firing) 0 }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">[{{ .Alerts.Firing | len }}] Firing</strong>\n                  </td>\n                </tr>\n                {{ end }}\n                {{ range .Alerts.Firing }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Labels</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ if gt (len .Annotations) 0 }}<strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Annotations</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    <a href=\"{{ .GeneratorURL }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\">Source</a><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                  </td>\n                </tr>\n                {{ end }}\n\n                {{ if gt (len .Alerts.Resolved) 0 }}\n                  {{ if gt (len .Alerts.Firing) 0 }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    <hr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    <br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                  </td>\n                </tr>\n                  {{ end }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">[{{ .Alerts.Resolved | len }}] Resolved</strong>\n                  </td>\n                </tr>\n                {{ end }}\n                {{ range .Alerts.Resolved }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Labels</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ if gt (len .Annotations) 0 }}<strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Annotations</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    <a href=\"{{ .GeneratorURL }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\">Source</a><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                  </td>\n                </tr>\n                {{ end }}\n              </table>\n            </td>\n          </tr>\n        </table>\n\n        <div style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; clear: both; color: #999; margin: 0; padding: 20px;\">\n          <table width=\"100%\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n            <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n              <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; vertical-align: top; text-align: center; color: #999; margin: 0; padding: 0 0 20px;\" align=\"center\" valign=\"top\"><a href=\"{{ .ExternalURL }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; color: #999; text-decoration: underline; margin: 0;\">Sent by {{ template \"__alertmanager\" . }}</a></td>\n            </tr>\n          </table>\n        </div></div>\n    </td>\n    <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\" valign=\"top\"></td>\n  </tr>\n</table>\n\n</body>\n</html>\n\n{{ end }}\n\n{{ define \"pushover.default.title\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"pushover.default.message\" }}{{ .CommonAnnotations.SortedPairs.Values | join \" \" }}\n{{ if gt (len .Alerts.Firing) 0 }}\nAlerts Firing:\n{{ template \"__text_alert_list\" .Alerts.Firing }}\n{{ end }}\n{{ if gt (len .Alerts.Resolved) 0 }}\nAlerts Resolved:\n{{ template \"__text_alert_list\" .Alerts.Resolved }}\n{{ end }}\n{{ end }}\n{{ define \"pushover.default.url\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n",
    "slack.tmpl": "{{ define \"slack.devops.text\" }}\n{{range .Alerts}}{{.Annotations.DESCRIPTION}}\n{{end}}\n{{ end }}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"default.tmpl\":\"{{ define \\\"__alertmanager\\\" }}AlertManager{{ end }}\\n{{ define \\\"__alertmanagerURL\\\" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver }}{{ end }}\\n\\n{{ define \\\"__subject\\\" }}[{{ .Status | toUpper }}{{ if eq .Status \\\"firing\\\" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join \\\" \\\" }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join \\\" \\\" }}{{ end }}){{ end }}{{ end }}\\n{{ define \\\"__description\\\" }}{{ end }}\\n\\n{{ define \\\"__text_alert_list\\\" }}{{ range . }}Labels:\\n{{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}\\n{{ end }}Annotations:\\n{{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}\\n{{ end }}Source: {{ .GeneratorURL }}\\n{{ end }}{{ end }}\\n\\n\\n{{ define \\\"slack.default.title\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"slack.default.username\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n{{ define \\\"slack.default.fallback\\\" }}{{ template \\\"slack.default.title\\\" . }} | {{ template \\\"slack.default.titlelink\\\" . }}{{ end }}\\n{{ define \\\"slack.default.pretext\\\" }}{{ end }}\\n{{ define \\\"slack.default.titlelink\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n{{ define \\\"slack.default.iconemoji\\\" }}{{ end }}\\n{{ define \\\"slack.default.iconurl\\\" }}{{ end }}\\n{{ define \\\"slack.default.text\\\" }}{{ end }}\\n\\n\\n{{ define \\\"hipchat.default.from\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n{{ define \\\"hipchat.default.message\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"pagerduty.default.description\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"pagerduty.default.client\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n{{ define \\\"pagerduty.default.clientURL\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n{{ define \\\"pagerduty.default.instances\\\" }}{{ template \\\"__text_alert_list\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"opsgenie.default.message\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"opsgenie.default.description\\\" }}{{ .CommonAnnotations.SortedPairs.Values | join \\\" \\\" }}\\n{{ if gt (len .Alerts.Firing) 0 -}}\\nAlerts Firing:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Firing }}\\n{{- end }}\\n{{ if gt (len .Alerts.Resolved) 0 -}}\\nAlerts Resolved:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Resolved }}\\n{{- end }}\\n{{- end }}\\n{{ define \\\"opsgenie.default.source\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"victorops.default.message\\\" }}{{ template \\\"__subject\\\" . }} | {{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n{{ define \\\"victorops.default.from\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"email.default.subject\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"email.default.html\\\" }}\\n\\u003c!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"\\u003e\\n\\u003c!--\\nStyle and HTML derived from https://github.com/mailgun/transactional-email-templates\\n\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2014 Mailgun\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n--\\u003e\\n\\u003chtml xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n\\u003chead style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n\\u003cmeta name=\\\"viewport\\\" content=\\\"width=device-width\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n\\u003cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n\\u003ctitle style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e{{ template \\\"__subject\\\" . }}\\u003c/title\\u003e\\n\\n\\u003c/head\\u003e\\n\\n\\u003cbody itemscope=\\\"\\\" itemtype=\\\"http://schema.org/EmailMessage\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; -webkit-font-smoothing: antialiased; -webkit-text-size-adjust: none; height: 100%; line-height: 1.6em; width: 100% !important; background-color: #f6f6f6; margin: 0; padding: 0;\\\" bgcolor=\\\"#f6f6f6\\\"\\u003e\\n\\n\\u003ctable style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; background-color: #f6f6f6; margin: 0;\\\" bgcolor=\\\"#f6f6f6\\\"\\u003e\\n  \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n    \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\\\" valign=\\\"top\\\"\\u003e\\u003c/td\\u003e\\n    \\u003ctd width=\\\"600\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; display: block !important; max-width: 600px !important; clear: both !important; width: 100% !important; margin: 0 auto; padding: 0;\\\" valign=\\\"top\\\"\\u003e\\n      \\u003cdiv style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; max-width: 600px; display: block; margin: 0 auto; padding: 0;\\\"\\u003e\\n        \\u003ctable width=\\\"100%\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; border-radius: 3px; background-color: #fff; margin: 0; border: 1px solid #e9e9e9;\\\" bgcolor=\\\"#fff\\\"\\u003e\\n          \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n            \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 16px; vertical-align: top; color: #fff; font-weight: 500; text-align: center; border-radius: 3px 3px 0 0; background-color: #E6522C; margin: 0; padding: 20px;\\\" align=\\\"center\\\" bgcolor=\\\"#E6522C\\\" valign=\\\"top\\\"\\u003e\\n              {{ .Alerts | len }} alert{{ if gt (len .Alerts) 1 }}s{{ end }} for {{ range .GroupLabels.SortedPairs }}\\n                {{ .Name }}={{ .Value }}\\n              {{ end }}\\n            \\u003c/td\\u003e\\n          \\u003c/tr\\u003e\\n          \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n            \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 10px;\\\" valign=\\\"top\\\"\\u003e\\n              \\u003ctable width=\\\"100%\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003ca href=\\\"{{ template \\\"__alertmanagerURL\\\" . }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #FFF; text-decoration: none; line-height: 2em; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 5px; text-transform: capitalize; background-color: #348eda; margin: 0; border-color: #348eda; border-style: solid; border-width: 10px 20px;\\\"\\u003eView in {{ template \\\"__alertmanager\\\" . }}\\u003c/a\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ if gt (len .Alerts.Firing) 0 }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e[{{ .Alerts.Firing | len }}] Firing\\u003c/strong\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n                {{ range .Alerts.Firing }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eLabels\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ if gt (len .Annotations) 0 }}\\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eAnnotations\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    \\u003ca href=\\\"{{ .GeneratorURL }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\\\"\\u003eSource\\u003c/a\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n\\n                {{ if gt (len .Alerts.Resolved) 0 }}\\n                  {{ if gt (len .Alerts.Firing) 0 }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    \\u003chr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    \\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                  {{ end }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e[{{ .Alerts.Resolved | len }}] Resolved\\u003c/strong\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n                {{ range .Alerts.Resolved }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eLabels\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ if gt (len .Annotations) 0 }}\\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eAnnotations\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    \\u003ca href=\\\"{{ .GeneratorURL }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\\\"\\u003eSource\\u003c/a\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n              \\u003c/table\\u003e\\n            \\u003c/td\\u003e\\n          \\u003c/tr\\u003e\\n        \\u003c/table\\u003e\\n\\n        \\u003cdiv style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; clear: both; color: #999; margin: 0; padding: 20px;\\\"\\u003e\\n          \\u003ctable width=\\\"100%\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n            \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n              \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; vertical-align: top; text-align: center; color: #999; margin: 0; padding: 0 0 20px;\\\" align=\\\"center\\\" valign=\\\"top\\\"\\u003e\\u003ca href=\\\"{{ .ExternalURL }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; color: #999; text-decoration: underline; margin: 0;\\\"\\u003eSent by {{ template \\\"__alertmanager\\\" . }}\\u003c/a\\u003e\\u003c/td\\u003e\\n            \\u003c/tr\\u003e\\n          \\u003c/table\\u003e\\n        \\u003c/div\\u003e\\u003c/div\\u003e\\n    \\u003c/td\\u003e\\n    \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\\\" valign=\\\"top\\\"\\u003e\\u003c/td\\u003e\\n  \\u003c/tr\\u003e\\n\\u003c/table\\u003e\\n\\n\\u003c/body\\u003e\\n\\u003c/html\\u003e\\n\\n{{ end }}\\n\\n{{ define \\\"pushover.default.title\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"pushover.default.message\\\" }}{{ .CommonAnnotations.SortedPairs.Values | join \\\" \\\" }}\\n{{ if gt (len .Alerts.Firing) 0 }}\\nAlerts Firing:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Firing }}\\n{{ end }}\\n{{ if gt (len .Alerts.Resolved) 0 }}\\nAlerts Resolved:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Resolved }}\\n{{ end }}\\n{{ end }}\\n{{ define \\\"pushover.default.url\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n\",\"slack.tmpl\":\"{{ define \\\"slack.devops.text\\\" }}\\n{{range .Alerts}}{{.Annotations.DESCRIPTION}}\\n{{end}}\\n{{ end }}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"alertmanager-templates\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "alertmanager-templates",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "LOGSTASH_HOSTS": "logstash:5044"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "environment-variables",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "grafana-net-2-dashboard.json": "{\n  \"__inputs\": [{\n    \"name\": \"DS_PROMETHEUS\",\n    \"label\": \"Prometheus\",\n    \"description\": \"\",\n    \"type\": \"datasource\",\n    \"pluginId\": \"prometheus\",\n    \"pluginName\": \"Prometheus\"\n  }],\n  \"__requires\": [{\n    \"type\": \"panel\",\n    \"id\": \"singlestat\",\n    \"name\": \"Singlestat\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"panel\",\n    \"id\": \"text\",\n    \"name\": \"Text\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"panel\",\n    \"id\": \"graph\",\n    \"name\": \"Graph\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"grafana\",\n    \"id\": \"grafana\",\n    \"name\": \"Grafana\",\n    \"version\": \"3.1.0\"\n  }, {\n    \"type\": \"datasource\",\n    \"id\": \"prometheus\",\n    \"name\": \"Prometheus\",\n    \"version\": \"1.0.0\"\n  }],\n  \"id\": null,\n  \"title\": \"Prometheus Stats\",\n  \"tags\": [],\n  \"style\": \"dark\",\n  \"timezone\": \"browser\",\n  \"editable\": true,\n  \"hideControls\": true,\n  \"sharedCrosshair\": false,\n  \"rows\": [{\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": 178,\n    \"panels\": [{\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\"],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 1,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"s\",\n      \"id\": 5,\n      \"interval\": null,\n      \"links\": [],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"span\": 3,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"(time() - process_start_time_seconds{job=\\\"prometheus\\\"})\",\n        \"intervalFactor\": 2,\n        \"refId\": \"A\",\n        \"step\": 4\n      }],\n      \"thresholds\": \"\",\n      \"title\": \"Uptime\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\",\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"to\": \"null\",\n        \"text\": \"N/A\"\n      }],\n      \"mappingType\": 1,\n      \"gauge\": {\n        \"show\": false,\n        \"minValue\": 0,\n        \"maxValue\": 100,\n        \"thresholdMarkers\": true,\n        \"thresholdLabels\": false\n      }\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\"],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"id\": 6,\n      \"interval\": null,\n      \"links\": [],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"span\": 3,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": true\n      },\n      \"targets\": [{\n        \"expr\": \"prometheus_local_storage_memory_series\",\n        \"intervalFactor\": 2,\n        \"refId\": \"A\",\n        \"step\": 4\n      }],\n      \"thresholds\": \"1,5\",\n      \"title\": \"Local Storage Memory Series\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"70%\",\n      \"valueMaps\": [],\n      \"valueName\": \"current\",\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"to\": \"null\",\n        \"text\": \"N/A\"\n      }],\n      \"mappingType\": 1,\n      \"gauge\": {\n        \"show\": false,\n        \"minValue\": 0,\n        \"maxValue\": 100,\n        \"thresholdMarkers\": true,\n        \"thresholdLabels\": false\n      }\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\"],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"id\": 7,\n      \"interval\": null,\n      \"links\": [],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"span\": 3,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": true\n      },\n      \"targets\": [{\n        \"expr\": \"prometheus_local_storage_indexing_queue_length\",\n        \"intervalFactor\": 2,\n        \"refId\": \"A\",\n        \"step\": 4\n      }],\n      \"thresholds\": \"500,4000\",\n      \"title\": \"Interal Storage Queue Length\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"70%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"Empty\",\n        \"value\": \"0\"\n      }],\n      \"valueName\": \"current\",\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"to\": \"null\",\n        \"text\": \"N/A\"\n      }],\n      \"mappingType\": 1,\n      \"gauge\": {\n        \"show\": false,\n        \"minValue\": 0,\n        \"maxValue\": 100,\n        \"thresholdMarkers\": true,\n        \"thresholdLabels\": false\n      }\n    }, {\n      \"content\": \"<img src=\\\"http://prometheus.io/assets/prometheus_logo_grey.svg\\\" alt=\\\"Prometheus logo\\\" style=\\\"height: 40px;\\\">\\n<span style=\\\"font-family: 'Open Sans', 'Helvetica Neue', Helvetica; font-size: 25px;vertical-align: text-top;color: #bbbfc2;margin-left: 10px;\\\">Prometheus</span>\\n\\n<p style=\\\"margin-top: 10px;\\\">You're using Prometheus, an open-source systems monitoring and alerting toolkit originally built at SoundCloud. For more information, check out the <a href=\\\"http://www.grafana.org/\\\">Grafana</a> and <a href=\\\"http://prometheus.io/\\\">Prometheus</a> projects.</p>\",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 9,\n      \"links\": [],\n      \"mode\": \"html\",\n      \"span\": 3,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": 227,\n    \"panels\": [{\n      \"aliasColors\": {\n        \"prometheus\": \"#C15C17\",\n        \"{instance=\\\"localhost:9090\\\",job=\\\"prometheus\\\"}\": \"#C15C17\"\n      },\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 3,\n      \"legend\": {\n        \"avg\": false,\n        \"current\": false,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 9,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"rate(prometheus_local_storage_ingested_samples_total[5m])\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{job}}\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Samples ingested (rate-5m)\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"content\": \"#### Samples Ingested\\nThis graph displays the count of samples ingested by the Prometheus server, as measured over the last 5 minutes, per time series in the range vector. When troubleshooting an issue on IRC or Github, this is often the first stat requested by the Prometheus team. \",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 8,\n      \"links\": [],\n      \"mode\": \"markdown\",\n      \"span\": 2.995914043583536,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"aliasColors\": {\n        \"prometheus\": \"#F9BA8F\",\n        \"{instance=\\\"localhost:9090\\\",interval=\\\"5s\\\",job=\\\"prometheus\\\"}\": \"#F9BA8F\"\n      },\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 2,\n      \"legend\": {\n        \"avg\": false,\n        \"current\": false,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 5,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"rate(prometheus_target_interval_length_seconds_count[5m])\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{job}}\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Target Scrapes (last 5m)\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 14,\n      \"legend\": {\n        \"avg\": false,\n        \"current\": false,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 4,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"prometheus_target_interval_length_seconds{quantile!=\\\"0.01\\\", quantile!=\\\"0.05\\\"}\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{quantile}} ({{interval}})\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Scrape Duration\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"content\": \"#### Scrapes\\nPrometheus scrapes metrics from instrumented jobs, either directly or via an intermediary push gateway for short-lived jobs. Target scrapes will show how frequently targets are scraped, as measured over the last 5 minutes, per time series in the range vector. Scrape Duration will show how long the scrapes are taking, with percentiles available as series. \",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 11,\n      \"links\": [],\n      \"mode\": \"markdown\",\n      \"span\": 3,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": null,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 12,\n      \"legend\": {\n        \"alignAsTable\": false,\n        \"avg\": false,\n        \"current\": false,\n        \"hideEmpty\": true,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 9,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"prometheus_evaluator_duration_milliseconds{quantile!=\\\"0.01\\\", quantile!=\\\"0.05\\\"}\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{quantile}}\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Rule Eval Duration\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"percentunit\",\n        \"label\": \"\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"content\": \"#### Rule Evaluation Duration\\nThis graph panel plots the duration for all evaluations to execute. The 50th percentile, 90th percentile and 99th percentile are shown as three separate series to help identify outliers that may be skewing the data.\",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 15,\n      \"links\": [],\n      \"mode\": \"markdown\",\n      \"span\": 3,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }],\n  \"time\": {\n    \"from\": \"now-5m\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"now\": true,\n    \"refresh_intervals\": [\"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\"],\n    \"time_options\": [\"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\"]\n  },\n  \"templating\": {\n    \"list\": []\n  },\n  \"annotations\": {\n    \"list\": []\n  },\n  \"refresh\": false,\n  \"schemaVersion\": 12,\n  \"version\": 0,\n  \"links\": [{\n    \"icon\": \"info\",\n    \"tags\": [],\n    \"targetBlank\": true,\n    \"title\": \"Grafana Docs\",\n    \"tooltip\": \"\",\n    \"type\": \"link\",\n    \"url\": \"http://www.grafana.org/docs\"\n  }, {\n    \"icon\": \"info\",\n    \"tags\": [],\n    \"targetBlank\": true,\n    \"title\": \"Prometheus Docs\",\n    \"type\": \"link\",\n    \"url\": \"http://prometheus.io/docs/introduction/overview/\"\n  }],\n  \"gnetId\": 2,\n  \"description\": \"The  official, pre-built Prometheus Stats Dashboard.\"\n}\n",
    "grafana-net-737-dashboard.json": "{\n  \"__inputs\": [{\n    \"name\": \"DS_PROMETHEUS\",\n    \"label\": \"prometheus\",\n    \"description\": \"\",\n    \"type\": \"datasource\",\n    \"pluginId\": \"prometheus\",\n    \"pluginName\": \"Prometheus\"\n  }],\n  \"__requires\": [{\n    \"type\": \"panel\",\n    \"id\": \"singlestat\",\n    \"name\": \"Singlestat\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"panel\",\n    \"id\": \"graph\",\n    \"name\": \"Graph\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"grafana\",\n    \"id\": \"grafana\",\n    \"name\": \"Grafana\",\n    \"version\": \"3.1.0\"\n  }, {\n    \"type\": \"datasource\",\n    \"id\": \"prometheus\",\n    \"name\": \"Prometheus\",\n    \"version\": \"1.0.0\"\n  }],\n  \"id\": null,\n  \"title\": \"Kubernetes Pod Resources\",\n  \"description\": \"Shows resource usage of Kubernetes pods.\",\n  \"tags\": [\n    \"kubernetes\"\n  ],\n  \"style\": \"dark\",\n  \"timezone\": \"browser\",\n  \"editable\": true,\n  \"hideControls\": false,\n  \"sharedCrosshair\": false,\n  \"rows\": [{\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"percent\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": true,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"180px\",\n      \"id\": 4,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 4,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (container_memory_working_set_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}) / sum (machine_memory_bytes{instance=~\\\"^$instance$\\\"}) * 100\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"thresholds\": \"65, 90\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Memory Working Set\",\n      \"transparent\": false,\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"percent\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": true,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"180px\",\n      \"id\": 6,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 4,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}[1m])) / sum (machine_cpu_cores{instance=~\\\"^$instance$\\\"}) * 100\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"65, 90\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Cpu Usage\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"percent\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": true,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"180px\",\n      \"id\": 7,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 4,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(container_fs_usage_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}) / sum(container_fs_limit_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}) * 100\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"legendFormat\": \"\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"65, 90\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Filesystem Usage\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 9,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"20%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"20%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(container_memory_working_set_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Used\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 10,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (machine_memory_bytes{instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Total\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 11,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \" cores\",\n      \"postfixFontSize\": \"30%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (rate (container_cpu_usage_seconds_total{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}[1m]))\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Used\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 12,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \" cores\",\n      \"postfixFontSize\": \"30%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (machine_cpu_cores{instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Total\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 13,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(container_fs_usage_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Used\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 14,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (container_fs_limit_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Total\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\",\n        \"thresholdLine\": false\n      },\n      \"height\": \"200px\",\n      \"id\": 32,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": 200,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum(rate(container_network_receive_bytes_total{instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m]))\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"receive\",\n        \"metric\": \"network\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }, {\n        \"expr\": \"- sum(rate(container_network_transmit_bytes_total{instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m]))\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"transmit\",\n        \"metric\": \"network\",\n        \"refId\": \"B\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Network\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"cumulative\"\n      },\n      \"transparent\": false,\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"Bps\",\n        \"label\": \"transmit / receive\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"Bps\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }],\n    \"showTitle\": true,\n    \"title\": \"all pods\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 3,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 0,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"height\": \"\",\n      \"id\": 17,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": null,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum(rate(container_cpu_usage_seconds_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m])) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }}\",\n        \"metric\": \"container_cpu\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Cpu Usage\",\n      \"tooltip\": {\n        \"msResolution\": true,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"transparent\": false,\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"none\",\n        \"label\": \"cores\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 0,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 33,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": null,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum (container_memory_working_set_bytes{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }}\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Memory Working Set\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"bytes\",\n        \"label\": \"used\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 16,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": 200,\n        \"sort\": \"avg\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum (rate (container_network_receive_bytes_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m])) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }} < in\",\n        \"metric\": \"network\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }, {\n        \"expr\": \"- sum (rate (container_network_transmit_bytes_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m])) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }} > out\",\n        \"metric\": \"network\",\n        \"refId\": \"B\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Network\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"Bps\",\n        \"label\": \"transmit / receive\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 34,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": 200,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum(container_fs_usage_bytes{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }}\",\n        \"metric\": \"network\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Filesystem\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"bytes\",\n        \"label\": \"used\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }],\n    \"showTitle\": true,\n    \"title\": \"each pod\"\n  }],\n  \"time\": {\n    \"from\": \"now-3d\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"refresh_intervals\": [\n      \"5s\",\n      \"10s\",\n      \"30s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\",\n      \"1h\",\n      \"2h\",\n      \"1d\"\n    ],\n    \"time_options\": [\n      \"5m\",\n      \"15m\",\n      \"1h\",\n      \"6h\",\n      \"12h\",\n      \"24h\",\n      \"2d\",\n      \"7d\",\n      \"30d\"\n    ]\n  },\n  \"templating\": {\n    \"list\": [{\n      \"allValue\": \".*\",\n      \"current\": {},\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"hide\": 0,\n      \"includeAll\": true,\n      \"label\": \"Instance\",\n      \"multi\": false,\n      \"name\": \"instance\",\n      \"options\": [],\n      \"query\": \"label_values(instance)\",\n      \"refresh\": 1,\n      \"regex\": \"\",\n      \"type\": \"query\"\n    }, {\n      \"current\": {},\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"hide\": 0,\n      \"includeAll\": true,\n      \"label\": \"Namespace\",\n      \"multi\": true,\n      \"name\": \"namespace\",\n      \"options\": [],\n      \"query\": \"label_values(namespace)\",\n      \"refresh\": 1,\n      \"regex\": \"\",\n      \"type\": \"query\"\n    }]\n  },\n  \"annotations\": {\n    \"list\": []\n  },\n  \"refresh\": false,\n  \"schemaVersion\": 12,\n  \"version\": 8,\n  \"links\": [],\n  \"gnetId\": 737\n}\n",
    "prometheus-datasource.json": "{\n  \"name\": \"prometheus\",\n  \"type\": \"prometheus\",\n  \"url\": \"http://prometheus:9090\",\n  \"access\": \"proxy\",\n  \"basicAuth\": false\n}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"grafana-net-2-dashboard.json\":\"{\\n  \\\"__inputs\\\": [{\\n    \\\"name\\\": \\\"DS_PROMETHEUS\\\",\\n    \\\"label\\\": \\\"Prometheus\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"pluginId\\\": \\\"prometheus\\\",\\n    \\\"pluginName\\\": \\\"Prometheus\\\"\\n  }],\\n  \\\"__requires\\\": [{\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"singlestat\\\",\\n    \\\"name\\\": \\\"Singlestat\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"text\\\",\\n    \\\"name\\\": \\\"Text\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"graph\\\",\\n    \\\"name\\\": \\\"Graph\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"grafana\\\",\\n    \\\"id\\\": \\\"grafana\\\",\\n    \\\"name\\\": \\\"Grafana\\\",\\n    \\\"version\\\": \\\"3.1.0\\\"\\n  }, {\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"id\\\": \\\"prometheus\\\",\\n    \\\"name\\\": \\\"Prometheus\\\",\\n    \\\"version\\\": \\\"1.0.0\\\"\\n  }],\\n  \\\"id\\\": null,\\n  \\\"title\\\": \\\"Prometheus Stats\\\",\\n  \\\"tags\\\": [],\\n  \\\"style\\\": \\\"dark\\\",\\n  \\\"timezone\\\": \\\"browser\\\",\\n  \\\"editable\\\": true,\\n  \\\"hideControls\\\": true,\\n  \\\"sharedCrosshair\\\": false,\\n  \\\"rows\\\": [{\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": 178,\\n    \\\"panels\\\": [{\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\\"rgba(245, 54, 54, 0.9)\\\", \\\"rgba(237, 129, 40, 0.89)\\\", \\\"rgba(50, 172, 45, 0.97)\\\"],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 1,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"s\\\",\\n      \\\"id\\\": 5,\\n      \\\"interval\\\": null,\\n      \\\"links\\\": [],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"span\\\": 3,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"(time() - process_start_time_seconds{job=\\\\\\\"prometheus\\\\\\\"})\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 4\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"title\\\": \\\"Uptime\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\",\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"to\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\"\\n      }],\\n      \\\"mappingType\\\": 1,\\n      \\\"gauge\\\": {\\n        \\\"show\\\": false,\\n        \\\"minValue\\\": 0,\\n        \\\"maxValue\\\": 100,\\n        \\\"thresholdMarkers\\\": true,\\n        \\\"thresholdLabels\\\": false\\n      }\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\\"rgba(50, 172, 45, 0.97)\\\", \\\"rgba(237, 129, 40, 0.89)\\\", \\\"rgba(245, 54, 54, 0.9)\\\"],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"id\\\": 6,\\n      \\\"interval\\\": null,\\n      \\\"links\\\": [],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"span\\\": 3,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": true\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_local_storage_memory_series\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 4\\n      }],\\n      \\\"thresholds\\\": \\\"1,5\\\",\\n      \\\"title\\\": \\\"Local Storage Memory Series\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"70%\\\",\\n      \\\"valueMaps\\\": [],\\n      \\\"valueName\\\": \\\"current\\\",\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"to\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\"\\n      }],\\n      \\\"mappingType\\\": 1,\\n      \\\"gauge\\\": {\\n        \\\"show\\\": false,\\n        \\\"minValue\\\": 0,\\n        \\\"maxValue\\\": 100,\\n        \\\"thresholdMarkers\\\": true,\\n        \\\"thresholdLabels\\\": false\\n      }\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\\"rgba(50, 172, 45, 0.97)\\\", \\\"rgba(237, 129, 40, 0.89)\\\", \\\"rgba(245, 54, 54, 0.9)\\\"],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"id\\\": 7,\\n      \\\"interval\\\": null,\\n      \\\"links\\\": [],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"span\\\": 3,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": true\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_local_storage_indexing_queue_length\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 4\\n      }],\\n      \\\"thresholds\\\": \\\"500,4000\\\",\\n      \\\"title\\\": \\\"Interal Storage Queue Length\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"70%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"Empty\\\",\\n        \\\"value\\\": \\\"0\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\",\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"to\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\"\\n      }],\\n      \\\"mappingType\\\": 1,\\n      \\\"gauge\\\": {\\n        \\\"show\\\": false,\\n        \\\"minValue\\\": 0,\\n        \\\"maxValue\\\": 100,\\n        \\\"thresholdMarkers\\\": true,\\n        \\\"thresholdLabels\\\": false\\n      }\\n    }, {\\n      \\\"content\\\": \\\"\\u003cimg src=\\\\\\\"http://prometheus.io/assets/prometheus_logo_grey.svg\\\\\\\" alt=\\\\\\\"Prometheus logo\\\\\\\" style=\\\\\\\"height: 40px;\\\\\\\"\\u003e\\\\n\\u003cspan style=\\\\\\\"font-family: 'Open Sans', 'Helvetica Neue', Helvetica; font-size: 25px;vertical-align: text-top;color: #bbbfc2;margin-left: 10px;\\\\\\\"\\u003ePrometheus\\u003c/span\\u003e\\\\n\\\\n\\u003cp style=\\\\\\\"margin-top: 10px;\\\\\\\"\\u003eYou're using Prometheus, an open-source systems monitoring and alerting toolkit originally built at SoundCloud. For more information, check out the \\u003ca href=\\\\\\\"http://www.grafana.org/\\\\\\\"\\u003eGrafana\\u003c/a\\u003e and \\u003ca href=\\\\\\\"http://prometheus.io/\\\\\\\"\\u003ePrometheus\\u003c/a\\u003e projects.\\u003c/p\\u003e\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 9,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"html\\\",\\n      \\\"span\\\": 3,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": 227,\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {\\n        \\\"prometheus\\\": \\\"#C15C17\\\",\\n        \\\"{instance=\\\\\\\"localhost:9090\\\\\\\",job=\\\\\\\"prometheus\\\\\\\"}\\\": \\\"#C15C17\\\"\\n      },\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 3,\\n      \\\"legend\\\": {\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 2,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 9,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"rate(prometheus_local_storage_ingested_samples_total[5m])\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{job}}\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Samples ingested (rate-5m)\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"content\\\": \\\"#### Samples Ingested\\\\nThis graph displays the count of samples ingested by the Prometheus server, as measured over the last 5 minutes, per time series in the range vector. When troubleshooting an issue on IRC or Github, this is often the first stat requested by the Prometheus team. \\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 8,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"markdown\\\",\\n      \\\"span\\\": 2.995914043583536,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {\\n        \\\"prometheus\\\": \\\"#F9BA8F\\\",\\n        \\\"{instance=\\\\\\\"localhost:9090\\\\\\\",interval=\\\\\\\"5s\\\\\\\",job=\\\\\\\"prometheus\\\\\\\"}\\\": \\\"#F9BA8F\\\"\\n      },\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 2,\\n      \\\"legend\\\": {\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 5,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"rate(prometheus_target_interval_length_seconds_count[5m])\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{job}}\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Target Scrapes (last 5m)\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 14,\\n      \\\"legend\\\": {\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 4,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_target_interval_length_seconds{quantile!=\\\\\\\"0.01\\\\\\\", quantile!=\\\\\\\"0.05\\\\\\\"}\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{quantile}} ({{interval}})\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Scrape Duration\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"content\\\": \\\"#### Scrapes\\\\nPrometheus scrapes metrics from instrumented jobs, either directly or via an intermediary push gateway for short-lived jobs. Target scrapes will show how frequently targets are scraped, as measured over the last 5 minutes, per time series in the range vector. Scrape Duration will show how long the scrapes are taking, with percentiles available as series. \\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 11,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"markdown\\\",\\n      \\\"span\\\": 3,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": null,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 12,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": false,\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"hideEmpty\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 9,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_evaluator_duration_milliseconds{quantile!=\\\\\\\"0.01\\\\\\\", quantile!=\\\\\\\"0.05\\\\\\\"}\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{quantile}}\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Rule Eval Duration\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"percentunit\\\",\\n        \\\"label\\\": \\\"\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"content\\\": \\\"#### Rule Evaluation Duration\\\\nThis graph panel plots the duration for all evaluations to execute. The 50th percentile, 90th percentile and 99th percentile are shown as three separate series to help identify outliers that may be skewing the data.\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 15,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"markdown\\\",\\n      \\\"span\\\": 3,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }],\\n  \\\"time\\\": {\\n    \\\"from\\\": \\\"now-5m\\\",\\n    \\\"to\\\": \\\"now\\\"\\n  },\\n  \\\"timepicker\\\": {\\n    \\\"now\\\": true,\\n    \\\"refresh_intervals\\\": [\\\"5s\\\", \\\"10s\\\", \\\"30s\\\", \\\"1m\\\", \\\"5m\\\", \\\"15m\\\", \\\"30m\\\", \\\"1h\\\", \\\"2h\\\", \\\"1d\\\"],\\n    \\\"time_options\\\": [\\\"5m\\\", \\\"15m\\\", \\\"1h\\\", \\\"6h\\\", \\\"12h\\\", \\\"24h\\\", \\\"2d\\\", \\\"7d\\\", \\\"30d\\\"]\\n  },\\n  \\\"templating\\\": {\\n    \\\"list\\\": []\\n  },\\n  \\\"annotations\\\": {\\n    \\\"list\\\": []\\n  },\\n  \\\"refresh\\\": false,\\n  \\\"schemaVersion\\\": 12,\\n  \\\"version\\\": 0,\\n  \\\"links\\\": [{\\n    \\\"icon\\\": \\\"info\\\",\\n    \\\"tags\\\": [],\\n    \\\"targetBlank\\\": true,\\n    \\\"title\\\": \\\"Grafana Docs\\\",\\n    \\\"tooltip\\\": \\\"\\\",\\n    \\\"type\\\": \\\"link\\\",\\n    \\\"url\\\": \\\"http://www.grafana.org/docs\\\"\\n  }, {\\n    \\\"icon\\\": \\\"info\\\",\\n    \\\"tags\\\": [],\\n    \\\"targetBlank\\\": true,\\n    \\\"title\\\": \\\"Prometheus Docs\\\",\\n    \\\"type\\\": \\\"link\\\",\\n    \\\"url\\\": \\\"http://prometheus.io/docs/introduction/overview/\\\"\\n  }],\\n  \\\"gnetId\\\": 2,\\n  \\\"description\\\": \\\"The  official, pre-built Prometheus Stats Dashboard.\\\"\\n}\\n\",\"grafana-net-737-dashboard.json\":\"{\\n  \\\"__inputs\\\": [{\\n    \\\"name\\\": \\\"DS_PROMETHEUS\\\",\\n    \\\"label\\\": \\\"prometheus\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"pluginId\\\": \\\"prometheus\\\",\\n    \\\"pluginName\\\": \\\"Prometheus\\\"\\n  }],\\n  \\\"__requires\\\": [{\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"singlestat\\\",\\n    \\\"name\\\": \\\"Singlestat\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"graph\\\",\\n    \\\"name\\\": \\\"Graph\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"grafana\\\",\\n    \\\"id\\\": \\\"grafana\\\",\\n    \\\"name\\\": \\\"Grafana\\\",\\n    \\\"version\\\": \\\"3.1.0\\\"\\n  }, {\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"id\\\": \\\"prometheus\\\",\\n    \\\"name\\\": \\\"Prometheus\\\",\\n    \\\"version\\\": \\\"1.0.0\\\"\\n  }],\\n  \\\"id\\\": null,\\n  \\\"title\\\": \\\"Kubernetes Pod Resources\\\",\\n  \\\"description\\\": \\\"Shows resource usage of Kubernetes pods.\\\",\\n  \\\"tags\\\": [\\n    \\\"kubernetes\\\"\\n  ],\\n  \\\"style\\\": \\\"dark\\\",\\n  \\\"timezone\\\": \\\"browser\\\",\\n  \\\"editable\\\": true,\\n  \\\"hideControls\\\": false,\\n  \\\"sharedCrosshair\\\": false,\\n  \\\"rows\\\": [{\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"percent\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": true,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"180px\\\",\\n      \\\"id\\\": 4,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 4,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (container_memory_working_set_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}) / sum (machine_memory_bytes{instance=~\\\\\\\"^$instance$\\\\\\\"}) * 100\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"thresholds\\\": \\\"65, 90\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Memory Working Set\\\",\\n      \\\"transparent\\\": false,\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"percent\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": true,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"180px\\\",\\n      \\\"id\\\": 6,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 4,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(rate(container_cpu_usage_seconds_total{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}[1m])) / sum (machine_cpu_cores{instance=~\\\\\\\"^$instance$\\\\\\\"}) * 100\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"65, 90\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Cpu Usage\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"percent\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": true,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"180px\\\",\\n      \\\"id\\\": 7,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 4,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_fs_usage_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}) / sum(container_fs_limit_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}) * 100\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"legendFormat\\\": \\\"\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"65, 90\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Filesystem Usage\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 9,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"20%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"20%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_memory_working_set_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Used\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 10,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (machine_memory_bytes{instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Total\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 11,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\" cores\\\",\\n      \\\"postfixFontSize\\\": \\\"30%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (rate (container_cpu_usage_seconds_total{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}[1m]))\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Used\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 12,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\" cores\\\",\\n      \\\"postfixFontSize\\\": \\\"30%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (machine_cpu_cores{instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Total\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 13,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_fs_usage_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Used\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 14,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (container_fs_limit_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Total\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\",\\n        \\\"thresholdLine\\\": false\\n      },\\n      \\\"height\\\": \\\"200px\\\",\\n      \\\"id\\\": 32,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": 200,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(rate(container_network_receive_bytes_total{instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m]))\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"receive\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }, {\\n        \\\"expr\\\": \\\"- sum(rate(container_network_transmit_bytes_total{instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m]))\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"transmit\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"B\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Network\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": true,\\n        \\\"sort\\\": 0,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"transparent\\\": false,\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"Bps\\\",\\n        \\\"label\\\": \\\"transmit / receive\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"Bps\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }],\\n    \\\"showTitle\\\": true,\\n    \\\"title\\\": \\\"all pods\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 3,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 0,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"height\\\": \\\"\\\",\\n      \\\"id\\\": 17,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": null,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(rate(container_cpu_usage_seconds_total{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m])) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }}\\\",\\n        \\\"metric\\\": \\\"container_cpu\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Cpu Usage\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": true,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"transparent\\\": false,\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"none\\\",\\n        \\\"label\\\": \\\"cores\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 0,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 33,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": null,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"null\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (container_memory_working_set_bytes{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }}\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Memory Working Set\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"bytes\\\",\\n        \\\"label\\\": \\\"used\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 16,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": 200,\\n        \\\"sort\\\": \\\"avg\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"null\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (rate (container_network_receive_bytes_total{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m])) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }} \\u003c in\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }, {\\n        \\\"expr\\\": \\\"- sum (rate (container_network_transmit_bytes_total{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m])) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }} \\u003e out\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"B\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Network\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"Bps\\\",\\n        \\\"label\\\": \\\"transmit / receive\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 34,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": 200,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"null\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_fs_usage_bytes{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }}\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Filesystem\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"bytes\\\",\\n        \\\"label\\\": \\\"used\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }],\\n    \\\"showTitle\\\": true,\\n    \\\"title\\\": \\\"each pod\\\"\\n  }],\\n  \\\"time\\\": {\\n    \\\"from\\\": \\\"now-3d\\\",\\n    \\\"to\\\": \\\"now\\\"\\n  },\\n  \\\"timepicker\\\": {\\n    \\\"refresh_intervals\\\": [\\n      \\\"5s\\\",\\n      \\\"10s\\\",\\n      \\\"30s\\\",\\n      \\\"1m\\\",\\n      \\\"5m\\\",\\n      \\\"15m\\\",\\n      \\\"30m\\\",\\n      \\\"1h\\\",\\n      \\\"2h\\\",\\n      \\\"1d\\\"\\n    ],\\n    \\\"time_options\\\": [\\n      \\\"5m\\\",\\n      \\\"15m\\\",\\n      \\\"1h\\\",\\n      \\\"6h\\\",\\n      \\\"12h\\\",\\n      \\\"24h\\\",\\n      \\\"2d\\\",\\n      \\\"7d\\\",\\n      \\\"30d\\\"\\n    ]\\n  },\\n  \\\"templating\\\": {\\n    \\\"list\\\": [{\\n      \\\"allValue\\\": \\\".*\\\",\\n      \\\"current\\\": {},\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"hide\\\": 0,\\n      \\\"includeAll\\\": true,\\n      \\\"label\\\": \\\"Instance\\\",\\n      \\\"multi\\\": false,\\n      \\\"name\\\": \\\"instance\\\",\\n      \\\"options\\\": [],\\n      \\\"query\\\": \\\"label_values(instance)\\\",\\n      \\\"refresh\\\": 1,\\n      \\\"regex\\\": \\\"\\\",\\n      \\\"type\\\": \\\"query\\\"\\n    }, {\\n      \\\"current\\\": {},\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"hide\\\": 0,\\n      \\\"includeAll\\\": true,\\n      \\\"label\\\": \\\"Namespace\\\",\\n      \\\"multi\\\": true,\\n      \\\"name\\\": \\\"namespace\\\",\\n      \\\"options\\\": [],\\n      \\\"query\\\": \\\"label_values(namespace)\\\",\\n      \\\"refresh\\\": 1,\\n      \\\"regex\\\": \\\"\\\",\\n      \\\"type\\\": \\\"query\\\"\\n    }]\\n  },\\n  \\\"annotations\\\": {\\n    \\\"list\\\": []\\n  },\\n  \\\"refresh\\\": false,\\n  \\\"schemaVersion\\\": 12,\\n  \\\"version\\\": 8,\\n  \\\"links\\\": [],\\n  \\\"gnetId\\\": 737\\n}\\n\",\"prometheus-datasource.json\":\"{\\n  \\\"name\\\": \\\"prometheus\\\",\\n  \\\"type\\\": \\\"prometheus\\\",\\n  \\\"url\\\": \\\"http://prometheus:9090\\\",\\n  \\\"access\\\": \\\"proxy\\\",\\n  \\\"basicAuth\\\": false\\n}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"grafana-import-dashboards\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "grafana-import-dashboards",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "kibana.yaml": "# Kibana is served by a back end server. This setting specifies the port to use.\n#server.port: 5601\n\n# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.\n# The default is 'localhost', which usually means remote machines will not be able to connect.\n# To allow connections from remote users, set this parameter to a non-loopback address.\nserver.host: '0.0.0.0'\n\n# Enables you to specify a path to mount Kibana at if you are running behind a proxy. This only affects\n# the URLs generated by Kibana, your proxy is expected to remove the basePath value before forwarding requests\n# to Kibana. This setting cannot end in a slash.\n#server.basePath: \"\"\n\n# The maximum payload size in bytes for incoming server requests.\n#server.maxPayloadBytes: 1048576\n\n# The Kibana server's name.  This is used for display purposes.\n#server.name: \"your-hostname\"\n#elastalert.serverHost: localhost\n# The URL of the Elasticsearch instance to use for all your queries.\nelasticsearch.url: 'http://elasticsearch'\n\n# When this setting's value is true Kibana uses the hostname specified in the server.host\n# setting. When the value of this setting is false, Kibana uses the hostname of the host\n# that connects to this Kibana instance.\n#elasticsearch.preserveHost: true\n\n# Kibana uses an index in Elasticsearch to store saved searches, visualizations and\n# dashboards. Kibana creates a new index if the index doesn't already exist.\n#kibana.index: \".kibana\"\n\n# The default application to load.\n#kibana.defaultAppId: \"discover\"\n\n# If your Elasticsearch is protected with basic authentication, these settings provide\n# the username and password that the Kibana server uses to perform maintenance on the Kibana\n# index at startup. Your Kibana users still need to authenticate with Elasticsearch, which\n# is proxied through the Kibana server.\n#elasticsearch.username: \"user\"\n#elasticsearch.password: \"pass\"\n\n# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.\n# These settings enable SSL for outgoing requests from the Kibana server to the browser.\n#server.ssl.enabled: false\n#server.ssl.certificate: /path/to/your/server.crt\n#server.ssl.key: /path/to/your/server.key\n\n# Optional settings that provide the paths to the PEM-format SSL certificate and key files.\n# These files validate that your Elasticsearch backend uses the same key files.\n#elasticsearch.ssl.certificate: /path/to/your/client.crt\n#elasticsearch.ssl.key: /path/to/your/client.key\n\n# Optional setting that enables you to specify a path to the PEM file for the certificate\n# authority for your Elasticsearch instance.\n#elasticsearch.ssl.certificateAuthorities: [ \"/path/to/your/CA.pem\" ]\n\n# To disregard the validity of SSL certificates, change this setting's value to 'none'.\n#elasticsearch.ssl.verificationMode: full\n\n# Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of\n# the elasticsearch.requestTimeout setting.\n#elasticsearch.pingTimeout: 1500\n\n# Time in milliseconds to wait for responses from the back end or Elasticsearch. This value\n# must be a positive integer.\n#elasticsearch.requestTimeout: 30000\n\n# List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side\n# headers, set this value to [] (an empty list).\n#elasticsearch.requestHeadersWhitelist: [ authorization ]\n\n# Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten\n# by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.\n#elasticsearch.customHeaders: {}\n\n# Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.\n#elasticsearch.shardTimeout: 0\n\n# Time in milliseconds to wait for Elasticsearch at Kibana startup before retrying.\n#elasticsearch.startupTimeout: 5000\n\n# Specifies the path where Kibana creates the process ID file.\n#pid.file: /var/run/kibana.pid\n\n# Enables you specify a file where Kibana stores log output.\n#logging.dest: stdout\n\n# Set the value of this setting to true to suppress all logging output.\n#logging.silent: false\n\n# Set the value of this setting to true to suppress all logging output other than error messages.\n#logging.quiet: false\n\n# Set the value of this setting to true to log all events, including system usage information\n# and all requests.\n#logging.verbose: false\n\n# Set the interval in milliseconds to sample system and process performance\n# metrics. Minimum is 100ms. Defaults to 5000.\n#ops.interval: 5000\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "kibana-configmap",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "logstash.conf": "input {\n beats {\n    port => 5044   \t\n  }\n#kafka {\n#    bootstrap_servers => \"10.98.0.65:9092\"\n#    topics => [\"mobile-app-log\"]\n#  }\n}\n\nfilter {\n\n if \"webapp-log\" in [tags]  \n {\n   json {\n     \tsource => \"message\"\n     }\n\n  mutate {\n    convert => { \"[traceinfo][duration]\" => \"integer\" }\n  }\n\n  mutate {\n       remove_field => [\"[beat][hostname]\",\"host\",\"hostname\",\"msg\",\"input_type\",\"level\",\"name\",\"pid\",\"[src][file]\",\"[src][func]\",\"[src][line]\",\"time\",\"v\",\"n\",\"t\",\"l\",\"m\"]\n    }\n \n    mutate {\n         rename => { \"offset\" => \"dateOffset\" }\n         rename => { \"timestamp\" => \"timeStamp\" }\n    }\n }\nelse if \"winapp-log\" in [tags]\n  {\n   json {\n        source => \"message\"\n     }\n    mutate {\n       remove_field => [\"[beat][hostname]\",\"host\"]\n    }\n   mutate {\n         rename => { \"offset\" => \"dateOffset\" }\n         rename => { \"timestamp\" => \"timeStamp\" }\n    }\n}\n\n else if \"tomcat-log\" in [tags]\n  {\n   json {\n\tsource => \"message\"\n     }\n    mutate {\n       remove_field => [\"[beat][hostname]\",\"host\"]\n    }\n}\n\n else\n {\n    json {\n\tsource => \"message\"\n\ttarget => \"parsedmain\"\n     }\n\n    json {\n        source => [\"[parsedmain][payload][content]\"]\n        target => \"parsedcontent\"\n        add_tag => [ \"mobileapp-logs\" ]\n     }\n   \n    mutate {\n          remove_field => [\"[parsedmain][payload][bySeqno]\",\"[parsedmain][payload][cas]\",\"[parsedmain][payload][content]\",\"[parsedmain][payload][event]\",\"[parsedmain][payload][expiration]\",\"[parsedmain][payload][flags]\",\"[parsedmain][payload][key]\",\"[parsedmain][payload][lockTime]\",\"[parsedmain][payload][partition]\",\"[parsedmain][payload][revSeqno]\",\"[parsedmain][schema][fields]\",\"[parsedmain][schema][name]\",\"[parsedmain][schema][optional]\",\"[parsedmain][schema][type]\",\"[parsedcontent][_sync][history][channels]\",\"[parsedcontent][_sync][history][parents]\",\"[parsedcontent][_sync][history][revs]\",\"[parsedcontent][_sync][recent_sequences]\",\"[parsedcontent][_sync][rev]\",\"[parsedcontent][_sync][sequence]\",\"[parsedcontent][_sync][time_saved]\",\"[parsedcontent][userinfo][token]\",\"[parsedcontent][created_at]\",\"[parsedcontent][_rev]\",\"[parsedcontent][lastSequence]\"]\n     }\n\n    mutate {\n         rename => { \"[parsedcontent][componentName]\" => \"componentName\" }\n         rename => { \"[parsedcontent][componentVersion]\" => \"componentVersion\" }\n         rename => { \"[parsedcontent][correlationId]\" => \"correlationId\" }\n         rename => { \"[parsedcontent][hostName]\" => \"hostName\" }\n         rename => { \"[parsedcontent][message]\" => \"message\" }\n         rename => { \"[parsedcontent][messageCode]\" => \"messageCode\" }\n         rename => { \"[parsedcontent][messageDetail]\" => \"messageDetail\" }\n         rename => { \"[parsedcontent][severity]\" => \"severity\" }\n         rename => { \"[parsedcontent][stacktrace]\" => \"stackTrace\" }\n         rename => { \"[parsedcontent][stackTrace]\" => \"stackTrace\" }\n         rename => { \"[parsedcontent][timeStamp]\" => \"timeStamp\" }\n         rename => { \"[parsedcontent][timestamp]\" => \"timeStamp\" }\n         rename => { \"[parsedcontent][type]\" => \"type\" }\n         rename => { \"[parsedcontent][deviceInfo][id]\" => \"[deviceInfo][id]\" }\n         rename => { \"[parsedcontent][deviceInfo][name]\" => \"[deviceInfo][name]\" }\n         rename => { \"[parsedcontent][deviceInfo][operatingSystem]\" => \"[deviceInfo][operatingSystem]\" }\n         rename => { \"[parsedcontent][deviceInfo][osVersion]\" => \"[deviceInfo][osVersion]\" }\n         rename => { \"[parsedcontent][deviceInfo][type]\" => \"[deviceInfo][type]\" }\n         rename => { \"[parsedcontent][traceInfo][loggingPoint]\" => \"[traceInfo][loggingPoint]\" }\n         rename => { \"[parsedcontent][traceInfo][duration]\" => \"[traceInfo][duration]\" }\n         rename => { \"[parsedcontent][traceInfo][methodTime]\" => \"[traceInfo][methodTime]\" }\n         rename => { \"[parsedcontent][traceInfo][callerInfo][class]\" => \"[traceInfo][callerInfo][class]\" }\n         rename => { \"[parsedcontent][traceInfo][callerInfo][name]\" => \"[traceInfo][callerInfo][name]\" }\n         rename => { \"[parsedcontent][traceInfo][callerInfo][method]\" => \"[traceInfo][callerInfo][method]\" }\n         rename => { \"[parsedcontent][traceInfo][sourceInfo][class]\" => \"[traceInfo][sourceInfo][class]\" }\n         rename => { \"[parsedcontent][traceInfo][sourceInfo][method]\" => \"[traceInfo][sourceInfo][method]\" }\n         rename => { \"[parsedcontent][traceInfo][methodTime]\" => \"[traceInfo][methodTime]\" }\n         rename => { \"[parsedcontent][userInfo][id]\" => \"[userInfo][id]\" }\n         rename => { \"[parsedcontent][userInfo][deviceId]\" => \"[userInfo][deviceId]\" } \n         rename => { \"[parsedcontent][userInfo][appId]\" => \"[userInfo][appId]\" }\n         rename => { \"[parsedcontent][userInfo][type]\" => \"[userInfo][type]\" }\n         rename => { \"[parsedcontent][offset]\" => \"dateOffset\" }\n\n      }\n   }\n}\n\noutput {\n  if \"tomcat-log\" in [tags]\n  {\n    elasticsearch {\n       hosts => \"elasticsearch\"\n      manage_template => false\n       index => \"webserverlog-%{+YYYY.MM.dd}\"\n       document_type => \"%{[@metadata][type]}\"\n   }\n  }\n  else\n  {\n    elasticsearch {\n       hosts => \"elasticsearch\"\n       manage_template => false\n       index => \"applog-%{+YYYY.MM.dd}\"\n       document_type => \"%{[@metadata][type]}\"\n   }\n  }\n}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "logstash-conf-configmap",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "log4j2.properties": "status = error\nname = LogstashPropertiesConfig\n\nappender.rolling.type = RollingFile\nappender.rolling.name = plain_rolling\nappender.rolling.fileName = ${sys:ls.logs}/logstash-${sys:ls.log.format}.log\nappender.rolling.filePattern = ${sys:ls.logs}/logstash-${sys:ls.log.format}-%d{yyyy-MM-dd}.log\nappender.rolling.policies.type = Policies\nappender.rolling.policies.time.type = TimeBasedTriggeringPolicy\nappender.rolling.policies.time.interval = 1\nappender.rolling.policies.time.modulate = true\nappender.rolling.layout.type = PatternLayout\nappender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %-.10000m%n\n\nappender.json_rolling.type = RollingFile\nappender.json_rolling.name = json_rolling\nappender.json_rolling.fileName = ${sys:ls.logs}/logstash-${sys:ls.log.format}.log\nappender.json_rolling.filePattern = ${sys:ls.logs}/logstash-${sys:ls.log.format}-%d{yyyy-MM-dd}.log\nappender.json_rolling.policies.type = Policies\nappender.json_rolling.policies.time.type = TimeBasedTriggeringPolicy\nappender.json_rolling.policies.time.interval = 1\nappender.json_rolling.policies.time.modulate = true\nappender.json_rolling.layout.type = JSONLayout\nappender.json_rolling.layout.compact = true\nappender.json_rolling.layout.eventEol = true\n\nrootLogger.level = ${sys:ls.log.level}\nrootLogger.appenderRef.rolling.ref = ${sys:ls.log.format}_rolling\n\n",
    "logstash.yaml": "# Settings file in YAML\n#\n# Settings can be specified either in hierarchical form, e.g.:\n#\n#   pipeline:\n#     batch:\n#       size: 125\n#       delay: 5\n#\n# Or as flat keys:\n#\n#   pipeline.batch.size: 125\n#   pipeline.batch.delay: 5\n#\n# ------------  Node identity ------------\n#\n# Use a descriptive name for the node:\n#\n# node.name: test\n#\n# If omitted the node name will default to the machine's host name\n#\n# ------------ Data path ------------------\n#\n# Which directory should be used by logstash and its plugins\n# for any persistent needs. Defaults to LOGSTASH_HOME/data\n#\npath.data: /var/lib/logstash\n#\n# ------------ Pipeline Settings --------------\n#\n# Set the number of workers that will, in parallel, execute the filters+outputs\n# stage of the pipeline.\n#\n# This defaults to the number of the host's CPU cores.\n#\n# pipeline.workers: 2\n#\n# How many workers should be used per output plugin instance\n#\n# pipeline.output.workers: 1\n#\n# How many events to retrieve from inputs before sending to filters+workers\n#\n# pipeline.batch.size: 125\n#\n# How long to wait before dispatching an undersized batch to filters+workers\n# Value is in milliseconds.\n#\n# pipeline.batch.delay: 5\n#\n# Force Logstash to exit during shutdown even if there are still inflight\n# events in memory. By default, logstash will refuse to quit until all\n# received events have been pushed to the outputs.\n#\n# WARNING: enabling this can lead to data loss during shutdown\n#\n# pipeline.unsafe_shutdown: false\n#\n# ------------ Pipeline Configuration Settings --------------\n#\n# Where to fetch the pipeline configuration for the main pipeline\n#\npath.config: /etc/logstash/conf.d\n#\n# Pipeline configuration string for the main pipeline\n#\n# config.string:\n#\n# At startup, test if the configuration is valid and exit (dry run)\n#\n# config.test_and_exit: false\n#\n# Periodically check if the configuration has changed and reload the pipeline\n# This can also be triggered manually through the SIGHUP signal\n#\n# config.reload.automatic: false\n#\n# How often to check if the pipeline configuration has changed (in seconds)\n#\n# config.reload.interval: 3\n#\n# Show fully compiled configuration as debug log message\n# NOTE: --log.level must be 'debug'\n#\n#config.debug: true\n#\n# ------------ Queuing Settings --------------\n#\n# Internal queuing model, \"memory\" for legacy in-memory based queuing and\n# \"persisted\" for disk-based acked queueing. Defaults is memory\n#\n# queue.type: memory\n#\n# If using queue.type: persisted, the directory path where the data files will be stored.\n# Default is path.data/queue\n#\n# path.queue:\n#\n# If using queue.type: persisted, the page data files size. The queue data consists of\n# append-only data files separated into pages. Default is 250mb\n#\n# queue.page_capacity: 250mb\n#\n# If using queue.type: persisted, the maximum number of unread events in the queue.\n# Default is 0 (unlimited)\n#\n# queue.max_events: 0\n#\n# If using queue.type: persisted, the total capacity of the queue in number of bytes.\n# If you would like more unacked events to be buffered in Logstash, you can increase the\n# capacity using this setting. Please make sure your disk drive has capacity greater than\n# the size specified here. If both max_bytes and max_events are specified, Logstash will pick\n# whichever criteria is reached first\n# Default is 1024mb or 1gb\n#\n# queue.max_bytes: 1024mb\n#\n# If using queue.type: persisted, the maximum number of acked events before forcing a checkpoint\n# Default is 1024, 0 for unlimited\n#\n# queue.checkpoint.acks: 1024\n#\n# If using queue.type: persisted, the maximum number of written events before forcing a checkpoint\n# Default is 1024, 0 for unlimited\n#\n# queue.checkpoint.writes: 1024\n#\n# If using queue.type: persisted, the interval in milliseconds when a checkpoint is forced on the head page\n# Default is 1000, 0 for no periodic checkpoint.\n#\n# queue.checkpoint.interval: 1000\n#\n# ------------ Metrics Settings --------------\n#\n# Bind address for the metrics REST endpoint\n#\n# http.host: \"127.0.0.1\"\n#\n# Bind port for the metrics REST endpoint, this option also accept a range\n# (9600-9700) and logstash will pick up the first available ports.\n#\n# http.port: 9600-9700\n#\n# ------------ Debugging Settings --------------\n#\n# Options for log.level:\n#   * fatal\n#   * error\n#   * warn\n#   * info (default)\n#   * debug\n#   * trace\n#\nlog.level: error\npath.logs: /var/log/logstash\n#\n# ------------ Other Settings --------------\n#\n# Where to find custom plugins\n# path.plugins: []\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "logstash-properties-configmap",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "prometheus.yaml": "global:\n  scrape_interval: 10s\n  scrape_timeout: 10s\n  evaluation_interval: 10s\nrule_files:\n  - \"/etc/prometheus-rules/*.rules\"\nscrape_configs:\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L37\n  - job_name: 'kubernetes-cadvisor'\n    scheme: https\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    kubernetes_sd_configs:\n      - role: node\n    relabel_configs:\n    - action: labelmap\n      regex: __meta_kubernetes_node_label_(.+)\n    - target_label: __address__\n      replacement: kubernetes.default.svc:443\n    - source_labels: [__meta_kubernetes_node_name]\n      regex: (.+)\n      target_label: __metrics_path__\n      replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n  # fkcdfldlvldvnvcnvfknvknfv\n  - job_name: 'kubernetes-nodes'\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    kubernetes_sd_configs:\n      - role: node\n    relabel_configs:\n      - source_labels: [__address__]\n        regex: '(.*):10250'\n        replacement: '${1}:10255'\n        target_label: __address__\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L79\n  - job_name: 'kubernetes-endpoints'\n    kubernetes_sd_configs:\n      - role: endpoints\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n        action: replace\n        target_label: __scheme__\n        regex: (https?)\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n        action: replace\n        target_label: __address__\n        regex: (.+)(?::\\d+);(\\d+)\n        replacement: $1:$2\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n        action: replace\n        target_label: kubernetes_name\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L119\n  - job_name: 'kubernetes-services'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    kubernetes_sd_configs:\n      - role: service\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\n        action: keep\n        regex: true\n      - source_labels: [__address__]\n        target_label: __param_target\n      - target_label: __address__\n        replacement: blackbox\n      - source_labels: [__param_target]\n        target_label: instance\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n        target_label: kubernetes_name\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L156\n  - job_name: 'kubernetes-pods'\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n        action: replace\n        regex: (.+):(?:\\d+);(\\d+)\n        replacement: ${1}:${2}\n        target_label: __address__\n      - action: labelmap\n        regex: __meta_kubernetes_pod_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_pod_name]\n        action: replace\n        target_label: kubernetes_pod_name\n      - source_labels: [__meta_kubernetes_pod_container_port_number]\n        action: keep\n        regex: 9\\d{3}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"prometheus.yaml\":\"global:\\n  scrape_interval: 10s\\n  scrape_timeout: 10s\\n  evaluation_interval: 10s\\nrule_files:\\n  - \\\"/etc/prometheus-rules/*.rules\\\"\\nscrape_configs:\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L37\\n  - job_name: 'kubernetes-cadvisor'\\n    scheme: https\\n    tls_config:\\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\n    kubernetes_sd_configs:\\n      - role: node\\n    relabel_configs:\\n    - action: labelmap\\n      regex: __meta_kubernetes_node_label_(.+)\\n    - target_label: __address__\\n      replacement: kubernetes.default.svc:443\\n    - source_labels: [__meta_kubernetes_node_name]\\n      regex: (.+)\\n      target_label: __metrics_path__\\n      replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\\n  # fkcdfldlvldvnvcnvfknvknfv\\n  - job_name: 'kubernetes-nodes'\\n    tls_config:\\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\n    kubernetes_sd_configs:\\n      - role: node\\n    relabel_configs:\\n      - source_labels: [__address__]\\n        regex: '(.*):10250'\\n        replacement: '${1}:10255'\\n        target_label: __address__\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L79\\n  - job_name: 'kubernetes-endpoints'\\n    kubernetes_sd_configs:\\n      - role: endpoints\\n    relabel_configs:\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\\n        action: keep\\n        regex: true\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\\n        action: replace\\n        target_label: __scheme__\\n        regex: (https?)\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\\n        action: replace\\n        target_label: __metrics_path__\\n        regex: (.+)\\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\\n        action: replace\\n        target_label: __address__\\n        regex: (.+)(?::\\\\d+);(\\\\d+)\\n        replacement: $1:$2\\n      - action: labelmap\\n        regex: __meta_kubernetes_service_label_(.+)\\n      - source_labels: [__meta_kubernetes_namespace]\\n        action: replace\\n        target_label: kubernetes_namespace\\n      - source_labels: [__meta_kubernetes_service_name]\\n        action: replace\\n        target_label: kubernetes_name\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L119\\n  - job_name: 'kubernetes-services'\\n    metrics_path: /probe\\n    params:\\n      module: [http_2xx]\\n    kubernetes_sd_configs:\\n      - role: service\\n    relabel_configs:\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\\n        action: keep\\n        regex: true\\n      - source_labels: [__address__]\\n        target_label: __param_target\\n      - target_label: __address__\\n        replacement: blackbox\\n      - source_labels: [__param_target]\\n        target_label: instance\\n      - action: labelmap\\n        regex: __meta_kubernetes_service_label_(.+)\\n      - source_labels: [__meta_kubernetes_namespace]\\n        target_label: kubernetes_namespace\\n      - source_labels: [__meta_kubernetes_service_name]\\n        target_label: kubernetes_name\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L156\\n  - job_name: 'kubernetes-pods'\\n    kubernetes_sd_configs:\\n      - role: pod\\n    relabel_configs:\\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\\n        action: keep\\n        regex: true\\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\\n        action: replace\\n        target_label: __metrics_path__\\n        regex: (.+)\\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\\n        action: replace\\n        regex: (.+):(?:\\\\d+);(\\\\d+)\\n        replacement: ${1}:${2}\\n        target_label: __address__\\n      - action: labelmap\\n        regex: __meta_kubernetes_pod_label_(.+)\\n      - source_labels: [__meta_kubernetes_namespace]\\n        action: replace\\n        target_label: kubernetes_namespace\\n      - source_labels: [__meta_kubernetes_pod_name]\\n        action: replace\\n        target_label: kubernetes_pod_name\\n      - source_labels: [__meta_kubernetes_pod_container_port_number]\\n        action: keep\\n        regex: 9\\\\d{3}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"prometheus-core\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "prometheus-core",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "container-status.rules": "ALERT ContainerInstance\n  IF (drop_common_labels(kube_replicaset_status_replicas{replicaset=~\".*dxp.*\"})) >  2\n  FOR 3m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.replicaset}}: has more than 2 instances running from above 3 minute  \",\n    DESCRIPTION = \"Namespace={{$labels.namespace}}: Toatal instance={{ $value }}\"\n  }\nALERT ContainerRunningStatus\n  IF (drop_common_labels(kube_pod_container_status_running{pod=~\".*dxp.*\"})) <  1\n  FOR 3m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.container}}: Service is not running  \",\n    DESCRIPTION = \"{{$labels.pod}}: Service Wating time  is above 2m\"\n  }\nALERT ContainerRestart\n  IF (drop_common_labels(kube_pod_container_status_restarts{pod=~\".*dxp.*\"})) > 2\n  FOR 3m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.pod}}: Pod Restart Count\",\n    DESCRIPTION = \"{{$labels.pod}}: Pod Restart count is above 2  (current value is: {{ $value }})\"\n  }\n",
    "cpu-usage.rules": "ALERT NodeCPUUsage\n  IF (100 - (avg by (instance) (irate(node_cpu{component=\"node-exporter\",mode=\"idle\"}[5m])) * 100)) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: High CPU usage detected\",\n    DESCRIPTION = \"{{$labels.instance}}: CPU usage is above 75% (current value is: {{ $value }})\"\n  }\n",
    "instance-availability.rules": "ALERT InstanceDown\n  IF up == 0\n  FOR 1m\n  LABELS { severity = \"page\" }\n  ANNOTATIONS {\n    summary = \"Instance {{ $labels.instance }} down\",\n    description = \"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute.\",\n  }\n",
    "low-disk-space.rules": "ALERT NodeLowRootDisk\n  IF ((node_filesystem_size{mountpoint=\"/\"} - node_filesystem_free{mountpoint=\"/\"} ) / node_filesystem_size{mountpoint=\"/\"} * 100) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: Low root disk space\",\n    DESCRIPTION = \"{{$labels.instance}}: Root disk usage is above 75% (current value is: {{ $value }})\"\n  }\n\nALERT NodeLowDataDisk\n  IF ((node_filesystem_size{mountpoint=\"/\"} - node_filesystem_free{mountpoint=\"/\"} ) / node_filesystem_size{mountpoint=\"/\"} * 100) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: Low data disk space\",\n    DESCRIPTION = \"{{$labels.instance}}: Data disk usage is above 75% (current value is: {{ $value }})\"\n  }\n",
    "mem-usage.rules": "ALERT ContainerMemoryusage\n  IF (container_memory_working_set_bytes{pod_name=~\".*dxp.*\"}/(1024*1024)) > 1000\n  FOR 3m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: Swap usage detected\",\n    DESCRIPTION = \"{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})\"\n  }\nALERT NodeSwapUsage\n  IF (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: Swap usage detected\",\n    DESCRIPTION = \"{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})\"\n  }\n\nALERT NodeMemoryUsage\n  IF (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached-node_memory_Buffers)/(node_memory_MemTotal))*100) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: High memory usage detected\",\n    DESCRIPTION = \"{{$labels.instance}}: Memory usage is above 75% (current value is: {{ $value }})\"\n  }\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"container-status.rules\":\"ALERT ContainerInstance\\n  IF (drop_common_labels(kube_replicaset_status_replicas{replicaset=~\\\".*dxp.*\\\"})) \\u003e  2\\n  FOR 3m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.replicaset}}: has more than 2 instances running from above 3 minute  \\\",\\n    DESCRIPTION = \\\"Namespace={{$labels.namespace}}: Toatal instance={{ $value }}\\\"\\n  }\\nALERT ContainerRunningStatus\\n  IF (drop_common_labels(kube_pod_container_status_running{pod=~\\\".*dxp.*\\\"})) \\u003c  1\\n  FOR 3m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.container}}: Service is not running  \\\",\\n    DESCRIPTION = \\\"{{$labels.pod}}: Service Wating time  is above 2m\\\"\\n  }\\nALERT ContainerRestart\\n  IF (drop_common_labels(kube_pod_container_status_restarts{pod=~\\\".*dxp.*\\\"})) \\u003e 2\\n  FOR 3m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.pod}}: Pod Restart Count\\\",\\n    DESCRIPTION = \\\"{{$labels.pod}}: Pod Restart count is above 2  (current value is: {{ $value }})\\\"\\n  }\\n\",\"cpu-usage.rules\":\"ALERT NodeCPUUsage\\n  IF (100 - (avg by (instance) (irate(node_cpu{component=\\\"node-exporter\\\",mode=\\\"idle\\\"}[5m])) * 100)) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: High CPU usage detected\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: CPU usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\",\"instance-availability.rules\":\"ALERT InstanceDown\\n  IF up == 0\\n  FOR 1m\\n  LABELS { severity = \\\"page\\\" }\\n  ANNOTATIONS {\\n    summary = \\\"Instance {{ $labels.instance }} down\\\",\\n    description = \\\"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute.\\\",\\n  }\\n\",\"low-disk-space.rules\":\"ALERT NodeLowRootDisk\\n  IF ((node_filesystem_size{mountpoint=\\\"/\\\"} - node_filesystem_free{mountpoint=\\\"/\\\"} ) / node_filesystem_size{mountpoint=\\\"/\\\"} * 100) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: Low root disk space\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Root disk usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\\nALERT NodeLowDataDisk\\n  IF ((node_filesystem_size{mountpoint=\\\"/\\\"} - node_filesystem_free{mountpoint=\\\"/\\\"} ) / node_filesystem_size{mountpoint=\\\"/\\\"} * 100) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: Low data disk space\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Data disk usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\",\"mem-usage.rules\":\"ALERT ContainerMemoryusage\\n  IF (container_memory_working_set_bytes{pod_name=~\\\".*dxp.*\\\"}/(1024*1024)) \\u003e 1000\\n  FOR 3m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: Swap usage detected\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\nALERT NodeSwapUsage\\n  IF (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: Swap usage detected\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\\nALERT NodeMemoryUsage\\n  IF (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached-node_memory_Buffers)/(node_memory_MemTotal))*100) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: High memory usage detected\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Memory usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"prometheus-rules\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "prometheus-rules",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"name\":\"redis-commander\"},\"name\":\"redis-commander\",\"namespace\":\"redis\"},\"spec\":{\"ports\":[{\"port\":8081,\"targetPort\":8081}],\"selector\":{\"app\":\"redis-commander\"},\"type\":\"NodePort\"}}\n"
    },
    "labels": {
      "name": "redis-commander"
    },
    "name": "redis-commander",
    "namespace": "redis"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 32046,
        "port": 8081,
        "protocol": "TCP",
        "targetPort": 8081
      }
    ],
    "selector": {
      "app": "redis-commander"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"name\":\"sentinel\",\"role\":\"service\"},\"name\":\"redis-sentinel\",\"namespace\":\"redis\"},\"spec\":{\"ports\":[{\"port\":26379,\"targetPort\":26379}],\"selector\":{\"redis-sentinel\":\"true\"}}}\n"
    },
    "labels": {
      "name": "sentinel",
      "role": "service"
    },
    "name": "redis-sentinel",
    "namespace": "redis"
  },
  "spec": {
    "ports": [
      {
        "port": 26379,
        "protocol": "TCP",
        "targetPort": 26379
      }
    ],
    "selector": {
      "redis-sentinel": "true"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"name\":\"redis-svc\",\"role\":\"service\"},\"name\":\"redis-svc\",\"namespace\":\"redis\"},\"spec\":{\"ports\":[{\"port\":6379}],\"selector\":{\"name\":\"redis\"},\"type\":\"NodePort\"}}\n"
    },
    "labels": {
      "name": "redis-svc",
      "role": "service"
    },
    "name": "redis-svc",
    "namespace": "redis"
  },
  "spec": {
    "externalTrafficPolicy": "Cluster",
    "ports": [
      {
        "nodePort": 31749,
        "port": 6379,
        "protocol": "TCP",
        "targetPort": 6379
      }
    ],
    "selector": {
      "name": "redis"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "ReplicationController",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ReplicationController\",\"metadata\":{\"annotations\":{},\"name\":\"redis\",\"namespace\":\"redis\"},\"spec\":{\"replicas\":1,\"selector\":{\"name\":\"redis\"},\"template\":{\"metadata\":{\"labels\":{\"name\":\"redis\"}},\"spec\":{\"containers\":[{\"image\":\"gcr.io/google_containers/redis:v1\",\"name\":\"redis\",\"ports\":[{\"containerPort\":6379}],\"resources\":{\"limits\":{\"cpu\":\"0.1\"}},\"volumeMounts\":[{\"mountPath\":\"/redis-master-data\",\"name\":\"data\"}]}],\"volumes\":[{\"emptyDir\":{},\"name\":\"data\"}]}}}}\n"
    },
    "labels": {
      "name": "redis"
    },
    "name": "redis",
    "namespace": "redis"
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "name": "redis"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "name": "redis"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "gcr.io/google_containers/redis:v1",
            "imagePullPolicy": "IfNotPresent",
            "name": "redis",
            "ports": [
              {
                "containerPort": 6379,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/redis-master-data",
                "name": "data"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {
              "sizeLimit": "0"
            },
            "name": "data"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "v1",
  "kind": "ReplicationController",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ReplicationController\",\"metadata\":{\"annotations\":{},\"name\":\"redis-sentinel\",\"namespace\":\"redis\"},\"spec\":{\"replicas\":1,\"selector\":{\"redis-sentinel\":\"true\"},\"template\":{\"metadata\":{\"labels\":{\"name\":\"redis-sentinel\",\"redis-sentinel\":\"true\",\"role\":\"sentinel\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"SENTINEL\",\"value\":\"true\"}],\"image\":\"gcr.io/google_containers/redis:v1\",\"name\":\"sentinel\",\"ports\":[{\"containerPort\":26379}]}]}}}}\n"
    },
    "labels": {
      "name": "redis-sentinel",
      "redis-sentinel": "true",
      "role": "sentinel"
    },
    "name": "redis-sentinel",
    "namespace": "redis"
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "redis-sentinel": "true"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "name": "redis-sentinel",
          "redis-sentinel": "true",
          "role": "sentinel"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "SENTINEL",
                "value": "true"
              }
            ],
            "image": "gcr.io/google_containers/redis:v1",
            "imagePullPolicy": "IfNotPresent",
            "name": "sentinel",
            "ports": [
              {
                "containerPort": 26379,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "redis"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"redis-commander\"},\"name\":\"redis-commander\",\"namespace\":\"redis\"},\"spec\":{\"replicas\":3,\"selector\":{\"matchLabels\":{\"app\":\"redis-commander\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"redis-commander\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"REDIS_HOSTS\",\"value\":\"redis-svc\"}],\"image\":\"rediscommander/redis-commander:latest\",\"name\":\"redis-commander\",\"ports\":[{\"containerPort\":8081}]}]}}}}\n"
    },
    "labels": {
      "app": "redis-commander"
    },
    "name": "redis-commander",
    "namespace": "redis"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 1,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "redis-commander"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "redis-commander"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "REDIS_HOSTS",
                "value": "redis-svc"
              }
            ],
            "image": "rediscommander/redis-commander:latest",
            "imagePullPolicy": "Always",
            "name": "redis-commander",
            "ports": [
              {
                "containerPort": 8081,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "redis-commander",
      "pod-template-hash": "1556334489"
    },
    "name": "redis-commander-1556334489",
    "namespace": "redis",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "redis-commander",
        "uid": "6090261c-e589-11e7-99e5-1606514242c6"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "redis-commander",
        "pod-template-hash": "1556334489"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "redis-commander",
          "pod-template-hash": "1556334489"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "REDIS_HOSTS",
                "value": "redis-svc"
              }
            ],
            "image": "rediscommander/redis-commander:latest",
            "imagePullPolicy": "Always",
            "name": "redis-commander",
            "ports": [
              {
                "containerPort": 8081,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
