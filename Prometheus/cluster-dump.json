{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "blueonlinecheckinbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31005,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3005
      }
    ],
    "selector": {
      "load-balancer-blueonlinecheckinbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dclreservationbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31021,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8081
      }
    ],
    "selector": {
      "load-balancer-dclreservationbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpactivityreservationbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31030,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3002
      }
    ],
    "selector": {
      "load-balancer-dxpactivityreservationbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpactivityreservationservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31403,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8403
      }
    ],
    "selector": {
      "load-balancer-dxpactivityreservationservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpactivityreservationweb",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31031,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3000
      }
    ],
    "selector": {
      "load-balancer-dxpactivityreservationweb": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"dxparsadminweb\",\"namespace\":\"dev\"},\"spec\":{\"externalTrafficPolicy\":\"Cluster\",\"ports\":[{\"name\":\"http\",\"nodePort\":31007,\"port\":80,\"protocol\":\"TCP\",\"targetPort\":5007}],\"selector\":{\"load-balancer-dxparsadminweb\":\"true\"},\"sessionAffinity\":\"None\",\"type\":\"NodePort\"}}"
    },
    "name": "dxparsadminweb",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31007,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 5007
      }
    ],
    "selector": {
      "load-balancer-dxparsadminweb": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpbatchjobservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31337,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8337
      }
    ],
    "selector": {
      "load-balancer-dxpbatchjobservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpboardingservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31328,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8328
      }
    ],
    "selector": {
      "load-balancer-dxpboardingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpcartservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31304,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8304
      }
    ],
    "selector": {
      "load-balancer-dxpcartservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpchildregistrationservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31334,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8334
      }
    ],
    "selector": {
      "load-balancer-dxpchildregistrationservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpcomponentcatalogservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31325,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8325
      }
    ],
    "selector": {
      "load-balancer-dxpcomponentcatalogservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpconfigmapsyncdaemon",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31501,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8501
      }
    ],
    "selector": {
      "load-balancer-dxpconfigmapsyncdaemon": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpcontentaccessbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31083,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3083
      }
    ],
    "selector": {
      "load-balancer-dxpcontentaccessbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpcontentmanagementservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31360,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8360
      }
    ],
    "selector": {
      "load-balancer-dxpcontentmanagementservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpcrewbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31082,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3082
      }
    ],
    "selector": {
      "load-balancer-dxpcrewbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpdaemonservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31338,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8338
      }
    ],
    "selector": {
      "load-balancer-dxpdaemonservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpdevicecontentservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31330,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8330
      }
    ],
    "selector": {
      "load-balancer-dxpdevicecontentservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpdeviceservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31336,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8336
      }
    ],
    "selector": {
      "load-balancer-dxpdeviceservice": "true"
    },
    "sessionAffinity": "None",
    "type": "LoadBalancer"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpdiningservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31335,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8335
      }
    ],
    "selector": {
      "load-balancer-dxpdiningservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpembarkationadminservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31405,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8405
      }
    ],
    "selector": {
      "load-balancer-dxpembarkationadminservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpembarkationbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31006,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3006
      }
    ],
    "selector": {
      "load-balancer-dxpembarkationbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpembarkationnorule",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31407,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8407
      }
    ],
    "selector": {
      "load-balancer-dxpembarkationnorule": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpembarkationservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31402,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8402
      }
    ],
    "selector": {
      "load-balancer-dxpembarkationservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpeventstoreservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31333,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8333
      }
    ],
    "selector": {
      "load-balancer-dxpeventstoreservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpfoodnbeverageservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31313,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8313
      }
    ],
    "selector": {
      "load-balancer-dxpfoodnbeverageservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpguestmultimediaservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31312,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8312
      }
    ],
    "selector": {
      "load-balancer-dxpguestmultimediaservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpguestservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31303,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8303
      }
    ],
    "selector": {
      "load-balancer-dxpguestservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxphousekeepingbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31081,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3081
      }
    ],
    "selector": {
      "load-balancer-dxphousekeepingbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpidcrossreferenceservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31326,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8326
      }
    ],
    "selector": {
      "load-balancer-dxpidcrossreferenceservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpidentityaccessmanagementservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31362,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8362
      }
    ],
    "selector": {
      "load-balancer-dxpidentityaccessmanagementservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpimageprocessingservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31767,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8767
      }
    ],
    "selector": {
      "load-balancer-dxpimageprocessingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpincidentmanagementservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31323,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8323
      }
    ],
    "selector": {
      "load-balancer-dxpincidentmanagementservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpkieserver",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 32571,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8080
      }
    ],
    "selector": {
      "load-balancer-dxpkieserver": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxplogisticsservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31332,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8332
      }
    ],
    "selector": {
      "load-balancer-dxplogisticsservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "app": "dxpluggageservice",
      "version": "latest",
      "visualize": "true"
    },
    "name": "dxpluggageservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 30760,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8320
      }
    ],
    "selector": {
      "app": "dxpluggageservice",
      "version": "latest",
      "visualize": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpmessagingservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31306,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8306
      }
    ],
    "selector": {
      "load-balancer-dxpmessagingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpmoderateonlinecheckinbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31022,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3022
      }
    ],
    "selector": {
      "load-balancer-dxpmoderateonlinecheckinbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpmoderateonlinecheckinweb",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31020,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3020
      }
    ],
    "selector": {
      "load-balancer-dxpmoderateonlinecheckinweb": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpmultimediastorageservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31310,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8310
      }
    ],
    "selector": {
      "load-balancer-dxpmultimediastorageservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpocrservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31307,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8307
      }
    ],
    "selector": {
      "load-balancer-dxpocrservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxponlinecheckinweb",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31000,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3000
      }
    ],
    "selector": {
      "load-balancer-dxponlinecheckinweb": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxppaymentservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31305,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8305
      }
    ],
    "selector": {
      "load-balancer-dxppaymentservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxppersonlocationservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31318,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8318
      }
    ],
    "selector": {
      "load-balancer-dxppersonlocationservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpreferencedataservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31311,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8311
      }
    ],
    "selector": {
      "load-balancer-dxpreferencedataservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpreportingservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31370,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8370
      }
    ],
    "selector": {
      "load-balancer-dxpreportingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpreservationservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31231,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8401
      }
    ],
    "selector": {
      "load-balancer-dxpreservationservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpreservationweb",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31004,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 5004
      }
    ],
    "selector": {
      "load-balancer-dxpreservationweb": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpruleservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31375,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8375
      }
    ],
    "selector": {
      "load-balancer-dxpruleservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsailorframeworkbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31014,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3014
      }
    ],
    "selector": {
      "load-balancer-dxpsailorframeworkbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsailorservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31404,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8404
      }
    ],
    "selector": {
      "load-balancer-dxpsailorservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsalesofferservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31302,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8302
      }
    ],
    "selector": {
      "load-balancer-dxpsalesofferservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsalesorderservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31301,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8301
      }
    ],
    "selector": {
      "load-balancer-dxpsalesorderservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpshipservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31322,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8322
      }
    ],
    "selector": {
      "load-balancer-dxpshipservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpsocialnetworkingservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31321,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8321
      }
    ],
    "selector": {
      "load-balancer-dxpsocialnetworkingservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxptalendmessaging",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      }
    ],
    "selector": {
      "load-balancer-dxptalendmessaging": "true"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpteammemberservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31315,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8315
      }
    ],
    "selector": {
      "load-balancer-dxpteammemberservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxptenantmanagerservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31327,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8327
      }
    ],
    "selector": {
      "load-balancer-dxptenantmanagerservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpvendorservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31319,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8319
      }
    ],
    "selector": {
      "load-balancer-dxpvendorservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpvenueservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31324,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8324
      }
    ],
    "selector": {
      "load-balancer-dxpvenueservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpvisitorservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31316,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8316
      }
    ],
    "selector": {
      "load-balancer-dxpvisitorservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpwearableservice",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31309,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8309
      }
    ],
    "selector": {
      "load-balancer-dxpwearableservice": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "dxpworkbench",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31080,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8080
      }
    ],
    "selector": {
      "load-balancer-dxpworkbench": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "labels": {
      "app": "magnolia",
      "version": "latest",
      "visualize": "true"
    },
    "name": "magnolia",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 31066,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 8080
      }
    ],
    "selector": {
      "app": "magnolia",
      "version": "latest",
      "visualize": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "minio-service",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 32589,
        "port": 9000,
        "protocol": "TCP",
        "targetPort": 9000
      }
    ],
    "selector": {
      "app": "minio"
    },
    "sessionAffinity": "None",
    "type": "LoadBalancer"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "nclarsadminbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      }
    ],
    "selector": {
      "load-balancer-nclarsadminbff": "true"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "name": "onlinecheckinbff",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31002,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 3002
      }
    ],
    "selector": {
      "load-balancer-onlinecheckinbff": "true"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"traefik\",\"namespace\":\"demo\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"nodePort\":31461,\"port\":80},{\"name\":\"https\",\"port\":443}],\"selector\":{\"k8s-app\":\"traefik-ingress-lb\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "traefik",
    "namespace": "demo"
  },
  "spec": {
    "ports": [
      {
        "name": "http",
        "nodePort": 31461,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      },
      {
        "name": "https",
        "nodePort": 30635,
        "port": 443,
        "protocol": "TCP",
        "targetPort": 443
      }
    ],
    "selector": {
      "k8s-app": "traefik-ingress-lb"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "basictoken": "QmFzaWMgTkRsbE1UUTJOekV0TXpKa015MDBNV1U0TFdJMU56a3RaRGMwTjJJMU5HWm1aREl6T25ObFkzSmxkQT09",
    "cybersourcekey": "N2Y1MjAxMDc1ZmJkNDg4Njk0OTA1ZTI0YTQ1NTFkM2E5NDNhNzllMGZlOTA0MjcyOTE1NGI1N2RlYWU4NTgwN2NkYjcxZDg3ODc1MjQ5N2Y5YzY4Yjg0NjhiYjMwMzY2MmEzMDVhZmE1MGNhNGI4ODljZTYyOTA3ZDQyM2Y2MTcxNGQ2N2Y0NGU5MGM0Mjc5YTBmZmU3NTdmNmRjMjRiNzZhNmE1ODZkM2Q2MzQ0NmNiMDEwMDA2ZGI2MWUxODNhNjZiOTgzYzVjODE5NDVlYThhMTg0ZTA4NjNiOThhZTFmZGM4YjYwM2VjMjg0MGYxYTg4YjY3ZDg1ZGMxMDZjMA==",
    "dxpkeystore": "ZHhwMTIzNA==",
    "fileSystemPassword": "eWVsbG93Kjk5",
    "fileSystemUserName": "c2FtYmF1c2Vy",
    "mailChimpBasicToken": "QmFzaWMgWVc1cmFYUmlNREExT2pFNE4yRXdaV1ZqTldVME9UWm1ObVE0WmpJNFpqUXhaRFJrT1RVM05UWmhMWFZ6TVRRPQ==",
    "mailChimpListName": "YjkzNmE0MzM3OA==",
    "mailChimpPassword": "MTg3YTBlZWM1ZTQ5NmY2ZDhmMjhmNDFkNGQ5NTc1NmEtdXMxNA==",
    "mailChimpUserName": "YW5raXRiMDA1",
    "mailSenderPassword": "Qm5WdDAjMTIz",
    "mailSenderUserName": "YWxlcnRAZGVjdXJ0aXMuY29t",
    "password": "SGltdCE5OSpJbjEwMQ==",
    "s3bucketkey": "QTlaNGRucjBFRlRCVUR0bExFL0xmdGNZMUJOSGptWjJoSHpzdXp2RA==",
    "s3bucketkeyid": "QUtJQUlWM0JXU0lVTVNTRzZCTkE=",
    "username": "YWRtaW5kc3M="
  },
  "kind": "Secret",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"basictoken\":\"QmFzaWMgTkRsbE1UUTJOekV0TXpKa015MDBNV1U0TFdJMU56a3RaRGMwTjJJMU5HWm1aREl6T25ObFkzSmxkQT09\",\"cybersourcekey\":\"N2Y1MjAxMDc1ZmJkNDg4Njk0OTA1ZTI0YTQ1NTFkM2E5NDNhNzllMGZlOTA0MjcyOTE1NGI1N2RlYWU4NTgwN2NkYjcxZDg3ODc1MjQ5N2Y5YzY4Yjg0NjhiYjMwMzY2MmEzMDVhZmE1MGNhNGI4ODljZTYyOTA3ZDQyM2Y2MTcxNGQ2N2Y0NGU5MGM0Mjc5YTBmZmU3NTdmNmRjMjRiNzZhNmE1ODZkM2Q2MzQ0NmNiMDEwMDA2ZGI2MWUxODNhNjZiOTgzYzVjODE5NDVlYThhMTg0ZTA4NjNiOThhZTFmZGM4YjYwM2VjMjg0MGYxYTg4YjY3ZDg1ZGMxMDZjMA==\",\"dxpkeystore\":\"ZHhwMTIzNA==\",\"fileSystemPassword\":\"eWVsbG93Kjk5\",\"fileSystemUserName\":\"c2FtYmF1c2Vy\",\"mailChimpBasicToken\":\"QmFzaWMgWVc1cmFYUmlNREExT2pFNE4yRXdaV1ZqTldVME9UWm1ObVE0WmpJNFpqUXhaRFJrT1RVM05UWmhMWFZ6TVRRPQ==\",\"mailChimpListName\":\"YjkzNmE0MzM3OA==\",\"mailChimpPassword\":\"MTg3YTBlZWM1ZTQ5NmY2ZDhmMjhmNDFkNGQ5NTc1NmEtdXMxNA==\",\"mailChimpUserName\":\"YW5raXRiMDA1\",\"mailSenderPassword\":\"Qm5WdDAjMTIz\",\"mailSenderUserName\":\"YWxlcnRAZGVjdXJ0aXMuY29t\",\"password\":\"SGltdCE5OSpJbjEwMQ==\",\"s3bucketkey\":\"QTlaNGRucjBFRlRCVUR0bExFL0xmdGNZMUJOSGptWjJoSHpzdXp2RA==\",\"s3bucketkeyid\":\"QUtJQUlWM0JXU0lVTVNTRzZCTkE=\",\"username\":\"YWRtaW5kc3M=\"},\"kind\":\"Secret\",\"metadata\":{\"annotations\":{},\"name\":\"app-secrets\",\"namespace\":\"demo\"},\"type\":\"Opaque\"}\n"
    },
    "name": "app-secrets",
    "namespace": "demo"
  },
  "type": "Opaque"
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cDovLzM0LjE5My4xNDguMTU6NTAwMCI6IHsgImF1dGgiOiAiIiwgImVtYWlsIjogImZha2UuZW1haWxAc3Bpbm5ha2VyLmlvIiB9IH0="
  },
  "kind": "Secret",
  "metadata": {
    "name": "ncl-repositry",
    "namespace": "demo"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "v1",
  "data": {
    "tls.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuekNDQW9lZ0F3SUJBZ0lKQUtibUlJd1ArazVMTUEwR0NTcUdTSWIzRFFFQkN3VUFNR1l4Q3pBSkJnTlYKQkFZVEFrbE9NUkl3RUFZRFZRUUlEQWx5WVdwaGMzUm9ZVzR4RHpBTkJnTlZCQWNNQm1waGFYQjFjakVSTUE4RwpBMVVFQ2d3SVpHVmpkWEowYVhNeER6QU5CZ05WQkFzTUJtUmxkbTl3Y3pFT01Bd0dBMVVFQXd3RllXRjBhV1l3CkhoY05NVGN3T1RFMU1UTXhNRFF4V2hjTk1UZ3dPVEUxTVRNeE1EUXhXakJtTVFzd0NRWURWUVFHRXdKSlRqRVMKTUJBR0ExVUVDQXdKY21GcVlYTjBhR0Z1TVE4d0RRWURWUVFIREFacVlXbHdkWEl4RVRBUEJnTlZCQW9NQ0dSbApZM1Z5ZEdsek1ROHdEUVlEVlFRTERBWmtaWFp2Y0hNeERqQU1CZ05WQkFNTUJXRmhkR2xtTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcGpEQVlJdXhVYzNvZ2xMa1FzYTFaRnJWOWxDQU9VV2wKWGZCVERuRFZLc3gxK1d4MGllb1lUdnFUWTZ6SEJCN2tPc0xJeU1sTVhCWExyaTNzL3RDQjQreHVTaW1SZU4wagpKeVlwRUhJSUN3RTYvWVRTOFdmNWE5cVRPekJSS1dpVmxYbDkrVENvVkdPTWUzYllPdFRLMmhibDJIeWs5SDhXCktjRmw2K1RjY01kUTQ4S2F4VytsZFdYd1dVV3Z1Q21xcmJGRVAxTzJIRDdlbThHVExQTUNhMG1taDBXcTVmdVQKdWo1RFhKZmk1MTBZTXpaV3dEWGp3dmk3ZFplVnErM2UrRUIvaWZZR3pHRGEycDdZT3NjVXJmWE1QRnhBeDBjSApMN2VZZ1doQ2ppaWM3bjYrZzJXK0FnS0p6eEtPd2xIWVlOMkxsTzdUdE91NDF5Kzg0YnhLZ1FJREFRQUJvMUF3ClRqQWRCZ05WSFE0RUZnUVVtV0RpYVhpZE10UUNuNEVraEM5MFpXZ1dFdVl3SHdZRFZSMGpCQmd3Rm9BVW1XRGkKYVhpZE10UUNuNEVraEM5MFpXZ1dFdVl3REFZRFZSMFRCQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBRVY0NWVBRTViZlpjaGFQN3ZvcCt2K1k1bnoxQ25GaTBpZ052RDhDaDIzdWZGU2pBN1JMckxzMGxTa3dxClh1ZndXY1cwQlRNMFpXQVdBTk5LOWdyUmNIeTNWQWpXTWUyaDI0YWQxZ0JiREJPaTcrSFF0b0lnalhyc0ZBamIKQ0llNERodU5qUGNTVm9mTS9yemNGWFFXUDhiTzVNdXg5UGw2NW5JOCtiR3FwcVY0UUJldEhXVWdHclBJYmhQbQpjQlhGUFVqb2xFM09JZzhzTnFWVWRuMnZsWHNaWU1tMktBUnNPUjd3N1dkUU1zYkVqd3EzN3Y0SHpGbC95SmJmClNabm83QlR5c3ZNWExxcDhrMEErRG1iTkM1Sk5nRkI4ZU1SYmlpUVVtcklQRWVCaEJaVHNrUVJrMmR0cWpsZlkKUEwya3liWHNvZ2oxdm5pWjdhRDIwQTZmdEE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
    "tls.key": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ21NTUJnaTdGUnplaUMKVXVSQ3hyVmtXdFgyVUlBNVJhVmQ4Rk1PY05VcXpIWDViSFNKNmhoTytwTmpyTWNFSHVRNndzakl5VXhjRmN1dQpMZXorMElIajdHNUtLWkY0M1NNbkppa1FjZ2dMQVRyOWhOTHhaL2xyMnBNN01GRXBhSldWZVgzNU1LaFVZNHg3CmR0ZzYxTXJhRnVYWWZLVDBmeFlwd1dYcjVOeHd4MURqd3ByRmI2VjFaZkJaUmErNEthcXRzVVEvVTdZY1B0NmIKd1pNczh3SnJTYWFIUmFybCs1TzZQa05jbCtMblhSZ3pObGJBTmVQQytMdDFsNVdyN2Q3NFFIK0o5Z2JNWU5yYQpudGc2eHhTdDljdzhYRURIUndjdnQ1aUJhRUtPS0p6dWZyNkRaYjRDQW9uUEVvN0NVZGhnM1l1VTd0TzA2N2pYCkw3emh2RXFCQWdNQkFBRUNnZ0VBSzMzd3FwT0VTVE5JMk9wV2dEOCtjMC91VkxMR2k3WjFTM3M4VVRnb0lUWTIKM1pxTGVSaEJXbEhyUnBlTjBiOC8zVHppak9GWlVYUUd4TU9TRlRGOS9LY0FTZnBNN3NONGtxTkM5ZUhSeHdlQQpaNTVlRWYweTRnM21vQVBLQ2Jzc0FsMDBJWVdoVjh4aGxHSUt2b0szdjVGa2YxNUhVUkQ5UE5vM0VSL29yTDZnCnJJNnFRbkRCQ1VOdll5RFF2YjE2Ni82T1FiTVVFaS9sdHR3WHRzTzJuMzRRRkorVC9pcm93N0RobXAvdjJ6Y2gKTDFuL0RwQVNXZkU3ZENublduOGRKZmtWRlV6MmJkVHUzYTliaUtYTFN2MHAwZnJIWXEzNk5hWG5ZTFBMMUpwYwpTTXVKb1BUdVNZV1lUQnQvOGtiSFNxeWJrYUJEa0RLNGNucXBCUjdEVVFLQmdRRFJnc3dKc2dWU0lvOU5uRlpiCjd6K21qWlVtd0RyMXhNSWFHMndXdzgyMkFQdmY5S2RhNjhjQitLUmtpZXUxTS9rK0lVSUpSaXBGdDY4d3pMVUgKcDdObUQ5NTBuMnVtenJUT1ZHOHA3b1BCRXNjOHRiY1RxUHoyaGp5aTZWOUZCZEUvN1BQdzlZNG5rM0Z2ME5SOApCNnJmSkNRKzNPRW12Mmd4cDdkby9zS1VWUUtCZ1FETEVTWEFWS3d6NnlPR3AwSktEejVIb1RiMnVxMWdGK2JzCnErUS9OeHRHOXM4cHFHYWcyZjc0WVZFd3E4QjB3eWNCcVlyakxibS9pZExBcjlJQ1BiOUd3UmY2VC81WFNyN3IKa3AzUmZuQ3NaQVhJOWNNYzR2dGdKbDNTckIrTkJ3d2JXNnRsUWN5c1F5SVpCd0hZVDZadGdZRmxzN1plZzhXRgp0R3FlTVZkcGZRS0JnRmw0Uk5BRElQaVJYNmNpRTFNUldab3pyalV0TkVDT05PSFhRaEo2clplQzFnMHV1bVUrCmVPN2prcmlJbVlyNVZmL3RUZmtONkxGN0hxcDFVUDJpNVI2NXVpTU5qWGhmbjZEWk45dXRTc0NoMTBtYXhFTDIKRUlqcWpHeDV3c0NFR25iMUpydUk4WnIvQVJ0aUQ4dWpycG02SW14aUFSaDk5dTMxbElLWEFOczlBb0dBSkJ3cQpnR2NPTURWU0hmSEVRZk12K2dEYkMwanE1N21ZWU9HNE50MlB4akRCYWdEK0x3QlU3TW94YTl3KzN3U00vU2l1Ci8vTHpvdkhaUGxhRm04eHJKU1BWSmJmdjNJbjRKVi92SEgvRmZZSlQzUWFHNmE0YlVWL0JNMk5VUVBuTjExZVgKeE92TWY1MTRoTWJRTnkwQ3hWcFFMa3VrMUczT1JCWnZGeTVqQXVrQ2dZRUFxWlRVNWQ0SHlnZUtjbVRSRWkwcQpiZjhyVGtaZ2hFMUg5c0JoMEEveGxWbkpZSEk2RzZ0U1JEYVZCazI4R3lZYkRqcWs1ZGJ1RVBSb3lmNytCaC9RCnNMTGNaN2p6R3loTzJnbFdXV1ZFb04yNTl5QzR0QWVZQ3IwSFRUUXZDUU1OeFJ0QytPZ21jTzVQTWdYQzQxekIKRithSnFqdHR4M09BUXJpVU9oVENDQ2s9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"
  },
  "kind": "Secret",
  "metadata": {
    "name": "traefik-cert",
    "namespace": "demo"
  },
  "type": "Opaque"
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "demo"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"filebeat\"},\"name\":\"filebeat\",\"namespace\":\"demo\"},\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"app\":\"filebeat\"},\"name\":\"filebeat\"},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"LOGSTASH_HOSTS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOGSTASH_HOSTS\",\"name\":\"environment-variables\"}}},{\"name\":\"LOG_LEVEL\",\"value\":\"info\"}],\"image\":\"virginvoyages-vxp-images.jfrog.io/filebeat\",\"name\":\"filebeat\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs\",\"name\":\"varlogpods\",\"readOnly\":true},{\"mountPath\":\"/var/log/filebeat\",\"name\":\"filebeatlogs\"},{\"mountPath\":\"/etc/filebeat/\",\"name\":\"filebeat-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlogs\"}]}],\"imagePullSecrets\":[{\"name\":\"vxp-artifactory\"}],\"terminationGracePeriodSeconds\":30,\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs\"},\"name\":\"varlogpods\"},{\"hostPath\":{\"path\":\"/var/log/filebeat\"},\"name\":\"filebeatlogs\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs\"},\"name\":\"tomcatlogs\"},{\"configMap\":{\"name\":\"filebeat-configmap\"},\"name\":\"filebeat-properties\"}]}}}}\n"
    },
    "labels": {
      "app": "filebeat"
    },
    "name": "filebeat",
    "namespace": "demo"
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "app": "filebeat"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "filebeat"
        },
        "name": "filebeat"
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOGSTASH_HOSTS",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOGSTASH_HOSTS",
                    "name": "environment-variables"
                  }
                }
              },
              {
                "name": "LOG_LEVEL",
                "value": "info"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/filebeat",
            "imagePullPolicy": "Always",
            "name": "filebeat",
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs",
                "name": "varlogpods",
                "readOnly": true
              },
              {
                "mountPath": "/var/log/filebeat",
                "name": "filebeatlogs"
              },
              {
                "mountPath": "/etc/filebeat/",
                "name": "filebeat-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlogs"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs"
            },
            "name": "varlogpods"
          },
          {
            "hostPath": {
              "path": "/var/log/filebeat"
            },
            "name": "filebeatlogs"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs"
            },
            "name": "tomcatlogs"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "filebeat-configmap"
            },
            "name": "filebeat-properties"
          }
        ]
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"traefik-ingress-lb\"},\"name\":\"traefik-ingress-controller\",\"namespace\":\"demo\"},\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"traefik-ingress-lb\",\"name\":\"traefik-ingress-lb\"}},\"spec\":{\"containers\":[{\"args\":[\"--configfile=/config/traefik.toml\",\"-d\",\"--web\",\"--web.address=:8081\",\"--kubernetes\",\"--logLevel=DEBUG\"],\"image\":\"traefik\",\"name\":\"traefik-ingress-lb\",\"ports\":[{\"containerPort\":80},{\"containerPort\":443}],\"resources\":{\"limits\":{\"cpu\":\"200m\",\"memory\":\"30Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"20Mi\"}},\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/ssl\",\"name\":\"ssl\"},{\"mountPath\":\"/config\",\"name\":\"config\"}]}],\"hostNetwork\":true,\"serviceAccountName\":\"traefik-ingress-controller\",\"terminationGracePeriodSeconds\":60,\"volumes\":[{\"name\":\"ssl\",\"secret\":{\"secretName\":\"traefik-cert\"}},{\"configMap\":{\"name\":\"traefik-conf\"},\"name\":\"config\"}]}}}}\n"
    },
    "labels": {
      "k8s-app": "traefik-ingress-lb"
    },
    "name": "traefik-ingress-controller",
    "namespace": "demo"
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "k8s-app": "traefik-ingress-lb",
        "name": "traefik-ingress-lb"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "k8s-app": "traefik-ingress-lb",
          "name": "traefik-ingress-lb"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "--web",
              "--web.address=:8081",
              "--kubernetes",
              "--logLevel=ERROR"
            ],
            "image": "traefik",
            "imagePullPolicy": "Always",
            "name": "traefik-ingress-lb",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 80,
                "protocol": "TCP"
              },
              {
                "containerPort": 443,
                "hostPort": 443,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "900m",
                "memory": "900Mi"
              },
              "requests": {
                "cpu": "900m",
                "memory": "900Mi"
              }
            },
            "securityContext": {
              "privileged": true
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/config",
                "name": "config"
              }
            ]
          }
        ],
        "hostNetwork": true,
        "schedulerName": "default-scheduler",
        "serviceAccount": "traefik-ingress-controller",
        "serviceAccountName": "traefik-ingress-controller",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "traefik-conf"
            },
            "name": "config"
          }
        ]
      }
    },
    "templateGeneration": 4,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "5"
    },
    "labels": {
      "app": "magnolia",
      "version": "latest",
      "visualize": "true"
    },
    "name": "magnolia",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "magnolia",
        "version": "latest",
        "visualize": "true"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "magnolia",
          "version": "latest",
          "visualize": "true"
        }
      },
      "spec": {
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "In",
                      "values": [
                        "ip-172-31-112-92.ec2.internal"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "containers": [
          {
            "image": "34.193.148.15:5000/magnolia:0.0.0.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "magnolia",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "6Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/opt/tomcat/logs",
                "name": "magnolialogs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/repositories",
                "name": "author-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/repositories",
                "name": "public-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/WEB-INF/classes",
                "name": "author-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/WEB-INF/classes",
                "name": "public-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/logs",
                "name": "author-logs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/logs",
                "name": "public-logs"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/magnolia"
            },
            "name": "magnolialogs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/repository"
            },
            "name": "author-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/classes"
            },
            "name": "author-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/logs"
            },
            "name": "author-logs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/logs"
            },
            "name": "public-logs"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "minio"
    },
    "name": "minio-deployment",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "minio"
      }
    },
    "strategy": {
      "type": "Recreate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "minio"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "server",
              "/storage"
            ],
            "env": [
              {
                "name": "MINIO_ACCESS_KEY",
                "value": "AKIAIV3BWSIUMSSG6BNA"
              },
              {
                "name": "MINIO_SECRET_KEY",
                "value": "A9Z4dnr0EFTBUDtlLE/LftcY1BNHjmZ2hHzsuzvD"
              }
            ],
            "image": "minio/minio",
            "imagePullPolicy": "Always",
            "name": "minio",
            "ports": [
              {
                "containerPort": 9000,
                "hostPort": 9000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/storage",
                "name": "minio-storage"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "name": "minio-storage",
            "persistentVolumeClaim": {
              "claimName": "minio-storage"
            }
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "blueonlinecheckinbff",
      "blueonlinecheckinbff-v007": "true",
      "cluster": "blueonlinecheckinbff",
      "load-balancer-blueonlinecheckinbff": "true",
      "replication-controller": "blueonlinecheckinbff-v007",
      "version": "7"
    },
    "name": "blueonlinecheckinbff-v007",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "blueonlinecheckinbff",
        "blueonlinecheckinbff-v007": "true",
        "cluster": "blueonlinecheckinbff",
        "replication-controller": "blueonlinecheckinbff-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "blueonlinecheckinbff",
          "blueonlinecheckinbff-v007": "true",
          "cluster": "blueonlinecheckinbff",
          "load-balancer-blueonlinecheckinbff": "true",
          "replication-controller": "blueonlinecheckinbff-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_NCL_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/blue-online-check-in-bff:1.0.8",
            "imagePullPolicy": "IfNotPresent",
            "name": "blue-online-check-in-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "ncl-online-check-in-bff-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/ncl-online-check-in-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "ncl-online-check-in-bff-configmap"
            },
            "name": "ncl-online-check-in-bff-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dclreservationbff",
      "cluster": "dclreservationbff",
      "dclreservationbff-v074": "true",
      "load-balancer-dclreservationbff": "true",
      "replication-controller": "dclreservationbff-v074",
      "version": "74"
    },
    "name": "dclreservationbff-v074",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dclreservationbff",
        "cluster": "dclreservationbff",
        "dclreservationbff-v074": "true",
        "replication-controller": "dclreservationbff-v074",
        "version": "74"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dclreservationbff",
          "cluster": "dclreservationbff",
          "dclreservationbff-v074": "true",
          "load-balancer-dclreservationbff": "true",
          "replication-controller": "dclreservationbff-v074",
          "version": "74"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_RESERVATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMER_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_RESERVATION_CONSUMER_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/demo-reservation-bff:1.0.268",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/reservation-bff/version",
                "port": 8081,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "demo-reservation-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "reservation-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "reservation-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/reservation-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "reservation-bff-configmap"
            },
            "name": "reservation-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "reservation-ui-configmap"
            },
            "name": "reservation-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationbff",
      "cluster": "dxpactivityreservationbff",
      "dxpactivityreservationbff-v002": "true",
      "load-balancer-dxpactivityreservationbff": "true",
      "replication-controller": "dxpactivityreservationbff-v002",
      "version": "2"
    },
    "name": "dxpactivityreservationbff-v002",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationbff",
        "cluster": "dxpactivityreservationbff",
        "dxpactivityreservationbff-v002": "true",
        "replication-controller": "dxpactivityreservationbff-v002",
        "version": "2"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationbff",
          "cluster": "dxpactivityreservationbff",
          "dxpactivityreservationbff-v002": "true",
          "load-balancer-dxpactivityreservationbff": "true",
          "replication-controller": "dxpactivityreservationbff-v002",
          "version": "2"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/activity-reservation-bff:1.0.113",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "activity-reservation-system-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "activity-reservation-system-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          },
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-system-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-system-bff-configmap"
            },
            "name": "activity-reservation-system-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-system-ui-configmap"
            },
            "name": "activity-reservation-system-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationservice",
      "cluster": "dxpactivityreservationservice",
      "dxpactivityreservationservice-v009": "true",
      "load-balancer-dxpactivityreservationservice": "true",
      "replication-controller": "dxpactivityreservationservice-v009",
      "version": "9"
    },
    "name": "dxpactivityreservationservice-v009",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationservice",
        "cluster": "dxpactivityreservationservice",
        "dxpactivityreservationservice-v009": "true",
        "replication-controller": "dxpactivityreservationservice-v009",
        "version": "9"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationservice",
          "cluster": "dxpactivityreservationservice",
          "dxpactivityreservationservice-v009": "true",
          "load-balancer-dxpactivityreservationservice": "true",
          "replication-controller": "dxpactivityreservationservice-v009",
          "version": "9"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx1024m"
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/vas-activity-reservation-service:0.6.0.70",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-activity-reservation-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "activity-reservation-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/activity-reservation-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "activity-reservation-vas-configmap"
            },
            "name": "activity-reservation-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/activity-reservation-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpactivityreservationweb",
      "cluster": "dxpactivityreservationweb",
      "dxpactivityreservationweb-v087": "true",
      "load-balancer-dxpactivityreservationweb": "true",
      "replication-controller": "dxpactivityreservationweb-v087",
      "version": "87"
    },
    "name": "dxpactivityreservationweb-v087",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpactivityreservationweb",
        "cluster": "dxpactivityreservationweb",
        "dxpactivityreservationweb-v087": "true",
        "replication-controller": "dxpactivityreservationweb-v087",
        "version": "87"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpactivityreservationweb",
          "cluster": "dxpactivityreservationweb",
          "dxpactivityreservationweb-v087": "true",
          "load-balancer-dxpactivityreservationweb": "true",
          "replication-controller": "dxpactivityreservationweb-v087",
          "version": "87"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "baseURL",
                "value": "https://ncl.d-aws-dxp.com/svc/activity-reservation-system-bff/"
              },
              {
                "name": "piwikURL",
                "value": "http://10.3.100.55/"
              },
              {
                "name": "siteId",
                "value": "3"
              }
            ],
            "image": "34.193.148.15:5000/activity-reservation-webapp-blue:1.0.68",
            "imagePullPolicy": "IfNotPresent",
            "name": "activity-reservation-webapp-blue",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxparsadminweb",
      "cluster": "dxparsadminweb",
      "dxparsadminweb-v033": "true",
      "load-balancer-dxparsadminweb": "true",
      "replication-controller": "dxparsadminweb-v033",
      "version": "33"
    },
    "name": "dxparsadminweb-v033",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxparsadminweb",
        "cluster": "dxparsadminweb",
        "dxparsadminweb-v033": "true",
        "replication-controller": "dxparsadminweb-v033",
        "version": "33"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxparsadminweb",
          "cluster": "dxparsadminweb",
          "dxparsadminweb-v033": "true",
          "load-balancer-dxparsadminweb": "true",
          "replication-controller": "dxparsadminweb-v033",
          "version": "33"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "ENV",
                "value": "qc"
              }
            ],
            "image": "34.193.148.15:5000/ars-admin-ui:1.0.74",
            "imagePullPolicy": "IfNotPresent",
            "name": "ars-admin-ui",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxpbatchjobservice\",\"cluster\":\"dxpbatchjobservice\",\"dxpbatchjobservice-v002\":\"true\",\"load-balancer-dxpbatchjobservice\":\"true\",\"replication-controller\":\"dxpbatchjobservice-v002\",\"version\":\"2\"},\"name\":\"dxpbatchjobservice-v002\",\"namespace\":\"dxp\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxpbatchjobservice\",\"cluster\":\"dxpbatchjobservice\",\"dxpbatchjobservice-v002\":\"true\",\"replication-controller\":\"dxpbatchjobservice-v002\",\"version\":\"2\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxpbatchjobservice\",\"cluster\":\"dxpbatchjobservice\",\"dxpbatchjobservice-v002\":\"true\",\"load-balancer-dxpbatchjobservice\":\"true\",\"replication-controller\":\"dxpbatchjobservice-v002\",\"version\":\"2\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-spring-batchjob-service:0.6.0.20\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"find-image-from-cluster\",\"ports\":[{\"containerPort\":8337,\"name\":\"http\",\"protocol\":\"TCP\"}],\"resources\":{},\"terminationMessagePath\":\"/dxp/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"spring-batchjob-properties\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"cap-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/spring-batchjob-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"name\":\"spring-batchjob-configmap\"},\"name\":\"spring-batchjob-properties\"}]}}}}\n"
    },
    "labels": {
      "app": "dxpbatchjobservice",
      "cluster": "dxpbatchjobservice",
      "dxpbatchjobservice-v019": "true",
      "load-balancer-dxpbatchjobservice": "true",
      "replication-controller": "dxpbatchjobservice-v019",
      "version": "19"
    },
    "name": "dxpbatchjobservice-v019",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpbatchjobservice",
        "cluster": "dxpbatchjobservice",
        "dxpbatchjobservice-v019": "true",
        "replication-controller": "dxpbatchjobservice-v019",
        "version": "19"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpbatchjobservice",
          "cluster": "dxpbatchjobservice",
          "dxpbatchjobservice-v019": "true",
          "load-balancer-dxpbatchjobservice": "true",
          "replication-controller": "dxpbatchjobservice-v019",
          "version": "19"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "NCL_CERTIFICATE",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "NCL_CERTIFICATE",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-spring-batchjob-service:0.6.0.104",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-spring-batchjob-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "spring-batchjob-properties"
              },
              {
                "mountPath": "/etc/config-server/properties/demo/shore/certificates/vas-services/",
                "name": "ncl-certificate"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/spring-batchjob-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "spring-batchjob-configmap"
            },
            "name": "spring-batchjob-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "ncl-configmap"
            },
            "name": "ncl-certificate"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "8"
    },
    "labels": {
      "app": "dxpboardingservice",
      "cluster": "dxpboardingservice",
      "dxpboardingservice-v016": "true",
      "load-balancer-dxpboardingservice": "true",
      "replication-controller": "dxpboardingservice-v016",
      "version": "16"
    },
    "name": "dxpboardingservice-v016",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpboardingservice",
        "cluster": "dxpboardingservice",
        "dxpboardingservice-v016": "true",
        "replication-controller": "dxpboardingservice-v016",
        "version": "16"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpboardingservice",
          "cluster": "dxpboardingservice",
          "dxpboardingservice-v016": "true",
          "load-balancer-dxpboardingservice": "true",
          "replication-controller": "dxpboardingservice-v016",
          "version": "16"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_BOARDING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-boarding-service:0.6.0.30",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/boarding-service/info",
                "port": 8328,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-boarding-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8328,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "boarding-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/boarding-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "boarding-configmap"
            },
            "name": "boarding-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/boarding-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"ReplicaSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"dxpcartservice\",\"cluster\":\"dxpcartservice\",\"dxpcartservice-v004\":\"true\",\"load-balancer-dxpcartservice\":\"true\",\"replication-controller\":\"dxpcartservice-v004\",\"version\":\"4\"},\"name\":\"dxpcartservice-v004\",\"namespace\":\"dxp\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"dxpcartservice\",\"cluster\":\"dxpcartservice\",\"dxpcartservice-v004\":\"true\",\"replication-controller\":\"dxpcartservice-v004\",\"version\":\"4\"}},\"template\":{\"metadata\":{\"creationTimestamp\":null,\"labels\":{\"app\":\"dxpcartservice\",\"cluster\":\"dxpcartservice\",\"dxpcartservice-v004\":\"true\",\"load-balancer-dxpcartservice\":\"true\",\"replication-controller\":\"dxpcartservice-v004\",\"version\":\"4\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"LOG_LOCATION\",\"name\":\"environment-configmap\"}}},{\"name\":\"APPLICATION_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"APPLICATION_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"SERVICE_PROPERTIES_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"CORE_CART_SERVICE_PROPERTIES_PATH\",\"name\":\"environment-configmap\"}}},{\"name\":\"DB_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"username\",\"name\":\"app-secrets\"}}},{\"name\":\"DB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"password\",\"name\":\"app-secrets\"}}},{\"name\":\"TOMCAT_LOG_LOCATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"TOMCAT_LOG_LOCATION\",\"name\":\"environment-configmap\"}}}],\"image\":\"virginvoyages-vxp-images.jfrog.io/core-cart-service:0.6.0.9\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"find-image-from-cluster\",\"ports\":[{\"containerPort\":8304,\"name\":\"http\",\"protocol\":\"TCP\"}],\"resources\":{},\"terminationMessagePath\":\"/dxp/termination-log\",\"terminationMessagePolicy\":\"File\",\"volumeMounts\":[{\"mountPath\":\"/var/log/applogs/Logs\",\"name\":\"log-mount\"},{\"mountPath\":\"/etc/config-server/\",\"name\":\"application-properties\"},{\"mountPath\":\"/etc/config/core-services/\",\"name\":\"cart-properties\"},{\"mountPath\":\"/var/log/tomcatlogs\",\"name\":\"tomcatlog-mount\"}]}],\"imagePullSecrets\":[{\"name\":\"worknco-artifactory\"},{\"name\":\"vxp-artifactory\"}],\"schedulerName\":\"default-scheduler\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/log/applogs/cart-service/\"},\"name\":\"log-mount\"},{\"configMap\":{\"defaultMode\":420,\"items\":[{\"key\":\"application.yml\",\"path\":\"application.yml\"}],\"name\":\"application-configmap\"},\"name\":\"application-properties\"},{\"configMap\":{\"defaultMode\":420,\"items\":[{\"key\":\"cart-service.yml\",\"path\":\"cart-service.yml\"}],\"name\":\"cart-configmap\"},\"name\":\"cart-properties\"},{\"hostPath\":{\"path\":\"/var/log/tomcatlogs/cart-service/\"},\"name\":\"tomcatlog-mount\"}]}}}}\n"
    },
    "labels": {
      "app": "dxpcartservice",
      "cluster": "dxpcartservice",
      "dxpcartservice-v033": "true",
      "load-balancer-dxpcartservice": "true",
      "replication-controller": "dxpcartservice-v033",
      "version": "33"
    },
    "name": "dxpcartservice-v033",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcartservice",
        "cluster": "dxpcartservice",
        "dxpcartservice-v033": "true",
        "replication-controller": "dxpcartservice-v033",
        "version": "33"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcartservice",
          "cluster": "dxpcartservice",
          "dxpcartservice-v033": "true",
          "load-balancer-dxpcartservice": "true",
          "replication-controller": "dxpcartservice-v033",
          "version": "33"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_CART_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-cart-service:0.6.0.47",
            "imagePullPolicy": "IfNotPresent",
            "name": "find-image-from-cluster",
            "ports": [
              {
                "containerPort": 8304,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "cart-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/cart-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "application.yml",
                  "path": "application.yml"
                }
              ],
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "cart-service.yml",
                  "path": "cart-service.yml"
                }
              ],
              "name": "cart-configmap"
            },
            "name": "cart-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/cart-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6",
      "deployment.kubernetes.io/revision-history": "3"
    },
    "labels": {
      "app": "dxpchildregistrationservice",
      "cluster": "dxpchildregistrationservice",
      "dxpchildregistrationservice-v007": "true",
      "load-balancer-dxpchildregistrationservice": "true",
      "replication-controller": "dxpchildregistrationservice-v007",
      "version": "7"
    },
    "name": "dxpchildregistrationservice-v007",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpchildregistrationservice",
        "cluster": "dxpchildregistrationservice",
        "dxpchildregistrationservice-v007": "true",
        "replication-controller": "dxpchildregistrationservice-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpchildregistrationservice",
          "cluster": "dxpchildregistrationservice",
          "dxpchildregistrationservice-v007": "true",
          "load-balancer-dxpchildregistrationservice": "true",
          "replication-controller": "dxpchildregistrationservice-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_CHILDREGISTRATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-childregistration-service:0.6.0.11",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/childregistration-service/info",
                "port": 8334,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-childregistration-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8334,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "childregistration-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/childregistration-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "childregistration-configmap"
            },
            "name": "childregistration-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/childregistration-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpcomponentcatalogservice",
      "cluster": "dxpcomponentcatalogservice",
      "dxpcomponentcatalogservice-v005": "true",
      "load-balancer-dxpcomponentcatalogservice": "true",
      "replication-controller": "dxpcomponentcatalogservice-v005",
      "version": "5"
    },
    "name": "dxpcomponentcatalogservice-v005",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcomponentcatalogservice",
        "cluster": "dxpcomponentcatalogservice",
        "dxpcomponentcatalogservice-v005": "true",
        "replication-controller": "dxpcomponentcatalogservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcomponentcatalogservice",
          "cluster": "dxpcomponentcatalogservice",
          "dxpcomponentcatalogservice-v005": "true",
          "load-balancer-dxpcomponentcatalogservice": "true",
          "replication-controller": "dxpcomponentcatalogservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_COMPONENTCATALOG_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/infra-componentcatalog-service:0.6.0.9",
            "imagePullPolicy": "IfNotPresent",
            "name": "componentcatalog-service",
            "ports": [
              {
                "containerPort": 8306,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "componentcatalog-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/componentcatalog-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "application.yml",
                  "path": "application.yml"
                }
              ],
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "componentcatalog-service.yml",
                  "path": "componentcatalog-service.yml"
                }
              ],
              "name": "componentcatalog-configmap"
            },
            "name": "componentcatalog-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/componentcatalog-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpcontentaccessbff",
      "cluster": "dxpcontentaccessbff",
      "dxpcontentaccessbff-v002": "true",
      "load-balancer-dxpcontentaccessbff": "true",
      "replication-controller": "dxpcontentaccessbff-v002",
      "version": "2"
    },
    "name": "dxpcontentaccessbff-v002",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcontentaccessbff",
        "cluster": "dxpcontentaccessbff",
        "dxpcontentaccessbff-v002": "true",
        "replication-controller": "dxpcontentaccessbff-v002",
        "version": "2"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcontentaccessbff",
          "cluster": "dxpcontentaccessbff",
          "dxpcontentaccessbff-v002": "true",
          "load-balancer-dxpcontentaccessbff": "true",
          "replication-controller": "dxpcontentaccessbff-v002",
          "version": "2"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "PORT",
                "value": "3083"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/contentaccess-bff:0.0.4",
            "imagePullPolicy": "IfNotPresent",
            "name": "contentaccess-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "5"
    },
    "labels": {
      "app": "dxpcontentmanagementservice",
      "cluster": "dxpcontentmanagementservice",
      "dxpcontentmanagementservice-v012": "true",
      "load-balancer-dxpcontentmanagementservice": "true",
      "replication-controller": "dxpcontentmanagementservice-v012",
      "version": "12"
    },
    "name": "dxpcontentmanagementservice-v012",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcontentmanagementservice",
        "cluster": "dxpcontentmanagementservice",
        "dxpcontentmanagementservice-v012": "true",
        "replication-controller": "dxpcontentmanagementservice-v012",
        "version": "12"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcontentmanagementservice",
          "cluster": "dxpcontentmanagementservice",
          "dxpcontentmanagementservice-v012": "true",
          "load-balancer-dxpcontentmanagementservice": "true",
          "replication-controller": "dxpcontentmanagementservice-v012",
          "version": "12"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-content-management-service:0.6.0.21",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/content-management-service/info",
                "port": 8360,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "content-management-service",
            "ports": [
              {
                "containerPort": 8060,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "content-management-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/content-management-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "content-management-configmap"
            },
            "name": "content-management-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/contentmanagement-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpcrewbff",
      "cluster": "dxpcrewbff",
      "dxpcrewbff-v003": "true",
      "load-balancer-dxpcrewbff": "true",
      "replication-controller": "dxpcrewbff-v003",
      "version": "3"
    },
    "name": "dxpcrewbff-v003",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpcrewbff",
        "cluster": "dxpcrewbff",
        "dxpcrewbff-v003": "true",
        "replication-controller": "dxpcrewbff-v003",
        "version": "3"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpcrewbff",
          "cluster": "dxpcrewbff",
          "dxpcrewbff-v003": "true",
          "load-balancer-dxpcrewbff": "true",
          "replication-controller": "dxpcrewbff-v003",
          "version": "3"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "PORT",
                "value": "3082"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/crew-bff:0.0.5",
            "imagePullPolicy": "IfNotPresent",
            "name": "crew-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpdaemonservice",
      "cluster": "dxpdaemonservice",
      "dxpdaemonservice-v030": "true",
      "load-balancer-dxpdaemonservice": "true",
      "replication-controller": "dxpdaemonservice-v030",
      "version": "30"
    },
    "name": "dxpdaemonservice-v030",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdaemonservice",
        "cluster": "dxpdaemonservice",
        "dxpdaemonservice-v030": "true",
        "replication-controller": "dxpdaemonservice-v030",
        "version": "30"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdaemonservice",
          "cluster": "dxpdaemonservice",
          "dxpdaemonservice-v030": "true",
          "load-balancer-dxpdaemonservice": "true",
          "replication-controller": "dxpdaemonservice-v030",
          "version": "30"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "DXP_DAEMON_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/dxp-daemon-service:0.7.0.123",
            "imagePullPolicy": "IfNotPresent",
            "name": "dxp-daemon-service",
            "ports": [
              {
                "containerPort": 8348,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "daemon-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dxp-daemon-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "daemon-configmap"
            },
            "name": "daemon-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxpdevicecontentservice",
      "cluster": "dxpdevicecontentservice",
      "dxpdevicecontentservice-v037": "true",
      "load-balancer-dxpdevicecontentservice": "true",
      "replication-controller": "dxpdevicecontentservice-v037",
      "version": "37"
    },
    "name": "dxpdevicecontentservice-v037",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdevicecontentservice",
        "cluster": "dxpdevicecontentservice",
        "dxpdevicecontentservice-v037": "true",
        "replication-controller": "dxpdevicecontentservice-v037",
        "version": "37"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdevicecontentservice",
          "cluster": "dxpdevicecontentservice",
          "dxpdevicecontentservice-v037": "true",
          "load-balancer-dxpdevicecontentservice": "true",
          "replication-controller": "dxpdevicecontentservice-v037",
          "version": "37"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_DEVICECONTENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-devicecontent-service:0.6.0.57",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/devicecontent-service/info",
                "port": 8330,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-devicecontent-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "devicecontent-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/devicecontent-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "devicecontent-configmap"
            },
            "name": "devicecontent-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/devicecontent-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpdeviceservice",
      "cluster": "dxpdeviceservice",
      "dxpdeviceservice-v006": "true",
      "load-balancer-dxpdevicecontentservice": "true",
      "replication-controller": "dxpdeviceservice-v006",
      "version": "6"
    },
    "name": "dxpdeviceservice-v006",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdeviceservice",
        "cluster": "dxpdeviceservice",
        "dxpdeviceservice-v006": "true",
        "replication-controller": "dxpdeviceservice-v006",
        "version": "6"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdeviceservice",
          "cluster": "dxpdeviceservice",
          "dxpdeviceservice-v006": "true",
          "load-balancer-dxpdevicecontentservice": "true",
          "replication-controller": "dxpdeviceservice-v006",
          "version": "6"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_DEVICE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "172.31.23.97:5000/core-device-service:0.6.0.10",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-device-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "device-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          },
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/device-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "device-configmap"
            },
            "name": "device-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/device-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpdiningservice",
      "cluster": "dxpdiningservice",
      "dxpdiningservice-v005": "true",
      "load-balancer-dxpdiningservice": "true",
      "replication-controller": "dxpdiningservice-v005",
      "version": "5"
    },
    "name": "dxpdiningservice-v005",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpdiningservice",
        "cluster": "dxpdiningservice",
        "dxpdiningservice-v005": "true",
        "replication-controller": "dxpdiningservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpdiningservice",
          "cluster": "dxpdiningservice",
          "dxpdiningservice-v005": "true",
          "load-balancer-dxpdiningservice": "true",
          "replication-controller": "dxpdiningservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_DINING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "34.193.148.15:5000/core-dining-service:0.6.0.11",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-dining-service",
            "ports": [
              {
                "containerPort": 8335,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "dining-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dining-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "dining-configmap"
            },
            "name": "dining-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/dining-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpembarkationadminservice",
      "cluster": "dxpembarkationadminservice",
      "dxpembarkationadminservice-v041": "true",
      "load-balancer-dxpembarkationadminservice": "true",
      "replication-controller": "dxpembarkationadminservice-v041",
      "version": "41"
    },
    "name": "dxpembarkationadminservice-v041",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationadminservice",
        "cluster": "dxpembarkationadminservice",
        "dxpembarkationadminservice-v041": "true",
        "replication-controller": "dxpembarkationadminservice-v041",
        "version": "41"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationadminservice",
          "cluster": "dxpembarkationadminservice",
          "dxpembarkationadminservice-v041": "true",
          "load-balancer-dxpembarkationadminservice": "true",
          "replication-controller": "dxpembarkationadminservice-v041",
          "version": "41"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/vas-embarkationadmin-service:0.2.0.103",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-embarkationadmin-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8405,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "embarkationadmin-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkationadmin-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkationadmin-vas-configmap"
            },
            "name": "embarkationadmin-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/embarkationadmin-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpembarkationbff",
      "cluster": "dxpembarkationbff",
      "dxpembarkationbff-v017": "true",
      "load-balancer-dxpembarkationbff": "true",
      "replication-controller": "dxpembarkationbff-v017",
      "version": "17"
    },
    "name": "dxpembarkationbff-v017",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationbff",
        "cluster": "dxpembarkationbff",
        "dxpembarkationbff-v017": "true",
        "replication-controller": "dxpembarkationbff-v017",
        "version": "17"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationbff",
          "cluster": "dxpembarkationbff",
          "dxpembarkationbff-v017": "true",
          "load-balancer-dxpembarkationbff": "true",
          "replication-controller": "dxpembarkationbff-v017",
          "version": "17"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_EMBARKATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/embarkation-bff:1.0.142",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/embarkation-bff/version",
                "port": 3006,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "embarkation-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "embarkation-bff-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkation-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkation-bff-configmap"
            },
            "name": "embarkation-bff-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpembarkationnorule",
      "cluster": "dxpembarkationnorule",
      "dxpembarkationnorule-v021": "true",
      "load-balancer-dxpembarkationnorule": "true",
      "replication-controller": "dxpembarkationnorule-v021",
      "version": "21"
    },
    "name": "dxpembarkationnorule-v021",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationnorule",
        "cluster": "dxpembarkationnorule",
        "dxpembarkationnorule-v021": "true",
        "replication-controller": "dxpembarkationnorule-v021",
        "version": "21"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationnorule",
          "cluster": "dxpembarkationnorule",
          "dxpembarkationnorule-v021": "true",
          "load-balancer-dxpembarkationnorule": "true",
          "replication-controller": "dxpembarkationnorule-v021",
          "version": "21"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_EMBARKATION_NO_RULE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/vas-embarkationnorule-service:0.6.0.5",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-embarkationnorule-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "embarkationnorule-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkationnorule-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkationnorule-vas-configmap"
            },
            "name": "embarkationnorule-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/embarkationnorule-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpembarkationservice",
      "cluster": "dxpembarkationservice",
      "dxpembarkationservice-v005": "true",
      "load-balancer-dxpembarkationservice": "true",
      "replication-controller": "dxpembarkationservice-v005",
      "version": "5"
    },
    "name": "dxpembarkationservice-v005",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpembarkationservice",
        "cluster": "dxpembarkationservice",
        "dxpembarkationservice-v005": "true",
        "replication-controller": "dxpembarkationservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpembarkationservice",
          "cluster": "dxpembarkationservice",
          "dxpembarkationservice-v005": "true",
          "load-balancer-dxpembarkationservice": "true",
          "replication-controller": "dxpembarkationservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_EMBARKATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/vas-embarkation-service:0.6.0.203",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-embarkation-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8402,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "embarkation-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/embarkation-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "embarkation-vas-configmap"
            },
            "name": "embarkation-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/embarkation-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpeventstoreservice",
      "cluster": "dxpeventstoreservice",
      "dxpeventstoreservice-v000": "true",
      "load-balancer-dxpeventstoreservice": "true",
      "replication-controller": "dxpeventstoreservice-v000",
      "version": "0"
    },
    "name": "dxpeventstoreservice-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpeventstoreservice",
        "cluster": "dxpeventstoreservice",
        "dxpeventstoreservice-v000": "true",
        "replication-controller": "dxpeventstoreservice-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpeventstoreservice",
          "cluster": "dxpeventstoreservice",
          "dxpeventstoreservice-v000": "true",
          "load-balancer-dxpeventstoreservice": "true",
          "replication-controller": "dxpeventstoreservice-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_EVENTSTORE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-eventstore-service:0.6.0.6",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-eventstore-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "eventstore-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/eventstore-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "eventstore-configmap"
            },
            "name": "eventstore-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/eventstore-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpfoodnbeverageservice",
      "cluster": "dxpfoodnbeverageservice",
      "dxpfoodnbeverageservice-v000": "true",
      "load-balancer-dxpfoodnbeverageservice": "true",
      "replication-controller": "dxpfoodnbeverageservice-v000",
      "version": "0"
    },
    "name": "dxpfoodnbeverageservice-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpfoodnbeverageservice",
        "cluster": "dxpfoodnbeverageservice",
        "dxpfoodnbeverageservice-v000": "true",
        "replication-controller": "dxpfoodnbeverageservice-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpfoodnbeverageservice",
          "cluster": "dxpfoodnbeverageservice",
          "dxpfoodnbeverageservice-v000": "true",
          "load-balancer-dxpfoodnbeverageservice": "true",
          "replication-controller": "dxpfoodnbeverageservice-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_FOODNBEVERAGE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-foodnbeverage-service:0.6.0.5",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-foodnbeverage-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "foodnbeverage-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/foodnbeverage-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "foodnbeverage-configmap"
            },
            "name": "foodnbeverage-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/foodnbeverage-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpguestmultimediaservice",
      "cluster": "dxpguestmultimediaservice",
      "dxpguestmultimediaservice-v000": "true",
      "load-balancer-dxpguestmultimediaservice": "true",
      "replication-controller": "dxpguestmultimediaservice-v000",
      "version": "0"
    },
    "name": "dxpguestmultimediaservice-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpguestmultimediaservice",
        "cluster": "dxpguestmultimediaservice",
        "dxpguestmultimediaservice-v000": "true",
        "replication-controller": "dxpguestmultimediaservice-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpguestmultimediaservice",
          "cluster": "dxpguestmultimediaservice",
          "dxpguestmultimediaservice-v000": "true",
          "load-balancer-dxpguestmultimediaservice": "true",
          "replication-controller": "dxpguestmultimediaservice-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_GUESTMULTIMEDIA_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-guestmultimedia-service:0.6.0.6",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-guestmultimedia-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "guestmultimedia-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/guestmultimedia-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "guestmultimedia-configmap"
            },
            "name": "guestmultimedia-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/guestmultimedia-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "10"
    },
    "labels": {
      "app": "dxpguestservice",
      "cluster": "dxpguestservice",
      "dxpguestservice-v030": "true",
      "load-balancer-dxpguestservice": "true",
      "replication-controller": "dxpguestservice-v030",
      "version": "30"
    },
    "name": "dxpguestservice-v030",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpguestservice",
        "cluster": "dxpguestservice",
        "dxpguestservice-v030": "true",
        "replication-controller": "dxpguestservice-v030",
        "version": "30"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpguestservice",
          "cluster": "dxpguestservice",
          "dxpguestservice-v030": "true",
          "load-balancer-dxpguestservice": "true",
          "replication-controller": "dxpguestservice-v030",
          "version": "30"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_GUEST_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-guest-service:0.6.0.84",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-guest-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8303,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "guest-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/guest-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "guest-configmap"
            },
            "name": "guest-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/guest-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxphousekeepingbff",
      "cluster": "dxphousekeepingbff",
      "dxphousekeepingbff-v002": "true",
      "load-balancer-dxphousekeepingbff": "true",
      "replication-controller": "dxphousekeepingbff-v002",
      "version": "2"
    },
    "name": "dxphousekeepingbff-v002",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxphousekeepingbff",
        "cluster": "dxphousekeepingbff",
        "dxphousekeepingbff-v002": "true",
        "replication-controller": "dxphousekeepingbff-v002",
        "version": "2"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxphousekeepingbff",
          "cluster": "dxphousekeepingbff",
          "dxphousekeepingbff-v002": "true",
          "load-balancer-dxphousekeepingbff": "true",
          "replication-controller": "dxphousekeepingbff-v002",
          "version": "2"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "PORT",
                "value": "3081"
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/housekeeping-bff:0.0.7",
            "imagePullPolicy": "IfNotPresent",
            "name": "housekeeping-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxpidcrossreferenceservice",
      "cluster": "dxpidcrossreferenceservice",
      "dxpidcrossreferenceservice-v022": "true",
      "load-balancer-dxpidcrossreferenceservice": "true",
      "replication-controller": "dxpidcrossreferenceservice-v022",
      "version": "22"
    },
    "name": "dxpidcrossreferenceservice-v022",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpidcrossreferenceservice",
        "cluster": "dxpidcrossreferenceservice",
        "dxpidcrossreferenceservice-v022": "true",
        "replication-controller": "dxpidcrossreferenceservice-v022",
        "version": "22"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpidcrossreferenceservice",
          "cluster": "dxpidcrossreferenceservice",
          "dxpidcrossreferenceservice-v022": "true",
          "load-balancer-dxpidcrossreferenceservice": "true",
          "replication-controller": "dxpidcrossreferenceservice-v022",
          "version": "22"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-idcrossreference-service:0.6.0.28",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/idcrossreference-service/info",
                "port": 8326,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-idcrossreference-service",
            "ports": [
              {
                "containerPort": 8326,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "idcrossreference-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/idcrossreference-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "idcrossreference-configmap"
            },
            "name": "idcrossreference-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/idcrossreference-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpidentityaccessmanagementservice",
      "cluster": "dxpidentityaccessmanagementservice",
      "dxpidentityaccessmanagementservice-v018": "true",
      "load-balancer-dxpidentityaccessmanagementservice": "true",
      "replication-controller": "dxpidentityaccessmanagementservice-v018",
      "version": "18"
    },
    "name": "dxpidentityaccessmanagementservice-v018",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "dxpidentityaccessmanagementservice",
        "cluster": "dxpidentityaccessmanagementservice",
        "dxpidentityaccessmanagementservice-v018": "true",
        "replication-controller": "dxpidentityaccessmanagementservice-v018",
        "version": "18"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpidentityaccessmanagementservice",
          "cluster": "dxpidentityaccessmanagementservice",
          "dxpidentityaccessmanagementservice-v018": "true",
          "load-balancer-dxpidentityaccessmanagementservice": "true",
          "replication-controller": "dxpidentityaccessmanagementservice-v018",
          "version": "18"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DXPKEYSTORE_VALUE",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "dxpkeystore",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-identity-access-management-service:0.6.0.81",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/identityaccessmanagement-service/info",
                "port": 8362,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-identityaccessmanagement-service",
            "ports": [
              {
                "containerPort": 8362,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "identity-access-management-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/identity-access-management-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "identity-access-management-configmap"
            },
            "name": "identity-access-management-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/identityaccessmanagement-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6"
    },
    "labels": {
      "app": "dxpimageprocessingservice",
      "cluster": "dxpimageprocessingservice",
      "dxpimageprocessingservice-v045": "true",
      "load-balancer-dxpimageprocessingservice": "true",
      "replication-controller": "dxpimageprocessingservice-v045",
      "version": "45"
    },
    "name": "dxpimageprocessingservice-v045",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpimageprocessingservice",
        "cluster": "dxpimageprocessingservice",
        "dxpimageprocessingservice-v045": "true",
        "replication-controller": "dxpimageprocessingservice-v045",
        "version": "45"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpimageprocessingservice",
          "cluster": "dxpimageprocessingservice",
          "dxpimageprocessingservice-v045": "true",
          "load-balancer-dxpimageprocessingservice": "true",
          "replication-controller": "dxpimageprocessingservice-v045",
          "version": "45"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "BASICTOKEN",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "basictoken",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEYID",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkeyid",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEUSER",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemPassword",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-imageprocessing-service:0.6.0.59",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-imageprocessing-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "1200Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "imageprocessing-properties"
              },
              {
                "mountPath": "/etc/config-server",
                "name": "application-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/imageprocessing-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "imageprocessing-configmap"
            },
            "name": "imageprocessing-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpincidentmanagementservice",
      "cluster": "dxpincidentmanagementservice",
      "dxpincidentmanagementservice-v000": "true",
      "load-balancer-dxpincidentmanagementservice": "true",
      "replication-controller": "dxpincidentmanagementservice-v000",
      "version": "0"
    },
    "name": "dxpincidentmanagementservice-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpincidentmanagementservice",
        "cluster": "dxpincidentmanagementservice",
        "dxpincidentmanagementservice-v000": "true",
        "replication-controller": "dxpincidentmanagementservice-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpincidentmanagementservice",
          "cluster": "dxpincidentmanagementservice",
          "dxpincidentmanagementservice-v000": "true",
          "load-balancer-dxpincidentmanagementservice": "true",
          "replication-controller": "dxpincidentmanagementservice-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_INCIDENTMANAGEMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-incidentmanagement-service:0.6.0.2",
            "imagePullPolicy": "IfNotPresent",
            "name": "incidentmanagement-service",
            "ports": [
              {
                "containerPort": 8323,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "incidentmanagement-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/incidentmanagement-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "incident-configmap"
            },
            "name": "incidentmanagement-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/incidentmanagement-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpinfraconfigmapsyncupdemon",
      "cluster": "dxpinfraconfigmapsyncupdemon",
      "dxpinfraconfigmapsyncupdemon-v000": "true",
      "load-balancer-dxpconfigmapsyncdaemon": "true",
      "replication-controller": "dxpinfraconfigmapsyncupdemon-v000",
      "version": "0"
    },
    "name": "dxpinfraconfigmapsyncupdemon-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpinfraconfigmapsyncupdemon",
        "cluster": "dxpinfraconfigmapsyncupdemon",
        "dxpinfraconfigmapsyncupdemon-v000": "true",
        "replication-controller": "dxpinfraconfigmapsyncupdemon-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpinfraconfigmapsyncupdemon",
          "cluster": "dxpinfraconfigmapsyncupdemon",
          "dxpinfraconfigmapsyncupdemon-v000": "true",
          "load-balancer-dxpconfigmapsyncdaemon": "true",
          "replication-controller": "dxpinfraconfigmapsyncupdemon-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-configmap-daemon-service:0.1.0.27",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/configmap-daemon-service/info",
                "port": 8501,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-configmap-daemon-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "configmapdaemon-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              },
              {
                "mountPath": "/etc/couchdb-configs/centralconfig",
                "name": "central-config-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/configmap-demon-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "configmap-daemon-configmap"
            },
            "name": "configmapdaemon-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/configmap-daemon-service/"
            },
            "name": "tomcatlog-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "central-config-doc-configmap"
            },
            "name": "central-config-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpkieserver",
      "cluster": "dxpkieserver",
      "dxpkieserver-v007": "true",
      "load-balancer-dxpkieserver": "true",
      "replication-controller": "dxpkieserver-v007",
      "version": "7"
    },
    "name": "dxpkieserver-v007",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpkieserver",
        "cluster": "dxpkieserver",
        "dxpkieserver-v007": "true",
        "replication-controller": "dxpkieserver-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpkieserver",
          "cluster": "dxpkieserver",
          "dxpkieserver-v007": "true",
          "load-balancer-dxpkieserver": "true",
          "replication-controller": "dxpkieserver-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "SERVER_HOST_ADDRESS",
                "value": "172.31.112.200:32751"
              }
            ],
            "image": "34.193.148.15:5000/kieserver:0.1.0.10",
            "imagePullPolicy": "IfNotPresent",
            "name": "kieserver",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxplogisticsservice",
      "cluster": "dxplogisticsservice",
      "dxplogisticsservice-v003": "true",
      "load-balancer-dxplogisticsservice": "true",
      "replication-controller": "dxplogisticsservice-v003",
      "version": "3"
    },
    "name": "dxplogisticsservice-v003",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxplogisticsservice",
        "cluster": "dxplogisticsservice",
        "dxplogisticsservice-v003": "true",
        "replication-controller": "dxplogisticsservice-v003",
        "version": "3"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxplogisticsservice",
          "cluster": "dxplogisticsservice",
          "dxplogisticsservice-v003": "true",
          "load-balancer-dxplogisticsservice": "true",
          "replication-controller": "dxplogisticsservice-v003",
          "version": "3"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-logistics-service:0.6.0.22",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-logistics-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "logistics-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          },
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/logistics-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "logistics-configmap"
            },
            "name": "logistics-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/logistic-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpluggageservice",
      "cluster": "dxpluggageservice",
      "dxpluggageservice-v000": "true",
      "replication-controller": "dxpluggageservice-v000",
      "version": "0"
    },
    "name": "dxpluggageservice-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpluggageservice",
        "cluster": "dxpluggageservice",
        "dxpluggageservice-v000": "true",
        "replication-controller": "dxpluggageservice-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpluggageservice",
          "cluster": "dxpluggageservice",
          "dxpluggageservice-v000": "true",
          "replication-controller": "dxpluggageservice-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "192.100.1.160:5000/core-luggage-service:0.6.0.30",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-luggage-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "luggage-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          },
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/luggage-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "luggage-configmap"
            },
            "name": "luggage-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/luggage-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpmessagingservice",
      "cluster": "dxpmessagingservice",
      "dxpmessagingservice-v012": "true",
      "load-balancer-dxpmessagingservice": "true",
      "replication-controller": "dxpmessagingservice-v012",
      "version": "12"
    },
    "name": "dxpmessagingservice-v012",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpmessagingservice",
        "cluster": "dxpmessagingservice",
        "dxpmessagingservice-v012": "true",
        "replication-controller": "dxpmessagingservice-v012",
        "version": "12"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmessagingservice",
          "cluster": "dxpmessagingservice",
          "dxpmessagingservice-v012": "true",
          "load-balancer-dxpmessagingservice": "true",
          "replication-controller": "dxpmessagingservice-v012",
          "version": "12"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_MESSAGING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "CLIENT_TOKEN",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "basictoken",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "MAILCHIMP_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "mailChimpUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "MAILCHIMP_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "mailChimpPassword",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "MAILCHIMP_LIST_NAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "mailChimpListName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "MAILCHIMP_BASIC_TOKEN",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "mailChimpBasicToken",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "MAIL_SENDER_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "mailSenderUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "MAIL_SENDER_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "mailSenderPassword",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-messaging-service:1.0.0.49",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/messaging-service/info",
                "port": 8306,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-messaging-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "messaging-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/messaging-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "messaging-configmap"
            },
            "name": "messaging-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/messaging-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "5"
    },
    "labels": {
      "app": "dxpmoderateonlinecheckinbff",
      "cluster": "dxpmoderateonlinecheckinbff",
      "dxpmoderateonlinecheckinbff-v065": "true",
      "load-balancer-dxpmoderateonlinecheckinbff": "true",
      "replication-controller": "dxpmoderateonlinecheckinbff-v065",
      "version": "65"
    },
    "name": "dxpmoderateonlinecheckinbff-v065",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpmoderateonlinecheckinbff",
        "cluster": "dxpmoderateonlinecheckinbff",
        "dxpmoderateonlinecheckinbff-v065": "true",
        "replication-controller": "dxpmoderateonlinecheckinbff-v065",
        "version": "65"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmoderateonlinecheckinbff",
          "cluster": "dxpmoderateonlinecheckinbff",
          "dxpmoderateonlinecheckinbff-v065": "true",
          "load-balancer-dxpmoderateonlinecheckinbff": "true",
          "replication-controller": "dxpmoderateonlinecheckinbff-v065",
          "version": "65"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_MODERATE_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_MODERATE_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/moderate-online-check-in-bff:1.0.115",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/moderate-online-check-in-bff/version",
                "port": 3022,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "moci-bff",
            "ports": [
              {
                "containerPort": 3022,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "moderate-online-check-in-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "moderate-online-check-in-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/moderate-online-check-in-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "moderate-online-check-in-bff-configmap"
            },
            "name": "moderate-online-check-in-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "moderate-online-check-in-ui-configmap"
            },
            "name": "moderate-online-check-in-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "18"
    },
    "labels": {
      "app": "dxpmoderateonlinecheckinweb",
      "cluster": "dxpmoderateonlinecheckinweb",
      "dxpmoderateonlinecheckinweb-v146": "true",
      "load-balancer-dxpmoderateonlinecheckinweb": "true",
      "replication-controller": "dxpmoderateonlinecheckinweb-v146",
      "version": "146"
    },
    "name": "dxpmoderateonlinecheckinweb-v146",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpmoderateonlinecheckinweb",
        "cluster": "dxpmoderateonlinecheckinweb",
        "dxpmoderateonlinecheckinweb-v146": "true",
        "replication-controller": "dxpmoderateonlinecheckinweb-v146",
        "version": "146"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmoderateonlinecheckinweb",
          "cluster": "dxpmoderateonlinecheckinweb",
          "dxpmoderateonlinecheckinweb-v146": "true",
          "load-balancer-dxpmoderateonlinecheckinweb": "true",
          "replication-controller": "dxpmoderateonlinecheckinweb-v146",
          "version": "146"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "baseURL",
                "value": "https://ncl.d-aws-dxp.com/svc/moderate-online-check-in-bff/"
              },
              {
                "name": "idpLoginURL",
                "value": "https://idp.ncl.com/SecureAuth16/SecureAuth.aspx"
              },
              {
                "name": "idpLogoutURL",
                "value": "https://idp.ncl.com/SecureAuth16/logout.aspx"
              },
              {
                "name": "spURL",
                "value": "https://ncl.d-aws-dxp.com/web/moderate-online-checkin/"
              },
              {
                "name": "idpPublicKey",
                "value": "nclPublicKey.cert"
              },
              {
                "name": "cdnBaseURL",
                "value": "https://d1hr0d981dftf5.cloudfront.net/web/moderate-online-checkin/"
              }
            ],
            "image": "34.193.148.15:5000/blue-moderate-online-check-in:1.0.221",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/moderate-online-checkin/",
                "port": 3020,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "blue-moderate-online-check-in",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/moderate-online-check-in-web/"
            },
            "name": "log-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpmultimediastorageservice",
      "cluster": "dxpmultimediastorageservice",
      "dxpmultimediastorageservice-v036": "true",
      "load-balancer-dxpmultimediastorageservice": "true",
      "replication-controller": "dxpmultimediastorageservice-v036",
      "version": "36"
    },
    "name": "dxpmultimediastorageservice-v036",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "dxpmultimediastorageservice",
        "cluster": "dxpmultimediastorageservice",
        "dxpmultimediastorageservice-v036": "true",
        "replication-controller": "dxpmultimediastorageservice-v036",
        "version": "36"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpmultimediastorageservice",
          "cluster": "dxpmultimediastorageservice",
          "dxpmultimediastorageservice-v036": "true",
          "load-balancer-dxpmultimediastorageservice": "true",
          "replication-controller": "dxpmultimediastorageservice-v036",
          "version": "36"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEYID",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkeyid",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "S3BUCKET_ACCESSKEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "s3bucketkey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEUSER",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemUserName",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "FILESTORAGEPASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "fileSystemPassword",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-multimediastorage-service:0.6.0.52",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/multimediastorage-service/info",
                "port": 8310,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-multimediastorage-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "multimediastorage-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/multimediastorage-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "multimediastorage-configmap"
            },
            "name": "multimediastorage-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/multimediastorage-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpocrservice",
      "cluster": "dxpocrservice",
      "dxpocrservice-v042": "true",
      "load-balancer-dxpocrservice": "true",
      "replication-controller": "dxpocrservice-v042",
      "version": "42"
    },
    "name": "dxpocrservice-v042",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpocrservice",
        "cluster": "dxpocrservice",
        "dxpocrservice-v042": "true",
        "replication-controller": "dxpocrservice-v042",
        "version": "42"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpocrservice",
          "cluster": "dxpocrservice",
          "dxpocrservice-v042": "true",
          "load-balancer-dxpocrservice": "true",
          "replication-controller": "dxpocrservice-v042",
          "version": "42"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_OCR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-ocr-service:0.6.0.68",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/ocr-service/info",
                "port": 8307,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-ocr-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "ocr-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/ocr-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "ocr-configmap"
            },
            "name": "ocr-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/ocr-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6"
    },
    "labels": {
      "app": "dxponlinecheckinweb",
      "cluster": "dxponlinecheckinweb",
      "dxponlinecheckinweb-v000": "true",
      "load-balancer-dxponlinecheckinweb": "true",
      "replication-controller": "dxponlinecheckinweb-v000",
      "version": "0"
    },
    "name": "dxponlinecheckinweb-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxponlinecheckinweb",
        "cluster": "dxponlinecheckinweb",
        "dxponlinecheckinweb-v000": "true",
        "replication-controller": "dxponlinecheckinweb-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxponlinecheckinweb",
          "cluster": "dxponlinecheckinweb",
          "dxponlinecheckinweb-v000": "true",
          "load-balancer-dxponlinecheckinweb": "true",
          "replication-controller": "dxponlinecheckinweb-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "baseURL",
                "value": "https://ncl.d-aws-dxp.com/svc/online-check-in-bff/"
              },
              {
                "name": "cdnBaseURL",
                "value": "https://d1hr0d981dftf5.cloudfront.net/web/online-check-in/"
              },
              {
                "name": "spURL",
                "value": "https://ncl.d-aws-dxp.com/web/online-check-in/"
              },
              {
                "name": "idpLoginURL",
                "value": "https://qa-sso.ncl.com/SecureAuth35/"
              },
              {
                "name": "idpLogoutURL",
                "value": "https://qa-sso.ncl.com/SecureAuth35/logout.aspx"
              },
              {
                "name": "idpPublicKey",
                "value": "nclOciPublicKey.cert"
              },
              {
                "name": "hideCountryCode",
                "value": "true"
              }
            ],
            "image": "34.193.148.15:5000/blue-online-check-in:1.1.248",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/online-check-in/",
                "port": 3000,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "blue-online-check-in",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxppaymentservice",
      "cluster": "dxppaymentservice",
      "dxppaymentservice-v042": "true",
      "load-balancer-dxppaymentservice": "true",
      "replication-controller": "dxppaymentservice-v042",
      "version": "42"
    },
    "name": "dxppaymentservice-v042",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxppaymentservice",
        "cluster": "dxppaymentservice",
        "dxppaymentservice-v042": "true",
        "replication-controller": "dxppaymentservice-v042",
        "version": "42"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxppaymentservice",
          "cluster": "dxppaymentservice",
          "dxppaymentservice-v042": "true",
          "load-balancer-dxppaymentservice": "true",
          "replication-controller": "dxppaymentservice-v042",
          "version": "42"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_PAYMENT_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "CS_KEY",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "cybersourcekey",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-payment-service:0.6.0.70",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/payment-service/info",
                "port": 8305,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-payment-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "payment-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/payment-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "payment-configmap"
            },
            "name": "payment-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/payment-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxppersonlocationservice",
      "cluster": "dxppersonlocationservice",
      "dxppersonlocationservice-v035": "true",
      "load-balancer-dxppersonlocationservice": "true",
      "replication-controller": "dxppersonlocationservice-v035",
      "version": "35"
    },
    "name": "dxppersonlocationservice-v035",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxppersonlocationservice",
        "cluster": "dxppersonlocationservice",
        "dxppersonlocationservice-v035": "true",
        "replication-controller": "dxppersonlocationservice-v035",
        "version": "35"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxppersonlocationservice",
          "cluster": "dxppersonlocationservice",
          "dxppersonlocationservice-v035": "true",
          "load-balancer-dxppersonlocationservice": "true",
          "replication-controller": "dxppersonlocationservice-v035",
          "version": "35"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-personlocation-service:0.6.0.46",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/personlocation-service/info",
                "port": 8318,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-personlocation-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "personlocation-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/personlocation-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "personlocation-configmap"
            },
            "name": "personlocation-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/personlocation-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpreferencedataservice",
      "cluster": "dxpreferencedataservice",
      "dxpreferencedataservice-v023": "true",
      "load-balancer-dxpreferencedataservice": "true",
      "replication-controller": "dxpreferencedataservice-v023",
      "version": "23"
    },
    "name": "dxpreferencedataservice-v023",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreferencedataservice",
        "cluster": "dxpreferencedataservice",
        "dxpreferencedataservice-v023": "true",
        "replication-controller": "dxpreferencedataservice-v023",
        "version": "23"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreferencedataservice",
          "cluster": "dxpreferencedataservice",
          "dxpreferencedataservice-v023": "true",
          "load-balancer-dxpreferencedataservice": "true",
          "replication-controller": "dxpreferencedataservice-v023",
          "version": "23"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-referencedata-service:0.6.0.63",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/referencedata-service/info",
                "port": 8311,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-referencedata-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "referencedata-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/referencedata-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "referencedata-configmap"
            },
            "name": "referencedata-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/referencedata-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpreportingservice",
      "cluster": "dxpreportingservice",
      "dxpreportingservice-v027": "true",
      "load-balancer-dxpreportingservice": "true",
      "replication-controller": "dxpreportingservice-v027",
      "version": "27"
    },
    "name": "dxpreportingservice-v027",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreportingservice",
        "cluster": "dxpreportingservice",
        "dxpreportingservice-v027": "true",
        "replication-controller": "dxpreportingservice-v027",
        "version": "27"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreportingservice",
          "cluster": "dxpreportingservice",
          "dxpreportingservice-v027": "true",
          "load-balancer-dxpreportingservice": "true",
          "replication-controller": "dxpreportingservice-v027",
          "version": "27"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_REPORTING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-reporting-service:0.6.0.50",
            "imagePullPolicy": "IfNotPresent",
            "name": "infra-reporting-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8370,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "reporting-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/reporting-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "reporting-configmap"
            },
            "name": "reporting-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/reporting-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "4"
    },
    "labels": {
      "app": "dxpreservationservice",
      "cluster": "dxpreservationservice",
      "dxpreservationservice-v046": "true",
      "load-balancer-dxpreservationservice": "true",
      "replication-controller": "dxpreservationservice-v046",
      "version": "46"
    },
    "name": "dxpreservationservice-v046",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreservationservice",
        "cluster": "dxpreservationservice",
        "dxpreservationservice-v046": "true",
        "replication-controller": "dxpreservationservice-v046",
        "version": "46"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreservationservice",
          "cluster": "dxpreservationservice",
          "dxpreservationservice-v046": "true",
          "load-balancer-dxpreservationservice": "true",
          "replication-controller": "dxpreservationservice-v046",
          "version": "46"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_RESERVATION_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx2048m"
              }
            ],
            "image": "34.193.148.15:5000/vas-reservation-service-vv:1.0.0.105",
            "imagePullPolicy": "IfNotPresent",
            "name": "vas-reservation-service-vv",
            "ports": [
              {
                "containerPort": 8401,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "readinessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/reservation-service/info",
                "port": 8401,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "resources": {
              "limits": {
                "memory": "4Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "reservation-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/reservation-service-vv/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "reservation-configmap"
            },
            "name": "reservation-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpreservationweb",
      "cluster": "dxpreservationweb",
      "dxpreservationweb-v144": "true",
      "load-balancer-dxpreservationweb": "true",
      "replication-controller": "dxpreservationweb-v144",
      "version": "144"
    },
    "name": "dxpreservationweb-v144",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpreservationweb",
        "cluster": "dxpreservationweb",
        "dxpreservationweb-v144": "true",
        "replication-controller": "dxpreservationweb-v144",
        "version": "144"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpreservationweb",
          "cluster": "dxpreservationweb",
          "dxpreservationweb-v144": "true",
          "load-balancer-dxpreservationweb": "true",
          "replication-controller": "dxpreservationweb-v144",
          "version": "144"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "ENV",
                "value": "ncl"
              }
            ],
            "image": "34.193.148.15:5000/reservation-ui-ncl:1.0.260",
            "imagePullPolicy": "IfNotPresent",
            "name": "reservation-ui-ncl",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "8"
    },
    "labels": {
      "app": "dxpruleservice",
      "cluster": "dxpruleservice",
      "dxpruleservice-v038": "true",
      "load-balancer-dxpruleservice": "true",
      "replication-controller": "dxpruleservice-v038",
      "version": "38"
    },
    "name": "dxpruleservice-v038",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpruleservice",
        "cluster": "dxpruleservice",
        "dxpruleservice-v038": "true",
        "replication-controller": "dxpruleservice-v038",
        "version": "38"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpruleservice",
          "cluster": "dxpruleservice",
          "dxpruleservice-v038": "true",
          "load-balancer-dxpruleservice": "true",
          "replication-controller": "dxpruleservice-v038",
          "version": "38"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "INFRA_RULE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/infra-rule-service:0.6.0.77",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/rule-service/info",
                "port": 8375,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "infra-rule-service",
            "ports": [
              {
                "containerPort": 80,
                "hostPort": 8375,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/infra-services/",
                "name": "rule-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/rule-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "rule-configmap"
            },
            "name": "rule-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/rule-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "11"
    },
    "labels": {
      "app": "dxpsailorframeworkbff",
      "cluster": "dxpsailorframeworkbff",
      "dxpsailorframeworkbff-v031": "true",
      "load-balancer-dxpsailorframeworkbff": "true",
      "replication-controller": "dxpsailorframeworkbff-v031",
      "version": "31"
    },
    "name": "dxpsailorframeworkbff-v031",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsailorframeworkbff",
        "cluster": "dxpsailorframeworkbff",
        "dxpsailorframeworkbff-v031": "true",
        "replication-controller": "dxpsailorframeworkbff-v031",
        "version": "31"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsailorframeworkbff",
          "cluster": "dxpsailorframeworkbff",
          "dxpsailorframeworkbff-v031": "true",
          "load-balancer-dxpsailorframeworkbff": "true",
          "replication-controller": "dxpsailorframeworkbff-v031",
          "version": "31"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/dxp-sailor-framework-bff:1.0.43",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/sailor-framework-bff/version",
                "port": 3014,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "dxp-sailor-framework-bff",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "sailor-framework-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "sailor-framework-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/dxp-sailor-framework-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-framework-bff-configmap"
            },
            "name": "sailor-framework-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-framework-ui-configmap"
            },
            "name": "sailor-framework-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpsailorservice",
      "cluster": "dxpsailorservice",
      "dxpsailorservice-v012": "true",
      "load-balancer-dxpsailorservice": "true",
      "replication-controller": "dxpsailorservice-v012",
      "version": "12"
    },
    "name": "dxpsailorservice-v012",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsailorservice",
        "cluster": "dxpsailorservice",
        "dxpsailorservice-v012": "true",
        "replication-controller": "dxpsailorservice-v012",
        "version": "12"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsailorservice",
          "cluster": "dxpsailorservice",
          "dxpsailorservice-v012": "true",
          "load-balancer-dxpsailorservice": "true",
          "replication-controller": "dxpsailorservice-v012",
          "version": "12"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "VAS_SAILOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/vas-sailor-service:0.6.0.20",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/sailorvas-service/info",
                "port": 8004,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "vas-sailor-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/vas-services/",
                "name": "sailor-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/sailor-service"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "sailor-vas-configmap"
            },
            "name": "sailor-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpsalesofferservice",
      "cluster": "dxpsalesofferservice",
      "dxpsalesofferservice-v009": "true",
      "load-balancer-dxpsalesofferservice": "true",
      "replication-controller": "dxpsalesofferservice-v009",
      "version": "9"
    },
    "name": "dxpsalesofferservice-v009",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsalesofferservice",
        "cluster": "dxpsalesofferservice",
        "dxpsalesofferservice-v009": "true",
        "replication-controller": "dxpsalesofferservice-v009",
        "version": "9"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsalesofferservice",
          "cluster": "dxpsalesofferservice",
          "dxpsalesofferservice-v009": "true",
          "load-balancer-dxpsalesofferservice": "true",
          "replication-controller": "dxpsalesofferservice-v009",
          "version": "9"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SALESOFFER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "34.193.148.15:5000/core-salesoffer-service:0.6.0.33",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/salesoffer-service/info",
                "port": 8302,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-salesoffer-service",
            "ports": [
              {
                "containerPort": 8302,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "salesoffer-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/salesoffer-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "salesoffer-configmap"
            },
            "name": "salesoffer-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/salesoffer-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpsalesorderservice",
      "cluster": "dxpsalesorderservice",
      "dxpsalesorderservice-v005": "true",
      "load-balancer-dxpsalesorderservice": "true",
      "replication-controller": "dxpsalesorderservice-v005",
      "version": "5"
    },
    "name": "dxpsalesorderservice-v005",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsalesorderservice",
        "cluster": "dxpsalesorderservice",
        "dxpsalesorderservice-v005": "true",
        "replication-controller": "dxpsalesorderservice-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsalesorderservice",
          "cluster": "dxpsalesorderservice",
          "dxpsalesorderservice-v005": "true",
          "load-balancer-dxpsalesorderservice": "true",
          "replication-controller": "dxpsalesorderservice-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SALESORDER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "34.193.148.15:5000/core-salesorder-service-kube:0.6.0.20",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/salesorder-service/info",
                "port": 8301,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-salesorder-service-kube",
            "ports": [
              {
                "containerPort": 8301,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "salesorder-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/salesorder-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "salesorder-configmap"
            },
            "name": "salesorder-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/salesorder-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpshipservice",
      "cluster": "dxpshipservice",
      "dxpshipservice-v013": "true",
      "load-balancer-dxpshipservice": "true",
      "replication-controller": "dxpshipservice-v013",
      "version": "13"
    },
    "name": "dxpshipservice-v013",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpshipservice",
        "cluster": "dxpshipservice",
        "dxpshipservice-v013": "true",
        "replication-controller": "dxpshipservice-v013",
        "version": "13"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpshipservice",
          "cluster": "dxpshipservice",
          "dxpshipservice-v013": "true",
          "load-balancer-dxpshipservice": "true",
          "replication-controller": "dxpshipservice-v013",
          "version": "13"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SHIP_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-ship-service:0.6.0.54",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/ship-service/info",
                "port": 8322,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-ship-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "ship-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/ship-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "ship-configmap"
            },
            "name": "ship-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/ship-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "dxpsocialnetworkingservice",
      "cluster": "dxpsocialnetworkingservice",
      "dxpsocialnetworkingservice-v033": "true",
      "load-balancer-dxpsocialnetworkingservice": "true",
      "replication-controller": "dxpsocialnetworkingservice-v033",
      "version": "33"
    },
    "name": "dxpsocialnetworkingservice-v033",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpsocialnetworkingservice",
        "cluster": "dxpsocialnetworkingservice",
        "dxpsocialnetworkingservice-v033": "true",
        "replication-controller": "dxpsocialnetworkingservice-v033",
        "version": "33"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpsocialnetworkingservice",
          "cluster": "dxpsocialnetworkingservice",
          "dxpsocialnetworkingservice-v033": "true",
          "load-balancer-dxpsocialnetworkingservice": "true",
          "replication-controller": "dxpsocialnetworkingservice-v033",
          "version": "33"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-socialnetworking-service:0.6.0.41",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/socialnetworking-service/info",
                "port": 8321,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-socialnetworking-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "socialnetworking-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/socialnetworking-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "socialnetworking-configmap"
            },
            "name": "socialnetworking-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/socialnetworking-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxptalendmessaging",
      "cluster": "dxptalendmessaging",
      "dxptalendmessaging-v005": "true",
      "load-balancer-dxptalendmessaging": "true",
      "replication-controller": "dxptalendmessaging-v005",
      "version": "5"
    },
    "name": "dxptalendmessaging-v005",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxptalendmessaging",
        "cluster": "dxptalendmessaging",
        "dxptalendmessaging-v005": "true",
        "replication-controller": "dxptalendmessaging-v005",
        "version": "5"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxptalendmessaging",
          "cluster": "dxptalendmessaging",
          "dxptalendmessaging-v005": "true",
          "load-balancer-dxptalendmessaging": "true",
          "replication-controller": "dxptalendmessaging-v005",
          "version": "5"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "34.193.148.15:5000/talend-messaging:0.1.0.13",
            "imagePullPolicy": "IfNotPresent",
            "name": "talend-messaging",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/talend/MainJob_EventSyncingProcess/syncgatewaytorestapialertupdates/messages_eventsyncingprocess_0_1/contexts",
                "name": "talend-messaging-properties"
              },
              {
                "mountPath": "/talend/MainJob_EventSyncingProcess/syncgatewaytorestapialertupdates/alerts_eventsyncingprocess_0_1/contexts/",
                "name": "talend-alerting-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "talendmessaging-configmap"
            },
            "name": "talend-messaging-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "talendalerting-configmap"
            },
            "name": "talend-alerting-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "dxpteammemberservice",
      "cluster": "dxpteammemberservice",
      "dxpteammemberservice-v046": "true",
      "load-balancer-dxpteammemberservice": "true",
      "replication-controller": "dxpteammemberservice-v046",
      "version": "46"
    },
    "name": "dxpteammemberservice-v046",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpteammemberservice",
        "cluster": "dxpteammemberservice",
        "dxpteammemberservice-v046": "true",
        "replication-controller": "dxpteammemberservice-v046",
        "version": "46"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpteammemberservice",
          "cluster": "dxpteammemberservice",
          "dxpteammemberservice-v046": "true",
          "load-balancer-dxpteammemberservice": "true",
          "replication-controller": "dxpteammemberservice-v046",
          "version": "46"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-teammember-service:0.6.0.53",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/teammember-service/info",
                "port": 8315,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-teammember-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "teammember-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/teammember-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "teammember-configmap"
            },
            "name": "teammember-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/teammember-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxptenantmanagerservice",
      "cluster": "dxptenantmanagerservice",
      "dxptenantmanagerservice-v001": "true",
      "load-balancer-dxptenantmanagerservice": "true",
      "replication-controller": "dxptenantmanagerservice-v001",
      "version": "1"
    },
    "name": "dxptenantmanagerservice-v001",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxptenantmanagerservice",
        "cluster": "dxptenantmanagerservice",
        "dxptenantmanagerservice-v001": "true",
        "replication-controller": "dxptenantmanagerservice-v001",
        "version": "1"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxptenantmanagerservice",
          "cluster": "dxptenantmanagerservice",
          "dxptenantmanagerservice-v001": "true",
          "load-balancer-dxptenantmanagerservice": "true",
          "replication-controller": "dxptenantmanagerservice-v001",
          "version": "1"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_TENANTMANAGER_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-tenantmanager-service:0.6.0.10",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-tenantmanager-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "tenantmanager-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/tenantmanager-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "tenantmanager-configmap"
            },
            "name": "tenantmanager-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/tenantmanager-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "dxpvendorservice",
      "cluster": "dxpvendorservice",
      "dxpvendorservice-v006": "true",
      "load-balancer-dxpdaemonservice": "true",
      "replication-controller": "dxpvendorservice-v006",
      "version": "6"
    },
    "name": "dxpvendorservice-v006",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvendorservice",
        "cluster": "dxpvendorservice",
        "dxpvendorservice-v006": "true",
        "replication-controller": "dxpvendorservice-v006",
        "version": "6"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvendorservice",
          "cluster": "dxpvendorservice",
          "dxpvendorservice-v006": "true",
          "load-balancer-dxpdaemonservice": "true",
          "replication-controller": "dxpvendorservice-v006",
          "version": "6"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VENDOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "HEAP_SIZE",
                "value": "-Xmx512m"
              }
            ],
            "image": "34.193.148.15:5000/core-vendor-service:0.6.0.21",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/vendor-service/info",
                "port": 8319,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-vendor-service",
            "ports": [
              {
                "containerPort": 8319,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "vendor-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/vendor-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "vendor-configmap"
            },
            "name": "vendor-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/vendor-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "12"
    },
    "labels": {
      "app": "dxpvenueservice",
      "cluster": "dxpvenueservice",
      "dxpvenueservice-v000": "true",
      "load-balancer-dxpvenueservice": "true",
      "replication-controller": "dxpvenueservice-v000",
      "version": "0"
    },
    "name": "dxpvenueservice-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvenueservice",
        "cluster": "dxpvenueservice",
        "dxpvenueservice-v000": "true",
        "replication-controller": "dxpvenueservice-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvenueservice",
          "cluster": "dxpvenueservice",
          "dxpvenueservice-v000": "true",
          "load-balancer-dxpvenueservice": "true",
          "replication-controller": "dxpvenueservice-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VENUE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "virginvoyages-vxp-images.jfrog.io/core-venue-service:0.6.0.15",
            "imagePullPolicy": "IfNotPresent",
            "name": "core-venue-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "venue-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/venue-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "application.yml",
                  "path": "application.yml"
                }
              ],
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "venue-service.yml",
                  "path": "venue-service.yml"
                }
              ],
              "name": "venue-configmap"
            },
            "name": "venue-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/venue-service"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "6"
    },
    "labels": {
      "app": "dxpvisitorservice",
      "cluster": "dxpvisitorservice",
      "dxpvisitorservice-v027": "true",
      "load-balancer-dxpvisitorservice": "true",
      "replication-controller": "dxpvisitorservice-v027",
      "version": "27"
    },
    "name": "dxpvisitorservice-v027",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpvisitorservice",
        "cluster": "dxpvisitorservice",
        "dxpvisitorservice-v027": "true",
        "replication-controller": "dxpvisitorservice-v027",
        "version": "27"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpvisitorservice",
          "cluster": "dxpvisitorservice",
          "dxpvisitorservice-v027": "true",
          "load-balancer-dxpvisitorservice": "true",
          "replication-controller": "dxpvisitorservice-v027",
          "version": "27"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_VISITOR_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "TOMCAT_LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "TOMCAT_LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/core-visitor-service:0.6.0.61",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/visitor-service/info",
                "port": 8316,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "visitor-service",
            "ports": [
              {
                "containerPort": 8316,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "700Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "visitor-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/visitor-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "visitor-configmap"
            },
            "name": "visitor-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/visitor-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "8"
    },
    "labels": {
      "app": "dxpwearableservice",
      "cluster": "dxpwearableservice",
      "dxpwearableservice-v001": "true",
      "load-balancer-dxpwearableservice": "true",
      "replication-controller": "dxpwearableservice-v001",
      "version": "1"
    },
    "name": "dxpwearableservice-v001",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpwearableservice",
        "cluster": "dxpwearableservice",
        "dxpwearableservice-v001": "true",
        "replication-controller": "dxpwearableservice-v001",
        "version": "1"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpwearableservice",
          "cluster": "dxpwearableservice",
          "dxpwearableservice-v001": "true",
          "load-balancer-dxpwearableservice": "true",
          "replication-controller": "dxpwearableservice-v001",
          "version": "1"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "CORE_WEARABLE_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "DB_USERNAME",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "username",
                    "name": "app-secrets"
                  }
                }
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "password",
                    "name": "app-secrets"
                  }
                }
              }
            ],
            "image": "172.31.23.97:5000/core-wearable-service:0.6.0.31",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/",
                "port": 80,
                "scheme": "HTTP"
              },
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "core-wearable-service",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/core-services/",
                "name": "wearable-properties"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlog-mount"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          },
          {
            "name": "vxp-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/wearable-service/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "application.yml",
                  "path": "application.yml"
                }
              ],
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "items": [
                {
                  "key": "wearable-service.yml",
                  "path": "wearable-service.yml"
                }
              ],
              "name": "wearable-configmap"
            },
            "name": "wearable-properties"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs/wearable-service/"
            },
            "name": "tomcatlog-mount"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "dxpworkbench",
      "cluster": "dxpworkbench",
      "dxpworkbench-v007": "true",
      "load-balancer-dxpworkbench": "true",
      "replication-controller": "dxpworkbench-v007",
      "version": "7"
    },
    "name": "dxpworkbench-v007",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "dxpworkbench",
        "cluster": "dxpworkbench",
        "dxpworkbench-v007": "true",
        "replication-controller": "dxpworkbench-v007",
        "version": "7"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "dxpworkbench",
          "cluster": "dxpworkbench",
          "dxpworkbench-v007": "true",
          "load-balancer-dxpworkbench": "true",
          "replication-controller": "dxpworkbench-v007",
          "version": "7"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "34.193.148.15:5000/workbench:0.1.0.10",
            "imagePullPolicy": "IfNotPresent",
            "name": "workbench",
            "ports": [
              {
                "containerPort": 80,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "4",
      "deployment.kubernetes.io/revision-history": "2"
    },
    "labels": {
      "app": "magnolia",
      "pod-template-hash": "1921421264",
      "version": "latest",
      "visualize": "true"
    },
    "name": "magnolia-1921421264",
    "namespace": "demo",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "magnolia",
        "uid": "2beb8513-e4a6-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "magnolia",
        "pod-template-hash": "1921421264",
        "version": "latest",
        "visualize": "true"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "magnolia",
          "pod-template-hash": "1921421264",
          "version": "latest",
          "visualize": "true"
        }
      },
      "spec": {
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "In",
                      "values": [
                        "ip-172-31-112-200.ec2.internal"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "containers": [
          {
            "image": "34.193.148.15:5000/magnolia:0.0.0.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "magnolia",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "6Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/opt/tomcat/logs",
                "name": "magnolialogs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/repositories",
                "name": "author-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/repositories",
                "name": "public-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/WEB-INF/classes",
                "name": "author-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/WEB-INF/classes",
                "name": "public-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/logs",
                "name": "author-logs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/logs",
                "name": "public-logs"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/magnolia"
            },
            "name": "magnolialogs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/repository"
            },
            "name": "author-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/classes"
            },
            "name": "author-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/logs"
            },
            "name": "author-logs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/logs"
            },
            "name": "public-logs"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "3"
    },
    "labels": {
      "app": "magnolia",
      "pod-template-hash": "337612706",
      "version": "latest",
      "visualize": "true"
    },
    "name": "magnolia-337612706",
    "namespace": "demo",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "magnolia",
        "uid": "2beb8513-e4a6-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "magnolia",
        "pod-template-hash": "337612706",
        "version": "latest",
        "visualize": "true"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "magnolia",
          "pod-template-hash": "337612706",
          "version": "latest",
          "visualize": "true"
        }
      },
      "spec": {
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "In",
                      "values": [
                        "ip-172-31-112-200.ec2internal"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "containers": [
          {
            "image": "34.193.148.15:5000/magnolia:0.0.0.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "magnolia",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "6Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/opt/tomcat/logs",
                "name": "magnolialogs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/repositories",
                "name": "author-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/repositories",
                "name": "public-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/WEB-INF/classes",
                "name": "author-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/WEB-INF/classes",
                "name": "public-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/logs",
                "name": "author-logs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/logs",
                "name": "public-logs"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/magnolia"
            },
            "name": "magnolialogs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/repository"
            },
            "name": "author-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/classes"
            },
            "name": "author-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/logs"
            },
            "name": "author-logs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/logs"
            },
            "name": "public-logs"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "magnolia",
      "pod-template-hash": "4102986360",
      "version": "latest",
      "visualize": "true"
    },
    "name": "magnolia-4102986360",
    "namespace": "demo",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "magnolia",
        "uid": "2beb8513-e4a6-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "magnolia",
        "pod-template-hash": "4102986360",
        "version": "latest",
        "visualize": "true"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "magnolia",
          "pod-template-hash": "4102986360",
          "version": "latest",
          "visualize": "true"
        }
      },
      "spec": {
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "In",
                      "values": [
                        "ip-172-31-112-200.ec2.internal"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "containers": [
          {
            "image": "34.193.148.15:5000/magnolia:0.0.0.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "magnolia",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "6Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/opt/tomcat/logs",
                "name": "magnolialogs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/repositories",
                "name": "author-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/repositories",
                "name": "public-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/WEB-INF/classes",
                "name": "author-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/WEB-INF/classes",
                "name": "public-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/logs",
                "name": "author-logs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/logs",
                "name": "public-logs"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-artifactory"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/magnolia"
            },
            "name": "magnolialogs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/repository"
            },
            "name": "author-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/classes"
            },
            "name": "author-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/logs"
            },
            "name": "author-logs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/logs"
            },
            "name": "public-logs"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "5"
    },
    "labels": {
      "app": "magnolia",
      "pod-template-hash": "465276841",
      "version": "latest",
      "visualize": "true"
    },
    "name": "magnolia-465276841",
    "namespace": "demo",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "magnolia",
        "uid": "2beb8513-e4a6-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "magnolia",
        "pod-template-hash": "465276841",
        "version": "latest",
        "visualize": "true"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "magnolia",
          "pod-template-hash": "465276841",
          "version": "latest",
          "visualize": "true"
        }
      },
      "spec": {
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "In",
                      "values": [
                        "ip-172-31-112-92.ec2.internal"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "containers": [
          {
            "image": "34.193.148.15:5000/magnolia:0.0.0.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "magnolia",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "6Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/opt/tomcat/logs",
                "name": "magnolialogs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/repositories",
                "name": "author-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/repositories",
                "name": "public-repo"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/WEB-INF/classes",
                "name": "author-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/WEB-INF/classes",
                "name": "public-class"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaAuthor/logs",
                "name": "author-logs"
              },
              {
                "mountPath": "/opt/tomcat/webapps/magnoliaPublic/logs",
                "name": "public-logs"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/magnolia"
            },
            "name": "magnolialogs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/repository"
            },
            "name": "author-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-repo"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/classes"
            },
            "name": "author-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/repository"
            },
            "name": "public-class"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/author/logs"
            },
            "name": "author-logs"
          },
          {
            "hostPath": {
              "path": "/home/administrator/magnolia/public/logs"
            },
            "name": "public-logs"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "1",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "minio",
      "pod-template-hash": "3826596089"
    },
    "name": "minio-deployment-3826596089",
    "namespace": "demo",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "minio-deployment",
        "uid": "340f544d-d411-11e7-abd6-0e9b02a75e24"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "minio",
        "pod-template-hash": "3826596089"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "minio",
          "pod-template-hash": "3826596089"
        }
      },
      "spec": {
        "containers": [
          {
            "args": [
              "server",
              "/storage"
            ],
            "env": [
              {
                "name": "MINIO_ACCESS_KEY",
                "value": "AKIAIV3BWSIUMSSG6BNA"
              },
              {
                "name": "MINIO_SECRET_KEY",
                "value": "A9Z4dnr0EFTBUDtlLE/LftcY1BNHjmZ2hHzsuzvD"
              }
            ],
            "image": "minio/minio",
            "imagePullPolicy": "Always",
            "name": "minio",
            "ports": [
              {
                "containerPort": 9000,
                "hostPort": 9000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/storage",
                "name": "minio-storage"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "name": "minio-storage",
            "persistentVolumeClaim": {
              "claimName": "minio-storage"
            }
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "nclarsadminbff",
      "cluster": "nclarsadminbff",
      "load-balancer-nclarsadminbff": "true",
      "nclarsadminbff-v000": "true",
      "replication-controller": "nclarsadminbff-v000",
      "version": "0"
    },
    "name": "nclarsadminbff-v000",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "nclarsadminbff",
        "cluster": "nclarsadminbff",
        "nclarsadminbff-v000": "true",
        "replication-controller": "nclarsadminbff-v000",
        "version": "0"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "nclarsadminbff",
          "cluster": "nclarsadminbff",
          "load-balancer-nclarsadminbff": "true",
          "nclarsadminbff-v000": "true",
          "replication-controller": "nclarsadminbff-v000",
          "version": "0"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ARSADMIN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMER_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ARSADMIN_CONSUMER_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/ars-admin-bff:1.0.73",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/ars-admin-bff/version",
                "port": 3002,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "ars-admin-bff",
            "ports": [
              {
                "containerPort": 3002,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "dxp-arsadmin-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "dxp-arsadminui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/ars-admin-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "arsadmin-bff-configmap"
            },
            "name": "dxp-arsadmin-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "arsadmin-ui-configmap"
            },
            "name": "dxp-arsadminui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "labels": {
      "app": "nclarsadminbff",
      "cluster": "nclarsadminbff",
      "load-balancer-nclarsadminbff": "true",
      "nclarsadminbff-v001": "true",
      "replication-controller": "nclarsadminbff-v001",
      "version": "1"
    },
    "name": "nclarsadminbff-v001",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "nclarsadminbff",
        "cluster": "nclarsadminbff",
        "nclarsadminbff-v001": "true",
        "replication-controller": "nclarsadminbff-v001",
        "version": "1"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "nclarsadminbff",
          "cluster": "nclarsadminbff",
          "load-balancer-nclarsadminbff": "true",
          "nclarsadminbff-v001": "true",
          "replication-controller": "nclarsadminbff-v001",
          "version": "1"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOG_LOCATION",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOG_LOCATION",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ARSADMIN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMER_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ARSADMIN_CONSUMER_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/ars-admin-bff:1.0.73",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/ars-admin-bff/version",
                "port": 3002,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "ars-admin-bff",
            "ports": [
              {
                "containerPort": 3002,
                "name": "http",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "dxp-arsadmin-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "dxp-arsadminui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/ars-admin-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "arsadmin-bff-configmap"
            },
            "name": "dxp-arsadmin-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "arsadmin-ui-configmap"
            },
            "name": "dxp-arsadminui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "41",
      "deployment.kubernetes.io/revision-history": "39"
    },
    "labels": {
      "app": "onlinecheckinbff",
      "cluster": "onlinecheckinbff",
      "load-balancer-onlinecheckinbff": "true",
      "onlinecheckinbff-v091": "true",
      "replication-controller": "onlinecheckinbff-v091",
      "version": "91"
    },
    "name": "onlinecheckinbff-v091",
    "namespace": "demo"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "onlinecheckinbff",
        "cluster": "onlinecheckinbff",
        "onlinecheckinbff-v091": "true",
        "replication-controller": "onlinecheckinbff-v091",
        "version": "91"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "onlinecheckinbff",
          "cluster": "onlinecheckinbff",
          "load-balancer-onlinecheckinbff": "true",
          "onlinecheckinbff-v091": "true",
          "replication-controller": "onlinecheckinbff-v091",
          "version": "91"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "APPLICATION_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "APPLICATION_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "SERVICE_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              },
              {
                "name": "CONSUMERAPP_PROPERTIES_PATH",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "BFF_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH",
                    "name": "environment-configmap"
                  }
                }
              }
            ],
            "image": "34.193.148.15:5000/online-check-in-bff:1.1.131",
            "imagePullPolicy": "IfNotPresent",
            "livenessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/online-check-in-bff/version",
                "port": 3002,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 120,
              "periodSeconds": 20,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "name": "online-check-in-bff",
            "ports": [
              {
                "containerPort": 3002,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs/Logs",
                "name": "log-mount"
              },
              {
                "mountPath": "/etc/config-server/",
                "name": "application-properties"
              },
              {
                "mountPath": "/etc/config/bff-services/",
                "name": "online-check-in-bff-properties"
              },
              {
                "mountPath": "/etc/config/ui-applications/",
                "name": "online-check-in-ui-properties"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs/online-check-in-bff/"
            },
            "name": "log-mount"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "application-configmap"
            },
            "name": "application-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "online-check-in-bff-configmap"
            },
            "name": "online-check-in-bff-properties"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "online-check-in-ui-configmap"
            },
            "name": "online-check-in-ui-properties"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-system-bff-service.yml": "selfUrl: \"http://52.2.178.96:31030/activity-reservation-system-bff/\"\nconsumerAppName: \"activity-reservation-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"http://52.2.178.96:31310/multimediastorage-service/\"\nisDisabledActivityRequired : false\nisDisabledActivitySlotRequired: false\ninventoryBasedProductCode: \"I\"\ninProgressCartStatusId: 1\nactivityCartTypeId: 2"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-system-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-system-ui-service.yml": "inProgressCartStatusId: 1\ncheckedOutCartStatusId: 2"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-system-ui-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "activity-reservation-vas-service.yml": "inventory:\n holdtime:\n  excursion: 14\nlogLevel: INFO\nhibernateLogLevel: INFO\nseawareBaseUrl: http://10.3.0.14:8280/ota/rest \n#seawareBaseUrl: http://activity-reservation-service.getsandbox.com\nscheduler:\n  timer: 0 0/5 * * * ?\nkafka:\n topic:\n  appointments: ars-vas.activity-reservation\n  product: ProductTypes\n send:\n  appointmentEvent: true\n  productEvent: false"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "activity-reservation-vas-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "application.yml": "spring:\n  datasource:\n    hikari:\n      driver-class-name: org.postgresql.Driver\n      username: ${DB_USERNAME}\n      password: ${DB_PASSWORD}\n      maximum-pool-size: 20\n      connection-timeout: 10000\n      idle-timeout: 30000\n      minimum-idle: 1\n      max-lifetime: 60000\n\n  data:\n    jpa:\n      repositories:\n        enabled: true\n    #mongodb:\n      #database: Reservation\n      #host : 10.3.100.55\n      #port: 27017\n  jmx:\n    enabled: false\n\nhibernate:\n  dialect: org.hibernate.dialect.PostgreSQLDialect\n  format_sql: false\n  show_sql: true\n\nformat:\n  date: yyyy-MM-dd\n  datetime: yyyy-MM-dd'T'HH:mm:ss\n\nhibernateLogLevel: ERROR\nloglevel: INFO\n\ndaemon:\n service:\n  resvas:\n   isDemoMode: true\n clientId: 2b9a83ed-2a16-41c9-838a-82ca48aff898\n secretId: secret\n   \nsyncgateway:\n  username: ncldevappdocstorespms_v4\n  password: yellow*99\n  multimedia:\n    username: decurtis\n    password: pass\n  \ndaemonrange:\n  isrange: false\n  numberofdaysembark: 5\n  numberofdaysdebark: 2\n   \nlog:\n  level:\n    hibernate: INFO\n    service: INFO\n    dbpool: OFF\ntimeout:\n  db:\n    transaction: 10\n    \nmanagement:\n    security:\n        enabled: false\nsecurity:\n    basic:\n        enabled: true\nredis:\n  host:\n    name: demoredisshore-001.15rpr3.0001.use1.cache.amazonaws.com\n  port: 6379 \n\nkafka:\n bootstrap:\n  servers: 172.31.78.158:9092\n serializer:\n  key: org.apache.kafka.common.serialization.StringSerializer\n  value: org.apache.kafka.common.serialization.StringSerializer\n\n\n\n#tenant:\n  #service:\n        #uri: http://10.8.196.58:8327/tenantmanager-service/componentsettings\n\n#Authentication:\n  #service:\n        #uri: http://10.8.196.42:8308/authentication-service/oauth/token?grant_type=client_credentials\nserver:\n  tomcat:\n   accesslog:\n      directory: ${TOMCAT_LOG_LOCATION}\n      enabled: true\n      rotate: true\n      buffered: true\n      pattern: \"{\\\"Hostname\\\":\\\"%h\\\", \\\"Logical username from identd\\\":\\\"%l\\\", \\\"Remote user\\\":\\\"%u\\\", \\\"Remote IP Address\\\":\\\"%a\\\", \\\"Request protocol\\\":\\\"%H\\\", \\\"Query string\\\":\\\"%q\\\", \\\"First line of Request\\\":\\\"%r\\\", \\\"Date&Time\\\":\\\"%t\\\", \\\"HTTP Status code\\\":\\\"%s\\\", \\\"Current Request Thread Name\\\":\\\"%I\\\",\\\"Bytes Sent\\\":\\\"%b\\\", \\\"Time taken to process the request\\\":\\\"%D\\\", \\\"Local IPAdderss\\\":\\\"%A\\\", \\\"Local port\\\":\\\"%p\\\", \\\"Time taken to Commit the Response\\\":\\\"%F\\\", \\\"Request Method\\\":\\\"%m\\\", \\\" User SessionID\\\":\\\"%S\\\", \\\"Requested URL path\\\":\\\"%U\\\", \\\"Local ServerName\\\":\\\"%v\\\"}\"\n   background-processor-delay: 5\n  compression:\n    enabled: true\n    mime-types:\n    - application/json\n    - application/hal+json\n    - text/html\n    - text/plain\nurl:\n    path:\n        guest: http://dxpguestservice/guest-service/\n        reporting: http://dxpreportingservice/reporting-service/\n        boarding: http://dxpboardingservice/boarding-service/\n        ocr: http://dxpocrservice/ocr-service/\n        ship: http://dxpshipservice/ship-service/\n        teammember: http://dxpteammemberservice/teammember-service/\n        guestpreference: http://dxpguestpreferenceservice/guestpreference-service/\n        childregistration: http://dxpchildregistrationservice/childregistration-service/\n        referencedata: http://dxpreferencedataservice/referencedata-service/\n        salesoffer: http://dxpsalesofferservice/salesoffer-service/\n        salesorder: http://dxpsalesorderservice/salesorder-service/\n        tenantmanager: http://dxptenantmanagerservice/tenantmanager-service/\n        authentication: http://authentication-service/authentication-service/\n        embarkation: http://dxpembarkationservice/embarkation-service/\n        embarkationnorule: http://dxpembarkationnoruleservice/embarkationnorule-service/\n        embarkationadmin: http://dxpembarkationadminservice/embarkationadmin-service/\n        multimedia: http://dxpmultimediastorageservice/multimediastorage-service/\n        socialnetworking: http://dxpsocialnetworkingservice/socialnetworking-service/\n        personlocation: http://dxppersonlocationservice/personlocation-service/\n        sailorVas: http://dxpsailorservice/sailorvas-service/\n        contentmanagement: http://dxpcontentmanagementservice/content-management-service/\n        identityaccessmanagement: http://dxpidentityaccessmanagementservice/identityaccessmanagement-service\n        recommendations: http://recommendationsapi.getsandbox.com/ncl/\n        vendor: http://dxpvendorservice/vendor-service/\n        reservationVas: http://dxpreservationservice/reservation-service\n        payment: http://dxppaymentservice/payment-service/\n        idcrossreference: http://dxpidcrossreferenceservice/idcrossreference-service\n        visitor: http://dxpvisitorservice/visitor-service/\n        messaging: http://dxpmessagingservice/messaging-service/\n        device: http://dxpdeviceservice/device-service/\n        #activityreservation: http://dxpseawareactivityreservationservice/seaware-activity-reservation-service/\n        activityreservation: http://dxpactivityreservationservice/activity-reservation-service/\n        rule: http://dxpruleservice/rule-service/\n        ruleservice: http://dxpruleservice/rule-service/\n        couchbase: http://52.1.120.26:4984/\n        multimediaPublicURL: https://ncl.d-aws-dxp.com/svc/multimediastorage-service/\n        cart: http://dxpcartservice/cart-service\n        nclURL : https://qa-api.ncl.com/\n        fidelio: http://167.118.6.146/FCWebServices/FCWebServices.asmx/FidelioSPMSWSJsonPost"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "application-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "arsadmin-bff-service.yml": "selfUrl: \"https://ncl.d-aws-dxp.com/svc\"\nconsumerAppName: \"ars-admin-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Content-Type\"\ngoogleLoginSourceId: \"a3290d44-785d-11e7-959e-0a1a4261e962\"\nauthLoginSourceId : \"12c927d1-e90a-e711-80c9-a06699100836\"\nsocialLoginUserTypeId: \"ba0e0fc5-9bf6-4310-b6e4-829fe6b45afb\""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "arsadmin-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "arsadmin-ui-service.yml": "minAgeLimit: \"15\"\nmaxAgeLimit\": \"90\"\nminAgeLimitForTicker: \"12\"\nminSellingLimit: \"60\"\nmaxSellingLimit: \"90\"\nmaxDuration: \"3\"\nminDuration: \"5\""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "arsadmin-ui-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "boarding-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/boarding\nservice:\n  component:\n      settingId: 3b51a112-b4ac-452c-bc7f-0cbd644f4ae8\n      clientId: 4b805361-ff06-425b-81e3-cf66a6edfd6f \n      adapteeName: NCL\n      secretId: secret"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "boarding-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "cart-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/cart\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/cart"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "cart-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "central-config-doc.yml": "{\n  \"AppBuckets\": {\n    \"Chat\": {\n      \"Name\": \"dxpawschat\",\n      \"Password\": \"pass\",\n      \"Uid\": \"decurtis\"\n    },\n    \"Data\": {\n      \"Name\": \"ncldevappdocstore_v1\",\n      \"Password\": \"Nc1Dem0*04\",\n      \"Uid\": \"ncldevappdocstore_v1\"\n    },\n    \"Logging\": {\n      \"Name\": \"dxplogging\",\n      \"Password\": \"pass\",\n      \"Uid\": \"decurtis\"\n    }\n  },\n \"AppChannels\": {\n     \"ACI\": [\n       \"DX_emb_aci_t\",\n       \"VS_emb_aci_t\",\n       \"VC_emb_aci_t\",\n       \"Master\"\n     ],\n     \"Airport\": [\n       \"DX_emb_ap_t\",\n       \"VS_emb_ap_t\",\n       \"VC_emb_ap_t\",\n       \"Master\"\n     ],\n     \"GangWay\": [\n       \"DX_emb_gw_t\",\n       \"VS_emb_gw_t\",\n       \"VC_emb_gw_t\",\n       \"Master\"\n     ],\n     \"Validate\": [\n       \"DX_emb_va_t\",\n       \"VS_emb_va_t\",\n       \"VC_emb_va_t\",\n       \"Master\"\n     ]\n   },\n  \"AppConfig\": {\n    \"LoggingMode\": true,\n    \"NSDefaultMode\": \"Ship\",\n    \"NearByMode\": true\n  },\n  \"Brands\": [\n    {\n      \"BrandID\": \"CEEE93F2-B284-E611-80C1-00155DF80332\",\n      \"Code\": \"DX\",\n      \"Name\": \"Norwegian Cruise Line\"\n    },\n    {\n      \"BrandID\": \"0B22E08E-E4AF-E611-80C5-00155DF80332\",\n      \"Code\": \"DX1\",\n      \"Name\": \"Decurtis Experience Platform\"\n    }\n  ],\n  \"BuildConfiguration\": {\n    \"ACI\": {\n      \"AppLocalDBName\": \"ncl_dev_embarkation_v1\",\n      \"ZipPostfix\": \"embarkationtext\"\n    },\n    \"Airport\": {\n      \"AppLocalDBName\": \"ncl_dev_embarkation_v1\",\n      \"ZipPostfix\": \"embarkationtext\"\n    },\n    \"GangWay\": {\n      \"AppLocalDBName\": \"ncl_dev_gangway_v1\",\n      \"ZipPostfix\": \"gangwaytext\"\n    },\n    \"Validate\": {\n      \"AppLocalDBName\": \"ncl_dev_embarkation_v1\",\n      \"ZipPostfix\": \"embarkationtext\"\n    }\n  },\n  \"Ships\": [\n    {\n      \"BrandKey\": \"DX\",\n      \"Code\": \"BX\",\n      \"ShipName\": \"Bliss\",\n      \"ShipURLs\": {\n        \"AuthUrl\": \"https://nclship.d-aws-dxp.com/svc/embarkation-bff/user/authenticate\",\n        \"BaseSyncUrl\": \"http://nclship.d-aws-dxp.com/syncgateway/\",\n        \"DBZipDownloadURL\": \"http://nclship.d-aws-dxp.com/CBLWeb/downloadzip/\",\n        \"MediaItemUrl\": \"http://nclship.d-aws-dxp.com/svc/multimediastorage-service/mediaitems/\",\n        \"SocialAuthUrl\": \"http://nclship.d-aws-dxp.com/svc/embarkation-bff/user/sociallogin\",\n        \"SsnIds\": [\n          \"DeCurtis\",\n          \"DeCurtis1\"\n        ]\n      }\n    },\n    {\n      \"BrandKey\": \"DX\",\n      \"Code\": \"DX\",\n      \"ShipName\": \"Dream\",\n      \"ShipURLs\": {\n        \"AuthUrl\": \"https://nclship.d-aws-dxp.com/svc/embarkation-bff//user/authenticate\",\n        \"BaseSyncUrl\": \"http://nclship.d-aws-dxp.com/syncgateway/\",\n        \"DBZipDownloadURL\": \"http://nclship.d-aws-dxp.com/CBLWeb/downloadzip/\",\n        \"MediaItemUrl\": \"http://nclship.d-aws-dxp.com/svc/multimediastorage-service/mediaitems/\",\n        \"SocialAuthUrl\": \"http://nclship.d-aws-dxp.com/svc/embarkation-bff/user/sociallogin\",\n        \"SsnIds\": [\n          \"DeCurtis\",\n          \"DeCurtis1\",\n          \"Decurtis_shore\"\n        ]\n      }\n    }\n  ],\n  \"ShoreURLs\": {\n    \"AuthUrl\": \"https://ncl.d-aws-dxp.com/svc/embarkation-bff/user/authenticate\",\n    \"BaseSyncUrl\": \"http://ncl.d-aws-dxp.com/syncgateway/\",\n    \"DBZipDownloadURL\": \"http://ncl.d-aws-dxp.com/CBLWeb/downloadzip/\",\n    \"MediaItemUrl\": \"https://ncl.d-aws-dxp.com/svc/multimediastorage-service/mediaitems/\",\n    \"SocialAuthUrl\": \"https://ncl.d-aws-dxp.com/svc/embarkation-bff/user/sociallogin\",\n    \"SsnIds\": [\n      \"DeCurtis\",\n      \"DeCurtis1\"\n    ]\n  },\n  \"_id\": \"CentralConfiguration::8ea12580-8844-4d07-a72d-692b90f0b113\",\n  \"_rev\": \"7-f0ca19b94727720dca450e0039482096\",\n  \"channels\": [\n    \"Master\"\n  ],\n  \"type\": \"CentralConfiguration\"\n}"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "central-config-doc-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "childregistration-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/childregistration\nservice:\n  component:\n      settingId: 3b51a112-b4ac-452c-bc7f-0cbd644f4ae8\n      clientId: 4b805361-ff06-425b-81e3-cf66a6edfd6f\n      secretId: secret"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "childregistration-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "componentcatalog-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/componentcatalog\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/componentcatalog"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "componentcatalog-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "configmap-daemon-service.yml": "app:\n  configMapPath: /etc/couchdb-configs/centralconfig\n\nfile:\n  extension: yml\n\nsync:\n  gateway:\n    url: http://ncl.d-aws-dxp.com/syncgateway\n    username: ncldevappdocstore_v1\n    password: Nc1Dem0*04\n\nbucket:\n  name: ncldevappdocstore_v1\n\nwatch:\n  interval:\n    time: 10000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "configmap-daemon-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "content-management-service.yml": "magnoliaBaseURL: http://ncl.d-aws-dxp.com/svc/magnoliaPublic/\nmagnoliaAuthKey: c3VwZXJ1c2VyOnN1cGVydXNlcg==\ncmsName: NclCMS\nnclCMSBaseURL: https://qa2-web.ncl.com/"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "content-management-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "daemon-service.yml": "spring:\n datasource:\n  url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/batch_job\n  hikari:\n   jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/batch_job\n                    \ncouchbase:\n   bucket:\n    ars: appdocstorespms_v4\n    resvas: appdocstorespms_v4/\n    module: sailorframework\n    oci: appdocstorespms_v4/\n    embarkationadminvas: appdocstorespms_v4/\n    multimedia: multimedia/\n    guestcore: appdocstorespms_v4/\n   shipcode:\n    ars: DX\n\nkafka:\n autoresetoffset: true\n topic:\n  ncl:\n   ship:\n    fidelio: test\n  appointment: ars-vas.activity-reservation\n  resvas: res-vas.voyage-reservation\n  module: devicecontent-core.module\n  oci: embarkation-vas.oci\n  embarkationadminvas: embarkationadmin-vas.gangway\n  guestcore: guest-core.guest\n group: \n  ncl:\n   ship:\n    fidelio: ars-ncl\n  appointment: ars-res0\n  resvas: res-vas\n  module: dev-con\n  oci: oci-embarkation\n  embarkationadminvas: embarkationadmin-vas\n  guestcore: guest-guestcore\n \ndaemon:\n module:\n  ncl: false  \n\nhibernateLogLevel: INFO"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "daemon-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "device-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/device\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/device\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "device-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "devicecontent-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/devicecontent\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/devicecontent\n      \nkafka:      \n  app:\n    topicName: device_module_update\n    name: dxp-device-module-updated"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "devicecontent-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "dining-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/dining\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/dining"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "dining-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkation-bff-service.yml": "selfUrl: \"https://ncl.d-aws-dxp.com/svc/embarkation-bff/\"\nconsumerAppName: \"embarkation-ui\"\nenableLogSrcFlag: \"true\"\noffset: \"+5:30\"\nlogSeverity: \"info\"\nmultimedia: \"https://ncl.d-aws-dxp.com/svc/multimediastorage-service/mediaitems/\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\ngoogleLoginSourceId: \"a3290d44-785d-11e7-959e-0a1a4261e962\"\nidCrossTeamMemberSourceId: \"29979f56-831e-11e7-a99f-0a1a4261e962\"\nidCrossWearableSourceId: \"15c927d1-e90a-e711-80c9-a06699100836\"\nauthLoginSourceId: \"12c927d1-e90a-e711-80c9-a06699100836\"\nuserTypeId: \"ba0e0fc5-9bf6-4310-b6e4-829fe6b45afb\"\nrequestTimeoutMiliseconds: 5000\ncouchBaseSyncGatewayAdminApi: \"http://52.1.120.26:4985/ncldevappdocstore_v1/\"\ncouchBaseSyncGatewayUrl: \"ncl.d-aws-dxp.com\"\nsessionTimeToLiveSeconds: 604800"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkation-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkation-vas-service.yml": "logLevel: INFO\nhibernateLogLevel: ERROR\n  \ncaller:\n    serviceName:\n        guest: embarkation-guest-service\n        boarding: embarkation-boarding-service\n        ocr: embarkation-ocr-service\n        ship: embarkation-ship-service\n        teammember: embarkation-teammember-service\n        guestpreference: embarkation-guestpreference-service\n        \nurl:\n    path:\n        rule:\n          server: http://172.26.248.210:8080/kie-server/services/rest/rule-server/execute-rule/online-checkin    \n          \nrule:\n  server:\n    username: kieserver\n    password: kieserver\n    bypass: false\n\nkafka:\n    topic:\n        oci: embarkation-vas.oci\n    bypass: false\n\nvoyage:\n  advancebookingdays: 300 \n    \nmoci:\n  actualDataRequired: true\n  \nHistory:\n  Guest1:\n    PrimaryGuest : true\n    FirstName    : Shawn\n    LastName     : Wilson\n    Status       : rejected\n    LastModifiedDate : 2017-11-14\n    UpdatedBy     :    System\n    ReservationGuestId : 1898-3647\n    ReservationNumber  : 1898\n    GenderCode         : M\n    SecurityPhotoMediaItemId : e434682e-3b78-4e0a-9fec-63dd9417bbf5\n    VoyageName               : Voyage1\n    VoyageNumber             : VS0001\n  Guest2:\n    PrimaryGuest : false\n    FirstName    : Chloe\n    LastName     : Wilson\n    Status       : rejected\n    LastModifiedDate : 2017-11-14\n    UpdatedBy     :    System\n    ReservationGuestId : 1898-3646\n    ReservationNumber  : 1898\n    GenderCode         : F\n    SecurityPhotoMediaItemId : 0b7845ec-23c2-4902-ad1e-605308d54832\n    VoyageName               : Voyage2\n    VoyageNumber             : VS0002 \n    \nDashboard:\n  Voyage1:\n    FromDate  : 2018-02-11\n    ToDate : 2018-02-17\n    ShipName : Ship1\n    VoyageName : Voyage1\n    VoyageNumber : DD201712077DCARIBBEAN\n    Overdue      : 120\n    Pending      : 100\n    Verified     : 500\n  Voyage2:\n    FromDate        : 2018-02-18\n    ToDate        : 2018-02-25\n    ShipName     : Ship2\n    VoyageName   : Voyage2\n    VoyageNumber : DD201711247DCARIBBEAN\n    Overdue      : 20\n    Pending      : 150\n    Verified     : 200\n    \nUpcomingVoyage:\n  Voyage1:\n    FromDate    : 2018-02-11\n    ToDate       : 2018-02-17\n    PackageCode   : 5N-BAHAMAS\n    PackageName   : 7 Night Alaska Highlights from Seattle\n    PendingVerifiedReservationGuest : 190\n    ShipName      : Ship1\n    VoyageName    : Voyage1\n    VoyageNumber  : VS0001\n  Voyage2:\n    FromDate   : 2018-02-18\n    ToDate     : 2018-02-25\n    PackageCode  : 5N-BAHAMAS-INC\n    PackageName  : 7 Night Eastern Caribbean from Miami\n    PendingVerifiedReservationGuest : 100\n    ShipName     : Ship2\n    VoyageName   : Voyage2\n    VoyageNumber : VS0001 \n    \nTeamMember:\n  FirstName : Betty\n  GenderCode : F\n  LastName   : Marsh\n  ProfilePhotoId : 4a284d1c-dce1-41fb-883a-e0584de02b53   \n  \nVoyageDetail:\n  FromDate : 2018-02-11\n  ToDate : 2018-02-17\n  ShipName: Ship1\n  VoyageName : Voyage1   \n  \nReservationGuestsSummary:\n   GuestDetail:\n     fromDate: 2018-02-11T00:00:00\n     toDate  : 2018-02-17T00:00:00\n     GenderCode : F\n     ReservationGuestId : 1898-3646\n     ReservationNumber  :  1898\n     IsPrimaryGuest     : false\n     FirstName          : Chloe\n     LastName           : Wilson\n     Status             : approved\n     IsOverDue          : false\n     SecurityPhotoMediaItemId : 091b8912-7ccf-4d88-b86d-80b586d1671d\n     VoyageName               : Voyage2\n     VoyageNumber             : VS0003\n     LastModifiedDate         : 2017-09-02\n     ModifiedBy               : Valli\n   GuestDetail1:\n      GenderCode: M\n      ReservationGuestId: 1898-3647\n      ReservationNumber:  1898\n      IsPrimaryGuest:     false\n      FirstName:          Shawn \n      LastName:           Wilson\n      Status :            approved \n      IsOverDue:          false\n      SecurityPhotoMediaItemId: 41ce308c-10c8-4f76-9b04-de857114bddc\n      VoyageName:          Voyage2\n      VoyageNumber:        7659\n      LastModifiedDate:    2017-09-10\n      ModifiedBy:          Valli\n      \nGuestDetails:\n  Guest1 :\n     ReservationGuestId          :     1898-3646\n     ModerationCheckInDetailId   :     86750156-ea49-48f2-99da-17105b834b40\n     MediaitemStatus :\n       MediaItemStatusId         : 54be9d1a-c90a-11e7-abc4-cec278b6b50a\n       AdditionalComment         : photo is not clear\n       MultiMediaItemId          : 091b8912-7ccf-4d88-b86d-80b586d1671d      \n       Status                    : Approved\n       MultiMediaType            : Security Photo\n     MediaitemStatus1 :\n       MediaItemStatusId         : 63df065e-c90a-11e7-abc4-cec278b6b50a\n       MultiMediaItemId          : 26134972-c9f7-40e1-8ff8-95f4eb570d93\n       Status                    : Approved\n       MultiMediaType            : Profile Photo        \n     IdentificationStatusId        : cc616036-c90b-11e7-abc4-cec278b6b50a\n     AdditionalComment             : your name is not matching with given document\n     IdentificationId              : 674c7c70-43f2-7159-f891-2403827987e1\n     Status                        : Rejected\n     IdentificationDocumentType    : P\n     Reason3:\n       ReasonId                      : 0d043020-c90a-11e7-abc4-cec278b6b50a\n       RejectionReasonId             : 7004bd3e-9f6b-11e7-827e-0a1a4261e962\n     Reason4:\n       ReasonId                     : 7043020-c90a-11e7-abc4-cec278b6b50a\n       RejectionReasonId            : 7004bd84-9f6b-11e7-827f-0a1a4261e962\n     Comment                       : photo is not clear and your name is not matching with given document\n     ReservationGuestInfoStatus    : rejected\n     birthdate                     : 1992-12-16\n     CountryOfCitizenship          : US\n     BirthCountryCode              : US\n     CountryOfResidence            : IN\n     Passport :\n      IssueDate                     : 2001-01-12\n      ExpiryDate                    : 2028-06-21\n      FirstName                     : Chloe\n      GenderCode                    : F\n      IdentificationId              : 674c7c70-43f2-7159-f891-2403827987e1\n      IssueAuthority                : United States\n      IssueCity                     : New York\n      LastName                      : Wilson\n      Number                        : 340000230\n      PassportPhotoId               : 1\n      ScannedCopyMediaItemId        : e9aa68c0-cce2-4a6b-b00e-3da585b11c50\n     Personal:\n       FirstName                    : Chloe\n       LastName                     : Wilson\n       NickName                     : Chloe\n       GenderCode                    : F\n       BirthDate                     : 1992-12-16\n       CountryOfCitizenship           : US\n       ProfilePhotoMediaItemId        : 26134972-c9f7-40e1-8ff8-95f4eb570d93\n       SecurityPhotoMediaItemId      :  091b8912-7ccf-4d88-b86d-80b586d1671d\n       SelectedIdentificationDocumentType : P\n       SelectedIdentificationId       : 674c7c70-43f2-7159-f891-2403827987e1\n       \n  Guest2:\n    ReservationGuestId             : 1898-3647\n    ModerationCheckInDetailId      : 86750156-ea49-48f2-99da-17105b834b40\n    MediaitemStatus:\n      MediaItemStatusId              : 23ca9a2c-c90c-11e7-abc4-cec278b6b50a\n      AdditionalComment              : photo is not clear\n      MultiMediaItemId               : 40349260-8d31-48a7-b24a-021da5a9e9d0\n      Status                         : Approved\n      MultiMediaType                 : Profile Photo\n    MediaitemStatus1:\n      MediaItemStatusId              : 86ca9a2c-c90c-11e7-abc4-cec278b6b50a\n      MultiMediaItemId               : 41ce308c-10c8-4f76-9b04-de857114bddc\n      Status                         : Approved\n      MultiMediaType                 : Security Photo\n    IdentificationStatus:\n      IdentificationStatusId            : 0f08124a-c90c-11e7-abc4-cec278b6b50a\n      AdditionalComment                :  your name is not matching with given document\n      IdentificationId                 :  674c7c70-43f2-7159-f891-2403827987e1\n      Status                           :  Rejected\n      IdentificationDocumentType       :  P\n      Reason3:\n        ReasonId                         : 46043020-c90a-11e7-abc4-cec278b6b50a\n        RejectionReasonId                : 7004bd3e-9f6b-11e7-827e-0a1a4261e962\n      Reason4:\n        ReasonId                        : 86043020-c90a-11e7-abc4-cec278b6b50a\n        RejectionReasonId               : 7004bd84-9f6b-11e7-827f-0a1a4261e962\n      Comment                          : photo is not clear and your name is not matching with given document\n      ReservationGuestInfoStatus       : rejected\n      CountryOfCitizenship             : US\n    Passport:\n      BirthCountryCode                 : US\n      birthdate                        : 1991-09-23\n      CountryOfResidence               : IN\n      IssueDate                        : 2011-01-12\n      ExpiryDate                       : 2017-06-21 \n      FirstName                       :  Shawn\n      GenderCode                      :  M\n      IdentificationId                :  674c7c70-43f2-7159-f891-2403827987e1\n      IssueAuthority                  :  United States\n      IssueCity                       :  New York\n      LastName                        :  Wilson\n      Number                          :  528386417\n      PassportPhotoId                 :  1\n      ScannedCopyMediaItemId          :  7905fb68-e494-457f-a62b-1c70971cbdff\n    Personal:\n      FirstName                       :  Shawn\n      LastName                        :  Wilson\n      NickName                        :  Shawn\n      GenderCode                      :  M\n      BirthDate                       :  1991-09-23\n      CountryOfCitizenship            :  US\n      ProfilePhotoMediaItemId         :  40349260-8d31-48a7-b24a-021da5a9e9d0\n      SecurityPhotoMediaItemId        :  41ce308c-10c8-4f76-9b04-de857114bddc\n      SelectedIdentificationDocumentType : P\n      SelectedIdentificationId        :  674c7c70-43f2-7159-f891-2403827987e1\n      \n  Guest3 :\n    ModerationCheckInDetailId         : 86750156-ea49-48f2-99da-17105b834b40\n    MediaItemStatus :\n      MediaItemStatusId               : 54be9d1a-c90a-11e7-abc4-cec278b6b50a\n      AdditionalComment               : photo is not clear\n      MultiMediaItemId                : 13e50156-ea49-48f2-99da-17105b834b40\n      MultiMediaType                  : Profile Photo\n      Status                          : Rejected\n    Reason1 :\n      RejectionReasonId                : 7004b56e-9f6b-11e7-8270-0a1a4261e962\n      ReasonId                         : 0d043020-c90a-11e7-abc4-cec278b6b50a\n    Reason2 :\n      RejectionReasonId                : 7004bb54-9f6b-11e7-8278-0a1a4261e962\n      ReasonId                         : 1bcfdee2-c90a-11e7-abc4-cec278b6b50a\n    MediaitemStatus1 :\n      MediaItemStatusId                : 63df065e-c90a-11e7-abc4-cec278b6b50a\n      MultiMediaItemId                 : 3d83a5f8-0cac-46a1-8681-a306e9eefc7e\n      Status                            : Approved\n      MultiMediaType                   : Security Photo\n    IdentificationStatus :\n      IdentificationStatusId           : cc616036-c90b-11e7-abc4-cec278b6b50a\n      AdditionalComment                 : your name is not matching with given document\n      IdentificationId                  : 674c7c70-43f2-7159-f891-2403827987e1\n      Status                            : Rejected\n      IdentificationDocumentType        : P\n    Reason3 :\n      ReasonId                          : 0d043020-c90a-11e7-abc4-cec278b6b50a    \n      RejectionReasonId                  : 7004bd3e-9f6b-11e7-827e-0a1a4261e962\n    Reason4 :\n      ReasonId                           : 7043020-c90a-11e7-abc4-cec278b6b50a\n      RejectionReasonId                  : 7004bd84-9f6b-11e7-827f-0a1a4261e962\n    Comment                               : photo is not clear and your name is not matching with given document\n    Status                               : rejected\n    AlienResidentCardIdentification :\n      AlienNumber                         : 123\n      FirstName                           : Shawn\n      IdentificationId                    : 0068876c-3eaa-e611-80c3-00155df80332\n      IssueCountryCode                     : IN\n      LastName                             : Wilson\n      ScannedCopyMediaItemId               : a1f95953-91d2-40fb-88e7-8d83c3955a76\n    BirthCertificateIdentification :\n      FatherName                            : John\n      FirstName                             : Shawn\n      GenderCode                            : M\n      IdentificationId                      : 1068876c-3eaa-e611-80c3-00155df80332\n      IssueCountryCode                      : IN\n      IssueState                             : CA\n      LastName                              : Wilson\n      MotherMaidenName                      : Mary\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n    DrivingLicenceIdentification :\n      CustomerIdentifier                     : 2\n      DocumentAddress                       : abcd\n      FirstName                             : Chloe\n      GenderCode                            : M\n      IdentificationId                      : 3068876c-3eaa-e611-80c3-00155df80332\n      IssueCountryCode                      : US\n      LastName                              : Wilson\n      ClassValue                            : D\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n      CountryOfCitizenship                  : US\n    Passport:\n      BirthCountryCode                      : US\n      BirthDate                             : 1992-16-12\n      CountryOfResidence                    : IN\n      IssueDate                             : 2001-01-12\n      ExpiryDate                            : 2028-06-21\n      FirstName                             : Chloe\n      GenderCode                            : F\n      IdentificationId                      : 674c7c70-43f2-7159-f891-2403827987e1\n      IssueAuthority                        : United States\n      IssueCity                             : New York\n      LastName                              : Wilson\n      Number                                : 340000230\n      PassportPhotoId                       : 1\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n    VisaIdentification :\n      Entries                               : 1\n      FirstName                             : Shawn\n      LastName                              : Wilson\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n      VisaId                                : 8068876c-3eaa-e611-80c3-00155df80332\n      VisaTypeCode                          : V\n    PersonalInfo :\n      FirstName                              : Chloe\n      LastName                               : Wilson\n      NickName                               : Chloe\n      GenderCode                             : F\n      BirthDate                              : 1992-12-16\n      CountryOfCitizenship                   : US\n      ProfilePhotoMediaItemId                : 3d83a5f8-0cac-46a1-8681-a306e9eefc7e\n      SecurityPhotoMediaItemId               : 13e50156-ea49-48f2-99da-17105b834b40\n      SelectedIdentificationDocumentType     : P\n      SelectedIdentificationId               : 674c7c70-43f2-7159-f891-2403827987e1      \n      \nvoyageitinerary:\n  Itinerary1:\n    VoyageNumber: VS0001\n    SeaDay: true\n    ItineraryDay: 1\n    PortCode: BCN\n\n  Itinerary2:\n    SeaDay: true\n    ItineraryDay: 2\n    PortCode: PAL\n\n  Itinerary3:\n    SeaDay: false\n    ItineraryDay: 3\n    PortCode: VNO\n\n  Itinerary4:\n    SeaDay: false\n    ItineraryDay: 4\n    PortCode: FPO      "
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkation-vas-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkationadmin-vas-service.yml": "kafka:\n    topic:\n        admin: embarkationadmin-vas.gangway\n    bypass: false\nhttp:\n    connection-pool:\n        configuration:\n              connect-timeout: 20000\n              max-total: 150\n              connection-request-timeout: 20000\n              socket-timeout: 20000\nlogLevel: ERROR\nhibernateLogLevel: ERROR\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkationadmin-vas-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "embarkationnorule-vas-service.yml": "logLevel: INFO\nhibernateLogLevel: ERROR\n  \ncaller:\n    serviceName:\n        guest: embarkation-guest-service\n        boarding: embarkation-boarding-service\n        ocr: embarkation-ocr-service\n        ship: embarkation-ship-service\n        teammember: embarkation-teammember-service\n        guestpreference: embarkation-guestpreference-service\n  \n\n    \n\nkafka:\n    topic:\n        oci: embarkation-vas.oci\n    bypass: false\n\nvoyage:\n  advancebookingdays: 300 \n    \nmoci:\n  actualDataRequired: true\n  \nHistory:\n  Guest1:\n    PrimaryGuest : true\n    FirstName    : Shawn\n    LastName     : Wilson\n    Status       : rejected\n    LastModifiedDate : 2017-11-14\n    UpdatedBy     :    System\n    ReservationGuestId : 1898-3647\n    ReservationNumber  : 1898\n    GenderCode         : M\n    SecurityPhotoMediaItemId : e434682e-3b78-4e0a-9fec-63dd9417bbf5\n    VoyageName               : Voyage1\n    VoyageNumber             : VS0001\n  Guest2:\n    PrimaryGuest : false\n    FirstName    : Chloe\n    LastName     : Wilson\n    Status       : rejected\n    LastModifiedDate : 2017-11-14\n    UpdatedBy     :    System\n    ReservationGuestId : 1898-3646\n    ReservationNumber  : 1898\n    GenderCode         : F\n    SecurityPhotoMediaItemId : 0b7845ec-23c2-4902-ad1e-605308d54832\n    VoyageName               : Voyage2\n    VoyageNumber             : VS0002 \n    \nDashboard:\n  Voyage1:\n    FromDate  : 2018-02-11\n    ToDate : 2018-02-17\n    ShipName : Ship1\n    VoyageName : Voyage1\n    VoyageNumber : DD201712077DCARIBBEAN\n    Overdue      : 120\n    Pending      : 100\n    Verified     : 500\n  Voyage2:\n    FromDate        : 2018-02-18\n    ToDate        : 2018-02-25\n    ShipName     : Ship2\n    VoyageName   : Voyage2\n    VoyageNumber : DD201711247DCARIBBEAN\n    Overdue      : 20\n    Pending      : 150\n    Verified     : 200\n    \nUpcomingVoyage:\n  Voyage1:\n    FromDate    : 2018-02-11\n    ToDate       : 2018-02-17\n    PackageCode   : 5N-BAHAMAS\n    PackageName   : 7 Night Alaska Highlights from Seattle\n    PendingVerifiedReservationGuest : 190\n    ShipName      : Ship1\n    VoyageName    : Voyage1\n    VoyageNumber  : VS0001\n  Voyage2:\n    FromDate   : 2018-02-18\n    ToDate     : 2018-02-25\n    PackageCode  : 5N-BAHAMAS-INC\n    PackageName  : 7 Night Eastern Caribbean from Miami\n    PendingVerifiedReservationGuest : 100\n    ShipName     : Ship2\n    VoyageName   : Voyage2\n    VoyageNumber : VS0001 \n    \nTeamMember:\n  FirstName : Betty\n  GenderCode : F\n  LastName   : Marsh\n  ProfilePhotoId : 4a284d1c-dce1-41fb-883a-e0584de02b53   \n  \nVoyageDetail:\n  FromDate : 2018-02-11\n  ToDate : 2018-02-17\n  ShipName: Ship1\n  VoyageName : Voyage1   \n  \nReservationGuestsSummary:\n   GuestDetail:\n     fromDate: 2018-02-11T00:00:00\n     toDate  : 2018-02-17T00:00:00\n     GenderCode : F\n     ReservationGuestId : 1898-3646\n     ReservationNumber  :  1898\n     IsPrimaryGuest     : false\n     FirstName          : Chloe\n     LastName           : Wilson\n     Status             : approved\n     IsOverDue          : false\n     SecurityPhotoMediaItemId : 091b8912-7ccf-4d88-b86d-80b586d1671d\n     VoyageName               : Voyage2\n     VoyageNumber             : VS0003\n     LastModifiedDate         : 2017-09-02\n     ModifiedBy               : Valli\n   GuestDetail1:\n      GenderCode: M\n      ReservationGuestId: 1898-3647\n      ReservationNumber:  1898\n      IsPrimaryGuest:     false\n      FirstName:          Shawn \n      LastName:           Wilson\n      Status :            approved \n      IsOverDue:          false\n      SecurityPhotoMediaItemId: 41ce308c-10c8-4f76-9b04-de857114bddc\n      VoyageName:          Voyage2\n      VoyageNumber:        7659\n      LastModifiedDate:    2017-09-10\n      ModifiedBy:          Valli\n      \nGuestDetails:\n  Guest1 :\n     ReservationGuestId          :     1898-3646\n     ModerationCheckInDetailId   :     86750156-ea49-48f2-99da-17105b834b40\n     MediaitemStatus :\n       MediaItemStatusId         : 54be9d1a-c90a-11e7-abc4-cec278b6b50a\n       AdditionalComment         : photo is not clear\n       MultiMediaItemId          : 091b8912-7ccf-4d88-b86d-80b586d1671d      \n       Status                    : Approved\n       MultiMediaType            : Security Photo\n     MediaitemStatus1 :\n       MediaItemStatusId         : 63df065e-c90a-11e7-abc4-cec278b6b50a\n       MultiMediaItemId          : 26134972-c9f7-40e1-8ff8-95f4eb570d93\n       Status                    : Approved\n       MultiMediaType            : Profile Photo        \n     IdentificationStatusId        : cc616036-c90b-11e7-abc4-cec278b6b50a\n     AdditionalComment             : your name is not matching with given document\n     IdentificationId              : 674c7c70-43f2-7159-f891-2403827987e1\n     Status                        : Rejected\n     IdentificationDocumentType    : P\n     Reason3:\n       ReasonId                      : 0d043020-c90a-11e7-abc4-cec278b6b50a\n       RejectionReasonId             : 7004bd3e-9f6b-11e7-827e-0a1a4261e962\n     Reason4:\n       ReasonId                     : 7043020-c90a-11e7-abc4-cec278b6b50a\n       RejectionReasonId            : 7004bd84-9f6b-11e7-827f-0a1a4261e962\n     Comment                       : photo is not clear and your name is not matching with given document\n     ReservationGuestInfoStatus    : rejected\n     birthdate                     : 1992-12-16\n     CountryOfCitizenship          : US\n     BirthCountryCode              : US\n     CountryOfResidence            : IN\n     Passport :\n      IssueDate                     : 2001-01-12\n      ExpiryDate                    : 2028-06-21\n      FirstName                     : Chloe\n      GenderCode                    : F\n      IdentificationId              : 674c7c70-43f2-7159-f891-2403827987e1\n      IssueAuthority                : United States\n      IssueCity                     : New York\n      LastName                      : Wilson\n      Number                        : 340000230\n      PassportPhotoId               : 1\n      ScannedCopyMediaItemId        : e9aa68c0-cce2-4a6b-b00e-3da585b11c50\n     Personal:\n       FirstName                    : Chloe\n       LastName                     : Wilson\n       NickName                     : Chloe\n       GenderCode                    : F\n       BirthDate                     : 1992-12-16\n       CountryOfCitizenship           : US\n       ProfilePhotoMediaItemId        : 26134972-c9f7-40e1-8ff8-95f4eb570d93\n       SecurityPhotoMediaItemId      :  091b8912-7ccf-4d88-b86d-80b586d1671d\n       SelectedIdentificationDocumentType : P\n       SelectedIdentificationId       : 674c7c70-43f2-7159-f891-2403827987e1\n       \n  Guest2:\n    ReservationGuestId             : 1898-3647\n    ModerationCheckInDetailId      : 86750156-ea49-48f2-99da-17105b834b40\n    MediaitemStatus:\n      MediaItemStatusId              : 23ca9a2c-c90c-11e7-abc4-cec278b6b50a\n      AdditionalComment              : photo is not clear\n      MultiMediaItemId               : 40349260-8d31-48a7-b24a-021da5a9e9d0\n      Status                         : Approved\n      MultiMediaType                 : Profile Photo\n    MediaitemStatus1:\n      MediaItemStatusId              : 86ca9a2c-c90c-11e7-abc4-cec278b6b50a\n      MultiMediaItemId               : 41ce308c-10c8-4f76-9b04-de857114bddc\n      Status                         : Approved\n      MultiMediaType                 : Security Photo\n    IdentificationStatus:\n      IdentificationStatusId            : 0f08124a-c90c-11e7-abc4-cec278b6b50a\n      AdditionalComment                :  your name is not matching with given document\n      IdentificationId                 :  674c7c70-43f2-7159-f891-2403827987e1\n      Status                           :  Rejected\n      IdentificationDocumentType       :  P\n      Reason3:\n        ReasonId                         : 46043020-c90a-11e7-abc4-cec278b6b50a\n        RejectionReasonId                : 7004bd3e-9f6b-11e7-827e-0a1a4261e962\n      Reason4:\n        ReasonId                        : 86043020-c90a-11e7-abc4-cec278b6b50a\n        RejectionReasonId               : 7004bd84-9f6b-11e7-827f-0a1a4261e962\n      Comment                          : photo is not clear and your name is not matching with given document\n      ReservationGuestInfoStatus       : rejected\n      CountryOfCitizenship             : US\n    Passport:\n      BirthCountryCode                 : US\n      birthdate                        : 1991-09-23\n      CountryOfResidence               : IN\n      IssueDate                        : 2011-01-12\n      ExpiryDate                       : 2017-06-21 \n      FirstName                       :  Shawn\n      GenderCode                      :  M\n      IdentificationId                :  674c7c70-43f2-7159-f891-2403827987e1\n      IssueAuthority                  :  United States\n      IssueCity                       :  New York\n      LastName                        :  Wilson\n      Number                          :  528386417\n      PassportPhotoId                 :  1\n      ScannedCopyMediaItemId          :  7905fb68-e494-457f-a62b-1c70971cbdff\n    Personal:\n      FirstName                       :  Shawn\n      LastName                        :  Wilson\n      NickName                        :  Shawn\n      GenderCode                      :  M\n      BirthDate                       :  1991-09-23\n      CountryOfCitizenship            :  US\n      ProfilePhotoMediaItemId         :  40349260-8d31-48a7-b24a-021da5a9e9d0\n      SecurityPhotoMediaItemId        :  41ce308c-10c8-4f76-9b04-de857114bddc\n      SelectedIdentificationDocumentType : P\n      SelectedIdentificationId        :  674c7c70-43f2-7159-f891-2403827987e1\n      \n  Guest3 :\n    ModerationCheckInDetailId         : 86750156-ea49-48f2-99da-17105b834b40\n    MediaItemStatus :\n      MediaItemStatusId               : 54be9d1a-c90a-11e7-abc4-cec278b6b50a\n      AdditionalComment               : photo is not clear\n      MultiMediaItemId                : 13e50156-ea49-48f2-99da-17105b834b40\n      MultiMediaType                  : Profile Photo\n      Status                          : Rejected\n    Reason1 :\n      RejectionReasonId                : 7004b56e-9f6b-11e7-8270-0a1a4261e962\n      ReasonId                         : 0d043020-c90a-11e7-abc4-cec278b6b50a\n    Reason2 :\n      RejectionReasonId                : 7004bb54-9f6b-11e7-8278-0a1a4261e962\n      ReasonId                         : 1bcfdee2-c90a-11e7-abc4-cec278b6b50a\n    MediaitemStatus1 :\n      MediaItemStatusId                : 63df065e-c90a-11e7-abc4-cec278b6b50a\n      MultiMediaItemId                 : 3d83a5f8-0cac-46a1-8681-a306e9eefc7e\n      Status                            : Approved\n      MultiMediaType                   : Security Photo\n    IdentificationStatus :\n      IdentificationStatusId           : cc616036-c90b-11e7-abc4-cec278b6b50a\n      AdditionalComment                 : your name is not matching with given document\n      IdentificationId                  : 674c7c70-43f2-7159-f891-2403827987e1\n      Status                            : Rejected\n      IdentificationDocumentType        : P\n    Reason3 :\n      ReasonId                          : 0d043020-c90a-11e7-abc4-cec278b6b50a    \n      RejectionReasonId                  : 7004bd3e-9f6b-11e7-827e-0a1a4261e962\n    Reason4 :\n      ReasonId                           : 7043020-c90a-11e7-abc4-cec278b6b50a\n      RejectionReasonId                  : 7004bd84-9f6b-11e7-827f-0a1a4261e962\n    Comment                               : photo is not clear and your name is not matching with given document\n    Status                               : rejected\n    AlienResidentCardIdentification :\n      AlienNumber                         : 123\n      FirstName                           : Shawn\n      IdentificationId                    : 0068876c-3eaa-e611-80c3-00155df80332\n      IssueCountryCode                     : IN\n      LastName                             : Wilson\n      ScannedCopyMediaItemId               : a1f95953-91d2-40fb-88e7-8d83c3955a76\n    BirthCertificateIdentification :\n      FatherName                            : John\n      FirstName                             : Shawn\n      GenderCode                            : M\n      IdentificationId                      : 1068876c-3eaa-e611-80c3-00155df80332\n      IssueCountryCode                      : IN\n      IssueState                             : CA\n      LastName                              : Wilson\n      MotherMaidenName                      : Mary\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n    DrivingLicenceIdentification :\n      CustomerIdentifier                     : 2\n      DocumentAddress                       : abcd\n      FirstName                             : Chloe\n      GenderCode                            : M\n      IdentificationId                      : 3068876c-3eaa-e611-80c3-00155df80332\n      IssueCountryCode                      : US\n      LastName                              : Wilson\n      ClassValue                            : D\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n      CountryOfCitizenship                  : US\n    Passport:\n      BirthCountryCode                      : US\n      BirthDate                             : 1992-16-12\n      CountryOfResidence                    : IN\n      IssueDate                             : 2001-01-12\n      ExpiryDate                            : 2028-06-21\n      FirstName                             : Chloe\n      GenderCode                            : F\n      IdentificationId                      : 674c7c70-43f2-7159-f891-2403827987e1\n      IssueAuthority                        : United States\n      IssueCity                             : New York\n      LastName                              : Wilson\n      Number                                : 340000230\n      PassportPhotoId                       : 1\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n    VisaIdentification :\n      Entries                               : 1\n      FirstName                             : Shawn\n      LastName                              : Wilson\n      ScannedCopyMediaItemId                : a1f95953-91d2-40fb-88e7-8d83c3955a76\n      VisaId                                : 8068876c-3eaa-e611-80c3-00155df80332\n      VisaTypeCode                          : V\n    PersonalInfo :\n      FirstName                              : Chloe\n      LastName                               : Wilson\n      NickName                               : Chloe\n      GenderCode                             : F\n      BirthDate                              : 1992-12-16\n      CountryOfCitizenship                   : US\n      ProfilePhotoMediaItemId                : 3d83a5f8-0cac-46a1-8681-a306e9eefc7e\n      SecurityPhotoMediaItemId               : 13e50156-ea49-48f2-99da-17105b834b40\n      SelectedIdentificationDocumentType     : P\n      SelectedIdentificationId               : 674c7c70-43f2-7159-f891-2403827987e1      \n      \nvoyageitinerary:\n  Itinerary1:\n    VoyageNumber: VS0001\n    SeaDay: true\n    ItineraryDay: 1\n    PortCode: BCN\n\n  Itinerary2:\n    SeaDay: true\n    ItineraryDay: 2\n    PortCode: PAL\n\n  Itinerary3:\n    SeaDay: false\n    ItineraryDay: 3\n    PortCode: VNO\n\n  Itinerary4:\n    SeaDay: false\n    ItineraryDay: 4\n    PortCode: FPO      "
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "embarkationnorule-vas-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "APPLICATION_PROPERTIES_PATH": "/etc/config-server/application.yml",
    "BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/activity-reservation-system-ui-service.yml",
    "BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/activity-reservation-system-bff-service.yml",
    "BFF_DEPOSIT_CONSUMER_PROPERTIES_PATH": "/etc/config/ui-applications/deposit-ui-service.yml",
    "BFF_DEPOSIT_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/deposit-bff-service.yml",
    "BFF_EMBARKATION_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/embarkation-bff-service.yml",
    "BFF_MODERATE_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/moderate-online-check-in-ui-service.yml",
    "BFF_MODERATE_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/moderate-online-check-in-bff-service.yml",
    "BFF_NCL_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/ncl-online-check-in-bff-service.yml",
    "BFF_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/online-check-in-ui-service.yml",
    "BFF_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/online-check-in-bff-service.yml",
    "BFF_RESERVATION_CONSUMER_PROPERTIES_PATH": "/etc/config/ui-applications/reservation-ui-service.yml",
    "BFF_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/reservation-bff-service.yml",
    "BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH": "/etc/config/ui-applications/sailor-framework-ui-service.yml",
    "BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH": "/etc/config/bff-services/sailor-framework-bff-service.yml",
    "CORE_BOARDING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/boarding-service.yml",
    "CORE_CART_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/cart-service.yml",
    "CORE_CHILDREGISTRATION_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/childregistration-service.yml",
    "CORE_COMPONENTCATALOG_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/componentcatalog-service.yml",
    "CORE_DEAMON_APPDATAPOPULATOR_PROPERTIES_PATH": "/etc/config/core-services/deamon-appdatapopulator-service.yml",
    "CORE_DEVICECONTENT_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/devicecontent-service.yml",
    "CORE_DEVICE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/device-service.yml",
    "CORE_DINING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/dining-service.yml",
    "CORE_EVENTSTORE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/eventstore-service.yml",
    "CORE_FOODNBEVERAGE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/foodnbeverage-service.yml",
    "CORE_GUESTMULTIMEDIA_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guestmultimedia-service.yml",
    "CORE_GUESTPREFERENCE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guestpreference-service.yml",
    "CORE_GUEST_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/guest-service.yml",
    "CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/idcrossreference-service.yml",
    "CORE_INCIDENTMANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/incident-service.yml",
    "CORE_LOGISTICS_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/logistics-service.yml",
    "CORE_LUGGAGE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/luggage-service.yml",
    "CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/personlocation-service.yml",
    "CORE_SALESOFFER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/salesoffer-service.yml",
    "CORE_SALESORDER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/salesorder-service.yml",
    "CORE_SHIP_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/ship-service.yml",
    "CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/socialnetworking-service.yml",
    "CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/spring-batchjob-service.yml",
    "CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/teammember-service.yml",
    "CORE_TENANTMANAGER_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/tenantmanager-service.yml",
    "CORE_VENDOR_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/vendor-service.yml",
    "CORE_VENUE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/venue-service.yml",
    "CORE_VISITOR_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/visitor-service.yml",
    "CORE_WEARABLE_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/wearable-service.yml",
    "DXP_DAEMON_SERVICE_PROPERTIES_PATH": "/etc/config/core-services/daemon-service.yml",
    "INFRA_AUTHENTICATION_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/authentication-service.yml",
    "INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/configmap-daemon-service.yml",
    "INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/content-management-service.yml",
    "INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/identity-access-management-service.yml",
    "INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/imageprocessing-service.yml",
    "INFRA_MESSAGING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/messaging-service.yml",
    "INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/multimediastorage-service.yml",
    "INFRA_OCR_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/ocr-service.yml",
    "INFRA_PAYMENT_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/payment-service.yml",
    "INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/referencedata-service.yml",
    "INFRA_REPORTING_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/reporting-service.yml",
    "INFRA_RULES_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/rules-service.yml",
    "INFRA_RULE_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/rule-service.yml",
    "INFRA_WORD_PRESS_SERVICE_PROPERTIES_PATH": "/etc/config/infra-services/word-press-service.yml",
    "LOG_LOCATION": "/var/log/applogs/",
    "NCL_CERTIFICATE": "/etc/certificates/vas-services/ncl.jks",
    "TOMCAT_LOG_LOCATION": "/var/log/tomcatlogs/",
    "VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/activity-reservation-vas-service.yml",
    "VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/embarkationadmin-vas-service.yml",
    "VAS_EMBARKATION_NO_RULE_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/embarkationnorule-vas-service.yml",
    "VAS_EMBARKATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/embarkation-vas-service.yml",
    "VAS_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/reservation-service.yml",
    "VAS_SAILOR_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/sailor-vas-service.yml",
    "VAS_SEAWARE_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH": "/etc/config/vas-services/seaware-activity-reservation-vas-service.yml"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"APPLICATION_PROPERTIES_PATH\":\"/etc/config-server/application.yml\",\"BFF_ACTIVITY_RESERVATION_SYSTEM_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/activity-reservation-system-ui-service.yml\",\"BFF_ACTIVITY_RESERVATION_SYSTEM_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/activity-reservation-system-bff-service.yml\",\"BFF_DEPOSIT_CONSUMER_PROPERTIES_PATH\":\"/etc/config/ui-applications/deposit-ui-service.yml\",\"BFF_DEPOSIT_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/deposit-bff-service.yml\",\"BFF_EMBARKATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/embarkation-bff-service.yml\",\"BFF_MODERATE_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/moderate-online-check-in-ui-service.yml\",\"BFF_MODERATE_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/moderate-online-check-in-bff-service.yml\",\"BFF_NCL_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/ncl-online-check-in-bff-service.yml\",\"BFF_ONLINE_CHECK_IN_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/online-check-in-ui-service.yml\",\"BFF_ONLINE_CHECK_IN_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/online-check-in-bff-service.yml\",\"BFF_RESERVATION_CONSUMER_PROPERTIES_PATH\":\"/etc/config/ui-applications/reservation-ui-service.yml\",\"BFF_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/reservation-bff-service.yml\",\"BFF_SAILOR_FRAMEWORK_CONSUMERAPP_PROPERTIES_PATH\":\"/etc/config/ui-applications/sailor-framework-ui-service.yml\",\"BFF_SAILOR_FRAMEWORK_SERVICE_PROPERTIES_PATH\":\"/etc/config/bff-services/sailor-framework-bff-service.yml\",\"CORE_BOARDING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/boarding-service.yml\",\"CORE_CART_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/cart-service.yml\",\"CORE_CHILDREGISTRATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/childregistration-service.yml\",\"CORE_COMPONENTCATALOG_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/componentcatalog-service.yml\",\"CORE_DEAMON_APPDATAPOPULATOR_PROPERTIES_PATH\":\"/etc/config/core-services/deamon-appdatapopulator-service.yml\",\"CORE_DEVICECONTENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/devicecontent-service.yml\",\"CORE_DEVICE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/device-service.yml\",\"CORE_DINING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/dining-service.yml\",\"CORE_EVENTSTORE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/eventstore-service.yml\",\"CORE_FOODNBEVERAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/foodnbeverage-service.yml\",\"CORE_GUESTMULTIMEDIA_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guestmultimedia-service.yml\",\"CORE_GUESTPREFERENCE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guestpreference-service.yml\",\"CORE_GUEST_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/guest-service.yml\",\"CORE_IDCROSSREFERENCE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/idcrossreference-service.yml\",\"CORE_INCIDENTMANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/incident-service.yml\",\"CORE_LOGISTICS_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/logistics-service.yml\",\"CORE_LUGGAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/luggage-service.yml\",\"CORE_PERSONLOCATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/personlocation-service.yml\",\"CORE_SALESOFFER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/salesoffer-service.yml\",\"CORE_SALESORDER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/salesorder-service.yml\",\"CORE_SHIP_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/ship-service.yml\",\"CORE_SOCIALNETWORKING_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/socialnetworking-service.yml\",\"CORE_SPRING_BATCHJOB_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/spring-batchjob-service.yml\",\"CORE_TEAMMEMBER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/teammember-service.yml\",\"CORE_TENANTMANAGER_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/tenantmanager-service.yml\",\"CORE_VENDOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/vendor-service.yml\",\"CORE_VENUE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/venue-service.yml\",\"CORE_VISITOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/visitor-service.yml\",\"CORE_WEARABLE_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/wearable-service.yml\",\"DXP_DAEMON_SERVICE_PROPERTIES_PATH\":\"/etc/config/core-services/daemon-service.yml\",\"INFRA_AUTHENTICATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/authentication-service.yml\",\"INFRA_CONFIGMAP_SYNCUP_DEAMON_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/configmap-daemon-service.yml\",\"INFRA_CONTENT_MANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/content-management-service.yml\",\"INFRA_IDENTITY_ACCESS_MANAGEMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/identity-access-management-service.yml\",\"INFRA_IMAGEPROCESSING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/imageprocessing-service.yml\",\"INFRA_MESSAGING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/messaging-service.yml\",\"INFRA_MULTIMEDIASTORAGE_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/multimediastorage-service.yml\",\"INFRA_OCR_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/ocr-service.yml\",\"INFRA_PAYMENT_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/payment-service.yml\",\"INFRA_REFERENCEDATA_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/referencedata-service.yml\",\"INFRA_REPORTING_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/reporting-service.yml\",\"INFRA_RULES_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/rules-service.yml\",\"INFRA_RULE_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/rule-service.yml\",\"INFRA_WORD_PRESS_SERVICE_PROPERTIES_PATH\":\"/etc/config/infra-services/word-press-service.yml\",\"LOG_LOCATION\":\"/var/log/applogs/\",\"NCL_CERTIFICATE\":\"/etc/certificates/vas-services/ncl.jks\",\"TOMCAT_LOG_LOCATION\":\"/var/log/tomcatlogs/\",\"VAS_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/activity-reservation-vas-service.yml\",\"VAS_EMBARKATIONADMIN_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/embarkationadmin-vas-service.yml\",\"VAS_EMBARKATION_NO_RULE_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/embarkationnorule-vas-service.yml\",\"VAS_EMBARKATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/embarkation-vas-service.yml\",\"VAS_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/reservation-service.yml\",\"VAS_SAILOR_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/sailor-vas-service.yml\",\"VAS_SEAWARE_ACTIVITY_RESERVATION_SERVICE_PROPERTIES_PATH\":\"/etc/config/vas-services/seaware-activity-reservation-vas-service.yml\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"environment-configmap\",\"namespace\":\"demo\"}}\n"
    },
    "name": "environment-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "LOGSTASH_HOSTS": "172.31.66.55:5044"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"LOGSTASH_HOSTS\":\"172.31.66.55:5044\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"environment-variables\",\"namespace\":\"demo\"}}\n"
    },
    "name": "environment-variables",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "eventstore-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/eventstore\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/eventstore"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "eventstore-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "filebeat.yml": "###################### Filebeat Configuration Example #########################\n\n# This file is an example configuration file highlighting only the most common\n# options. The filebeat.full.yml file from the same directory contains all the\n# supported options with more comments. You can use it as a reference.\n#\n# You can find the full configuration reference here:\n# https://www.elastic.co/guide/en/beats/filebeat/index.html\n\n#=========================== Filebeat prospectors =============================\n\nfilebeat.prospectors:\n\n# Each - is a prospector. Most options can be set at the prospector level, so\n# you can use different prospectors for various configurations.\n# Below are the prospector specific configurations.\n\n- input_type: log\n\n  # Paths that should be crawled and fetched. Glob based paths.\n  paths:\n   # - /var/log/applogs/*.log\n   - /var/log/applogs/**/*.log\n  tags: [\"webapp-log\"]\n  \n- input_type: log\n\n  paths:\n    - /var/log/tomcatlogs/**/*.log\n  tags: [\"tomcat-log\"]\n\n\n\n  # Exclude lines. A list of regular expressions to match. It drops the lines that are\n  # matching any regular expression from the list.\n  #exclude_lines: [\"^DBG\"]\n\n  # Include lines. A list of regular expressions to match. It exports the lines that are\n  # matching any regular expression from the list.\n  #include_lines: [\"^ERR\", \"^WARN\"]\n\n  # Exclude files. A list of regular expressions to match. Filebeat drops the files that\n  # are matching any regular expression from the list. By default, no files are dropped.\n  #exclude_files: [\".gz$\"]\n\n  # Optional additional fields. These field can be freely picked\n  # to add additional information to the crawled log files for filtering\n  #fields:\n  #  level: debug\n  #  review: 1\n\n  ### Multiline options\n\n  # Mutiline can be used for log messages spanning multiple lines. This is common\n  # for Java Stack Traces or C-Line Continuation\n\n  # The regexp Pattern that has to be matched. The example pattern matches all lines starting with [\n  multiline.pattern: '^\\{'\n\n  # Defines if the pattern set under pattern should be negated or not. Default is false.\n  multiline.negate: true\n\n  # Match can be set to \"after\" or \"before\". It is used to define if lines should be append to a pattern\n  # that was (not) matched before or after or as long as a pattern is not matched based on negate.\n  # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash\n  multiline.match: after\n  multiline.max_lines: 500  \n\n\n#================================ General =====================================\n\n# The name of the shipper that publishes the network data. It can be used to group\n# all the transactions sent by a single shipper in the web interface.\n#name:\n\n# The tags of the shipper are included in their own field with each\n# transaction published.\n#tags: [\"service-X\", \"web-tier\"]\n\n# Optional fields that you can specify to add additional information to the\n# output.\n#fields:\n  #env: Dev\n\n#================================ Outputs =====================================\n\n# Configure what outputs to use when sending the data collected by the beat.\n# Multiple outputs may be used.\n\n#-------------------------- Elasticsearch output ------------------------------\n#output.elasticsearch:\n  # Array of hosts to connect to.\n #hosts: [\"172.26.248.204:9200\"]\n\n  # Optional protocol and basic auth credentials.\n  #protocol: \"https\"\n  #username: \"elastic\"\n  #password: \"changeme\"\n\n#----------------------------- Logstash output --------------------------------\noutput.logstash:\n  # The Logstash hosts\n  enabled: true\n  hosts: ${LOGSTASH_HOSTS}\n\n  # Optional SSL. By default is off.\n  # List of root certificates for HTTPS server verifications\n  #ssl.certificate_authorities: [\"/etc/pki/root/ca.pem\"]\n\n  # Certificate for SSL client authentication\n  #ssl.certificate: \"/etc/pki/client/cert.pem\"\n\n  # Client Certificate Key\n  #ssl.key: \"/etc/pki/client/cert.key\"\n\n#================================ Logging =====================================\n\n# Sets log level. The default log level is info.\n# Available log levels are: critical, error, warning, info, debug\nlogging.level: info\n\n# At debug level, you can selectively enable logging only for some components.\n# To enable all selectors use [\"*\"]. Examples of other selectors are \"beat\",\n#\"publish\", \"service\".\n#logging.selectors: [\"*\"]\nlogging.to_files: true\nlogging.to_syslog: false\nlogging.files:\n  path: /var/log/filebeat\n  name: Filebeat.log\n  keepfiles: 7\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "filebeat-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "foodnbeverage-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/foodnbeverage\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/foodnbeverage"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "foodnbeverage-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "guest-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/guest\nservice:\n  component:\n      settingId: 3b51a112-b4ac-452c-bc7f-0cbd644f4ae8\n      clientId: 4b805361-ff06-425b-81e3-cf66a6edfd6f \n      adapteeName: NCL\n      secretId: secret"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "guest-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "guestmultimedia-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/guestmultimedia\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/guestmultimedia"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "guestmultimedia-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "guestpreference-service.yml": "spring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/guestpreference\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "guestpreference-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "idcrossreference-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/idcrossreference\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/idcrossreference"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "idcrossreference-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "identity-access-management-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/identityaccessmanagement\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/identityaccessmanagement\nkeystore:\n  password: ${DXPKEYSTORE_VALUE}\nservice: DXP"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "identity-access-management-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "imageprocessing-service.yml": "app:\n name: imageprocessing\n imageFormat: jpg\n autheticationServiceURL: http://dxpidentityaccessmanagementservice/identityaccessmanagement-service/oauth/token?grant_type=client_credentials\n multimediaStorageServiceURL:  http://dxpmultimediastorageservice/multimediastorage-service/\n clientToken: ${BASICTOKEN}\n bootstrapServers: 172.31.78.158:9092\n enableAutoCommit: true\n isolationLevel: read_committed\n keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer\n autoOffsetReset: latest\n \n bootstrapserversKey: bootstrap.servers\n KeyDeserializerKey: key.deserializer\n ValueDeserializerKey: value.deserializer\n ValueDeserializerValueKey: org.apache.kafka.common.serialization.StringDeserializer\n KeyDeserializerValueKey: org.apache.kafka.common.serialization.StringDeserializer\n IsolationLevelKey: isolation.level\n EnableAutoCommitKey: enable.auto.commit\n GroupIDKey: group.id\n AutoOffsetResetKey: auto.offset.reset\n\n groupId: 4779df07-c991-4b12-992d-aa8e593ad76f\n topicName: infra.multimediastorage\n awsAccessKey: ${S3BUCKET_ACCESSKEYID}\n awsAccessKeyValue: ${S3BUCKET_ACCESSKEY}\n awsBucketName: dxp.demo.decurtisdxp.com\n\nsmb:\n  username: ${FILESTORAGEUSER}\n  password: ${FILESTORAGEPASSWORD}\n\nitems:\n storagelocation: AWS\n objectStorageURL: https://s3.amazonaws.com\n\nlogLevel: INFO\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "imageprocessing-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "incident-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/incidentmanagement\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/incidentmanagement"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "incident-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "logistics-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/logistics\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/logistics"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "logistics-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "luggage-service.yml": "spring:\n  datasource:\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/luggage"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "luggage-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "messaging-service.yml": "spring:\n  datasource:\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/messaging\n\n  velocity:\n   resourceLoaderPath: classpath:/templates/\n   suffix: .vm\n   cache: false\n   check-template-location: true\n   content-type: text/html\n   charset: UTF-8\n   properties:\n    input:\n     encoding: UTF-8\n    output: \n     encoding: UTF-8\n  mail:\n   host: smtp.office365.com\n   port: 587\n   username: ${MAIL_SENDER_USERNAME}\n   password: ${MAIL_SENDER_PASSWORD}\n   protocol: smtp\n   properties:\n    mail:\n     smtp:\n      auth: false\n      starttls: \n       enable: true\n \napp:\n   clientToken: ${CLIENT_TOKEN}\n   enableAutoCommit: true\n   autoCommitIntervalMs: 1000\n   sessionTimeoutMs: 50000\n   isolationLevel: read_committed\n   autoOffsetReset: lattest\n   groupId: core-messaging-kafka-group\n   topicName: infra.messaging\n   pollingIntervalMs: 200\n   newsSubScriptionTemplateName: news-subscription\n   mailChimpUsername: ${MAILCHIMP_USERNAME}\n   mailChimpPassword: ${MAILCHIMP_PASSWORD}\n   mailChimpListName: ${MAILCHIMP_LIST_NAME}\n   mailChimpURL: https://us14.api.mailchimp.com/3.0/lists/\n   mailChimpBasicToken: ${MAILCHIMP_BASIC_TOKEN}\n "
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "messaging-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "moderate-online-check-in-bff-service.yml": "selfUrl: \"https://ncl.d-aws-dxp.com/svc/moderate-online-check-in-bff/\"\nconsumerAppName: \"moderate-online-check-in-ui\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nenableLogSrcFlag: \"true\"\nrequestTimeOutInMs: 10000\noffset: \"+5:30\"\nlogSeverity: \"info\"\nUSCountryCode: \"US\"\ngoogleLoginSourceId: \"a3290d44-785d-11e7-959e-0a1a4261e962\"\nauthLoginSourceId : \"12c927d1-e90a-e711-80c9-a06699100836\"\nsocialLoginUserTypeId: \"ba0e0fc5-9bf6-4310-b6e4-829fe6b45afb\"\nssoLoginSourceId: \"2110c49e-be3c-11e7-8005-0a1a4261e962\"\nadminRoleCode: \"ADMIN\"\nmultimedia: \"https://ncl.d-aws-dxp.com/svc/multimediastorage-service/\"\nrecentUpdateLimit: 60000\nteamMemberSourceId : \"29979f56-831e-11e7-a99f-0a1a4261e962\"\nloginType: \"sso\""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "moderate-online-check-in-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "moderate-online-check-in-ui-service.yml": ""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "moderate-online-check-in-ui-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "multimediastorage-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/multimediastorage\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/multimediastorage\nazureblob:\n  storageconnectionstring: DefaultEndpointsProtocol=https;AccountName=imagingmediastorageblob;AccountKey=5blr7n4wo7LSwV47BXU3hjf01dPObnJeuvmGhh18ZZ70PFsFB+xx+NPxOjewO4uyXQfo5REyOJyFOKrRgIDMyg==\n  isblobstorage: true\n  container: multimediastoragecontainer\n\nsmb:\n  username: ${FILESTORAGEUSER}\n  password: ${FILESTORAGEPASSWORD}\n\nmultipart:\n  maxfilesize: 50MB\n  maxrequestsize: 50MB\n\nkafka:\n  topicName: infra.multimediastorage\n  isKafkaEnabled: true\n  \nconfigurationsetting:\n  uploadlimit: 5000000000\n  uploadlimittime: 60\n\nAWS:\n objectStorageURL: https://s3.amazonaws.com\n storagelocation: AWS\n S3BucketAccessKeyId: ${S3BUCKET_ACCESSKEYID}\n S3BucketAccessKey: ${S3BUCKET_ACCESSKEY}\n bucketname: dxp.demo.decurtisdxp.com"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "multimediastorage-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "ncl.jks": "����\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0003ncl\u0000\u0000\u0001_��q\u001a\u0000\u0000\t�0�\t�0\u000e\u0006\n+\u0006\u0001\u0004\u0001*\u0002\u0011\u0001\u0001\u0005\u0000\u0004�\tm,!�y\u0010���%�\u0005fi�������Ff�q�ȣ\u0002�笤S���!�5��ޜ%\t�Mm(a8E�M�^`[��K��\u0011�`n�?�/!/����􎺫+�<4�PQ���PEｻX/w�@�\u0000�ձe�>\u00045\u001a;KY@��\u007f�\u001a\u0012x�[Aڎ);4VϺ���\u001f�I-4�8f�c�\u0000�>-¦�\n˵rc�*ݮc!lc�_(�\f0�ˏK\u0017\u0006%c��k\u0006��Q\u001b\"�M��\u0003P����\f*�=~�ҹ�Z�\u001d��g�1\u001f]5�M\r�s����a�l��;�m�y>�צ��\u0019�ѻ(�YOP\u0018��I\u0007%�A0\u0016\u0018��\u001bO�등\u0003j���y��'{\u000f���\t����\u007f�}�lN�\u001f�9\u0014,��<��%����\u0000ѹ�ҌV�ՠ��޿�#��F��4\u0003R�e�\u0007�o\u001eX�r$�tϥN<9��d����\f�j(\r�iO*�2�fn���\u0016�\\Z�\b\u0011�\u0001�\u0001�s\u0016���6�o:U�yuoڼ\u001b�8��j�Ʃ�-\u001e�6�ܛ�\u0000,�?\u0003�\u0011L�\u0015�گ��e�k\u0007��H\u007fb�\u00187��2m���(\u001a�C_||�J\u000bM ������;\u001f\u0000\n�Ы{*�!�\t��᠏��Ԣ��T=�\u00012X�G��p0V�\n�j���k�\u0000��\u007f��f^\u0018�^����\u0019V%�+�\u007fc���4��6�[�\u0016\u007f��\u0002u��+�yw���5X��\u0014\t�\u0011.�'�$�ӏ���˧+�p2QWҴ�A\u0014���r��A���3�\u0016d\u0019L\u0005��9�\tN��\u0010��E���7��V�O�l���m��j�L��>�2�9�np� )%�\u0013Z=���S��\u0000�8�-�\n1����b�غ��\u0016�\u0017��\u0016�=�'Ն5�G\t��a��Z]��P�}\u0013p��4��=\u0000�>۩\fۥ�&R\u0010j�K�\u001d�p�F\f܄�`\u001f0\u0010p\u001c\u0017\u001f\u0012�\u0019\u000bl@9\u0013\u000b �ª\u0000\u001f:��B���G�BT�a[�\nC`\u0007i[\u0018�\u001d��b\u0002�.��\u0019H�]]�޵͞8��+3�b��\u0000%pVt{��ݓ�KԢ�\u0004�i��Q\"�&jZ���fV�mYlyE�a+༃��\u000fs:��\u0018SF��Lm�5��~\t�C\n�z\"I��\u0000'7�\u0013q��\u001c��d���DT�\u007f���x�\tw��\u0002��9*=��H�\tj� �d��>��\r\"�9��j�r=;k�ˀ�\u001fgi�y#����v6�r\u00154\u0012��Ş���~\u007fM�>��coc\u0007\u0010�E��Ҝ��5\\D0$ݧ�pM3̪���A�<�-�.��\t\r��0B.μ���me\b���Lw,K�����\u0007��-3�5&�\u001b�墲WMt�0�ac�����n\u000ek��C#tW���5��\u0002*�W�n\u000b���\u0018p��]����H9^�4��8�@�\u0000���A\u0000R��\u001b���w�*y���I��\r\u001ep�t�3�\u0015x���@�m�3\u0007Ǖ=�<B]�~R�\u0012��\u001f� l,�b\u0018���ѿN�F�x`�ꜻI��\tK\u0006�\u0004\nG\u001f��?5\\��N���a�)=\u0002Wn\u0011��}O�.�g�Ӭ�[�\u0015\u0000��VT\u001c�0��6%��з�\u0003P,\u0006Y��\u001f�o7���\u0015s�dS�s!W.\u0012S;�;<%\b|Qf%g��3����a\u0003\\\\S���4�\u001e0P'\u0002\u00077[�%koT�V�\u001c8�]M��H,��L,OQ\u001a�\u0011�\u0011�j͇z��\"����T\\�\u0018S�;g\u0004�^��|�g�����\u001d\"�%~��\u0007$�2���`����$��\u001f��C\u0005%�Q ����s�\u0016��\u0002v^v��Э�e~&�f����\u001c\\]��\u0007�6�\u001el��\r9�.��'ئ\fT|K۲�\u000e�� ��$G\u0015�䂨y����/\u0019��\u0012y�]7$��\"\u0005'�F&6z\u001fe7\u0006�rq����\u000e'�\f\u0017\u001a��KH�et�{_쑰��Əe.�5��Z\"W����[c�R\u0018���^m\r��8��W\t%�1\u0016\u000b��5��>\u0019����[�ưk�����h{Q����O\u000f,\u0001\u0000���X��%B�\n&�V�\u0018\u0011����m�\u0012��\u0012[��r;� %(G�FDg��\u0000B3\r���^#���5���e��\t���!� ��|v�U����\u0002{�\u001bE�5�9��\u001f�cЮ�\u0017o��?�Tv�\u007f>7,\u0019w�����\u001ap\u001713E$OQ�/\u0013\u001c��\th�]\u0015Ԯĺ��\u001f�\u001d�)�s�j�^9k\u007f���#��PK�y�.�j��F�ϣ��3�j��@\u0001����a�H������*��,ѕ\u0010�}��Ɏ�K8���=iwݎ���\u0010m�\u000f��\u0005@��5t\\�F{�IG`�v\u0006�֓ծ\u001ebA\b\u0014wr�%�H\r���4����\u0011+�J��\u0000����\u0011\u0017^C�����V�x����\u000f�E��|9K\u0018/=�g��K,>x�\u0018�\u000e�\u00101�\u0014�Ef�:4Y\u0014�Ј��b��*7Ϫ�\u007f\u0010K�3��(U\u0014�#!;̠{_\u00132\u0007�L=:w\u0005Xrs:�)\b��}p&9�\u001c�T�]u�x\\���G���u�Y��\r�}�g���h�1\u0004��b���Ǐܐ\u001cC�q\u001bd��\u007f�\u0014v-�5G�D�XKO���E\u0000w�\r��Yō�𵪒��s��!�>�H}��3'�\u001e\u001d�-��X\u0005�N�\u001b1d�\u001c\u0019�m.�;�C��~�\u000f\u000fNt3�\u00055o\u0012c ��U�/�)�Ry#N��O\u001f\u0000����\u0013+w\u001f8B?#\u001fxȤ��).�A�a��t�zQJu�����U:��@\u000fW\u0005抡\u0010K\u001a�p~���eTD0[T��\u0001\u001b(\u0016y��\u001d�y�w;Y]v�nHs�J�\u000b��EB\"Wx�eʈH\u0003y�\u001cE��|�0�\u0007�zz�ՙ@�\u0017LK�&��\u0017�p�\u0018xZ�)#��K��>2\u0013��\u0002�9�\u0011�[�F�ܓ\u0016o���3��D���D�Z�\u0005��\u000e�o�k/F�pt��d\f��9���]��\u000e��ǖ�\u0000��\u001dfC\u0002�\u007f�\rE&�����$ۛ`_���\u0000\u0000\u0000\u0001\u0000\u0005X.509\u0000\u0000\u0005�0�\u0005�0�\u0003�\u0002\u0001\u00010\r\u0006\t*�H��\r\u0001\u0001\u0005\u0005\u00000��1\u000b0\t\u0006\u0003U\u0004\u0006\u0013\u0002US1\u000b0\t\u0006\u0003U\u0004\b\f\u0002FL1\u000e0\f\u0006\u0003U\u0004\u0007\f\u0005Miami1\u001c0\u001a\u0006\u0003U\u0004\n\f\u0013NCL Corporation LTD1\u000e0\f\u0006\u0003U\u0004\u000b\f\u0005QA-IT1\u00170\u0015\u0006\u0003U\u0004\u0003\f\u000eqa-api.ncl.com1!0\u001f\u0006\t*�H��\r\u0001\t\u0001\u0016\u0012itsecurity@ncl.com0\u001e\u0017\r171016153111Z\u0017\r191101153111Z0��1\u000b0\t\u0006\u0003U\u0004\u0006\u0013\u0002US1\u00100\u000e\u0006\u0003U\u0004\b\f\u0007Florida1\u000e0\f\u0006\u0003U\u0004\u0007\f\u0005Miami1\f0\n\u0006\u0003U\u0004\n\f\u0003dxp1\u00110\u000f\u0006\u0003U\u0004\u000b\f\bNCLH API1\u00170\u0015\u0006\u0003U\u0004\u0003\f\u000eqa-api.ncl.com1(0&\u0006\t*�H��\r\u0001\t\u0001\u0016\u0019ITSecurityOps@nclcorp.com0�\u0002\"0\r\u0006\t*�H��\r\u0001\u0001\u0001\u0005\u0000\u0003�\u0002\u000f\u00000�\u0002\n\u0002�\u0002\u0001\u0000��o�y%^\u0001\u0003|b|�������f\u0007G��u]�0�O.K������z�!p>��8u\u0003s\u0001E�\u0015R���\u000e���\"�֍��2�p��Y�*�\u0013����s�zC��2�w`�R,��\u001fl�*�5��\u0003��\u0017(��g�\bi�\u0001B\u0016+W@g�~\u0019!H��b�!��\r��:z�\\}�;�\u000f������xe�F.t;l���\u001a@٘#��G��\u0017�b(\u0016w��؅?�l͝��R���;�+�\u001b6$�\f.��\u0003.�h��21&k��q\u007fR~�1��8\u0011���| �t@��j��`�ApF�1\u00187�>���,٬�\b�\u0013X\"���\u0015\u0010����;ԁ�輼�=�\u0019��/0f��Z[\u000e\u0012���\u001c\u0006��a;��Z7���n^ޖ��pl��\u001e\f7�ݹ�\u001d\u0002O'4\tX�P^|dY�\u0004��z�\u000e\u000b�UN�\\2\b!�\u00005~\u001d������+�V�3A�>����5�����;���\"\u001c\u0010ͩ�'ȏlPQ���P-BaX\u0013\u001a\u0003��Y.c\u000b6쾳C84�Fת\u0017\u001b}JZR�C��\"'�e$\u001c�C,�Ƽ1�&�\u0002��������\u0018�L#�Y\u0014\u0012\rU�p��śi���(�t�\u001d)U���j�l�Τ+[m�\u001bh�t�1\u0002\u0003\u0001\u0000\u00010\r\u0006\t*�H��\r\u0001\u0001\u0005\u0005\u0000\u0003�\u0002\u0001\u0000[��\tTI�X\u0002h�N�\u0003&Ֆ�<9�4���\u0003�L\u00111�\u0018\u0019Ģ#���'\u001a�\u0016i\u001d��\u0000���1b\"�z�\u0019�\u0000ɲ��?��;pW�����\u000fN���iLQ��F�\u0003v:n�K��v�\u000e\u0003\"�t\u001a\u000b�\u0002�\u0004����J`B�S�}9BG�bS�kW5y�K;�o\b.�'�{�H��a�9\u0010:�V�R��]��ʜ�\t��#]H��9|5ut�}���m&��\u0018}D\u0018���A{;�M���gq�y\u0007R\u0017�\u0015%�:M�D�R\f�\to��]m\u001c\u0005\u001ef�\u0007\u001a\u000b����\u0012es�*��hM.�\u000bE�\u0010\u000b�V�!�Ԯ�\u0012q}\u0003��v��+�P�`�i�y/s�{2��\n㜆��\n�OQ��\u0019��Y&F�V\u001cNz,>\u0006J��87�B~��_@�TƖ� Sz����xh����m���=\u001a��E�)Dq�d�`>\b!I\u000f\u0001�8��7\u0002�h�\u0012�%�����f*o\n\" ���̎H=ɿ\u0016��fү\u0010�\u0015)��}\ba\u001eG;��i���]'\u0000`�����A�%ӑpp�&���YG`s\u000b�sR�\u000b��Op \u0010��p�\u0016�\u007fk\u0005��3�Ԇ�,\u000e�Ƒ��I\u0014w؍$��uL��&wQÄө�qN�\u0011�\u001cF�~��o�y&�r�ZS\u0000�\u0016i\u0005'�\u0006����"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "ncl-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "ncl-online-check-in-bff-service.yml": "selfUrl: \"https://ncl.d-aws-dxp.com/svc/ncl-online-check-in-bff/\"\nembarkation: \"https://ncl.d-aws-dxp.com/svc/embarkationnorule-service\"\nsecurityPhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nprofilePhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\ndocumentMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nconsumerAppName: \"online-check-in-ui\"\nenableLogSrcFlag: \"true\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nnonUSMaxFlightSegmentCount: 6\nUSMaxFlightSegmentCount: 4\nUSCountryCode: \"US\"\ndefaultTravelToTypeId: \"AI\"\ndefaultTravelToTypeIdUsSailor: \"HO\"\ndefaultPreTravelByTypeId: \"7617a76f-6348-4332-bc65-fcb474496c85\"\ndefaultPostTravelByTypeId: \"7617a76f-6348-4332-bc65-fcb474496c85\"\nadultMinAge: 18\naddressTypeUsedInOci: \"HOME ADDRESS\"\nphoneTypeUsedInOci: \"HOME\"\ncruiseContractTextWidgetId: \"C56A418065AA42ECA9455FD21DEC0358\"\ncheckInSummaryTextWidgetId: \"A16A418065AA42ECA9455FD21DEC0358\"\ncashLetterTextWidgetId: \"A16A418065AA42ECA9455FD21DEC0359\"\nmealPreferenceId: \"9b805569-39db-4c1b-b1d8-03671f20f74c\"\nactivityPreferenceId: \"d228aab5-a0e3-4705-92df-8ebebf5af6d3\"\ndefaultMealPreferenceValueId: \"b910eaf6-ee0c-477b-9ccd-cdd24ff7a389\"\ndefaultActivityPreferenceValueId: \"6047d484-7a84-44ca-8889-c950faefd2f0\"\ndefaultDebarkTypeId: \"654da508-6ad3-11e7-8a85-0a1a4261e962\"\ndefaultIdDocTypeId: \"P\"\nairlinesForBaggageSupport: [\"TR\"]\nlittleKidAge: 8\npreTeenAge: 13\ninfantAge: 4\nminAgeToAllowCharge: 10\nrouteToPaymentModeId: \"f8205196-993b-11e7-adc9-0a1a4261e962\"\nsendersEmailAddress: \"alert@decurtis.com\"\nmessagingTemplateName: { cruiseContract: \"cruise-contract\", cruiseContractSigned: \"cruise-contract-signed\" }\neventName: \"messaging:mail\"\nbffComponentName: \"oci-bff\"\nkafkaTopic: \"infra.messaging\"\nemailAttachmentMediaId: 'cruise-contract|a9520186-08a8-4d57-8f43-f1a200bec2fe'\nrequestTimeoutMiliseconds: 8000\nwheelChairCode: \"VVNC\"\nselfCruisePreferenceIds : { yesValueId : 'cbf285d2-cdf5-11e7-979b-0a1a4261e962', noValueId: 'f6daa162-cdf5-11e7-979c-0a1a4261e962'}\notherCruisePreferenceIds : { yesValueId : '0bed04fa-cdf6-11e7-979d-0a1a4261e962', noValueId: '12e83e82-cdf6-11e7-979e-0a1a4261e962'}\notherCruiseLinesQuesPreferenceId: \"3f218dc4-cdf5-11e7-979a-0a1a4261e962\"\ncruiseLinesParentPreferenceId: \"0bed04fa-cdf6-11e7-979d-0a1a4261e962\"\nsecondaryPhoneTypeUsedInOci: \"OTHER\""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "ncl-online-check-in-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "ocr-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/ocr\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/ocr\nocr:\n  sdk:\n    client:\n      applicationId: OCR-Service-DEV\n      password: E8icJhisbX94ASUP0q3A92uv\n      serverUrl: https://cloud.ocrsdk.com\nmultiMediaStorage:\n  resource: mediaitems/\nreferencedata:\n  resource: countries/\n  size: ?size=300  \nnewOcr:\n  client:\n     ocrEngineType: leadTools\n     libraryPath: /home/x64/\n     licensePath: /home/admin13/Downloads/eval-license-files_aa333c7b-c505-4be2-8e70-f5e02c38c9e8/eval-license-files.lic\n     ocrAdvantageRuntime: /home/OcrAdvantageRuntime\n     developerKey: g8weXpVTj5bLbVDDEtE9k4CRD8AdLmUIvt383qJp5jO5oMTYamOd132YzHqvCmFEbpzBcr6aPCSEpOFGreGdl0wjHqF7nx/u "
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "ocr-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "online-check-in-bff-service.yml": "selfUrl: \"https://ncl.d-aws-dxp.com/svc/online-check-in-bff/\"\nsecurityPhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nprofilePhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\ndocumentMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nconsumerAppName: \"online-check-in-ui\"\nenableLogSrcFlag: \"true\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nnonUSMaxFlightSegmentCount: 6\nUSMaxFlightSegmentCount: 4\nUSCountryCode: \"US\"\ndefaultTravelToTypeId: \"AI\"\ndefaultTravelToTypeIdUsSailor: \"HO\"\ndefaultPreTravelByTypeId: \"7617a76f-6348-4332-bc65-fcb474496c85\"\ndefaultPostTravelByTypeId: \"7617a76f-6348-4332-bc65-fcb474496c85\"\nadultMinAge: 18\naddressTypeUsedInOci: \"1\"\nphoneTypeUsedInOci: \"1\"\ncruiseContractTextWidgetId: \"C56A418065AA42ECA9455FD21DEC0358\"\ncheckInSummaryTextWidgetId: \"A16A418065AA42ECA9455FD21DEC0358\"\ncashLetterTextWidgetId: \"A16A418065AA42ECA9455FD21DEC0359\"\nmealPreferenceId: \"9b805569-39db-4c1b-b1d8-03671f20f74c\"\nactivityPreferenceId: \"d228aab5-a0e3-4705-92df-8ebebf5af6d3\"\ndefaultMealPreferenceValueId: \"b910eaf6-ee0c-477b-9ccd-cdd24ff7a389\"\ndefaultActivityPreferenceValueId: \"6047d484-7a84-44ca-8889-c950faefd2f0\"\ndefaultDebarkTypeId: \"654da508-6ad3-11e7-8a85-0a1a4261e962\"\ndefaultIdDocTypeId: \"P\"\nairlinesForBaggageSupport: [\"TR\"]\nlittleKidAge: 8\npreTeenAge: 13\ninfantAge: 4\nminAgeToAllowCharge: 10\nrouteToPaymentModeId: \"f8205196-993b-11e7-adc9-0a1a4261e962\"\nsendersEmailAddress: \"alert@decurtis.com\"\nmessagingTemplateName: { cruiseContract: \"cruise-contract\", cruiseContractSigned: \"cruise-contract-signed\" }\neventName: \"messaging:mail\"\nbffComponentName: \"oci-bff\"\nkafkaTopic: \"infra.messaging\"\nemailAttachmentMediaId: 'cruise-contract|a9520186-08a8-4d57-8f43-f1a200bec2fe'\nrequestTimeoutMiliseconds: 8000\nwheelChairCode: \"VVNC\"\nselfCruisePreferenceIds : { yesValueId : 'cbf285d2-cdf5-11e7-979b-0a1a4261e962', noValueId: 'f6daa162-cdf5-11e7-979c-0a1a4261e962'}\notherCruisePreferenceIds : { yesValueId : '0bed04fa-cdf6-11e7-979d-0a1a4261e962', noValueId: '12e83e82-cdf6-11e7-979e-0a1a4261e962'}\notherCruiseLinesQuesPreferenceId: \"3f218dc4-cdf5-11e7-979a-0a1a4261e962\"\ncruiseLinesParentPreferenceId: \"0bed04fa-cdf6-11e7-979d-0a1a4261e962\"\nsecondaryPhoneTypeUsedInOci: \"2\""
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "online-check-in-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "online-check-in-ui-service.yml": "expiryValidityPostVoyageInDays: 8\nenableChildRegistrationFlag: true\nenableMinorDebarkationFlag: true\nreservationUrl: http://10.3.0.67/reservation/\narsUrl: http://52.2.178.96/activity-reservation-system/\ntimeoutThresholdInMiliseconds: 93000\nuseProfilePhotoFlag: true\nshipName: Bliss"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "online-check-in-ui-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "payment-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/payment\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/payment\n      \naccessKey: 849dbb8586f23706ac2ba0bb0081ea1b\nprofileID: 3546F399-CA5E-471B-A939-98660F713335\nsigned_field_names: access_key,profile_id,transaction_uuid,signed_field_names,unsigned_field_names,signed_date_time,locale,transaction_type,reference_number,amount,currency,payment_method,bill_to_forename,bill_to_surname,bill_to_email,bill_to_phone,bill_to_address_line1,bill_to_address_city,bill_to_address_state,bill_to_address_country,bill_to_address_postal_code\nsecretKey: ${CS_KEY}\ntransactionType: sale\npaymentMethod: card\ncurrencyCode: USD\nlocale: en\nsignatureverification:\n  enable: true"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "payment-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "personlocation-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/personlocation\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/personlocation"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "personlocation-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "referencedata-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/referencedata\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/referencedata\n      \napp:\n  kafka:\n    topic:\n      name: core.referencedata"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "referencedata-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "reporting-service.yml": "spring:\n  couchbase:\n           bootstrap-hosts: 172.31.19.172\n           bucket:\n                 name: reporting\n                 password: yellow*99\n           env:\n              timeouts:\n                      connect: 60000\n                      socket-connect: 60000\n                      autoreleaseAfter: 20000\nlogLevel: ERROR\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "reporting-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "reservation-bff-service.yml": "selfAddress: \"https://ncl.d-aws-dxp.com/svc/reservation-bff\"\nconsumerAppName: \"reservation-ui\"\noffset: \"+5:30\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nenableLogSrcFlag: true\nrequestTimeOutInMs: 200000\ndaysToOnlineCheckin: 365\n# Please update below mentioned Urls, once integration will be done\n# identify the values\nonlineCheckinUiUrl: 'https://ncl.d-aws-dxp.com/web/online-check-in/'\nmultimediaPublicUrl: \"https://ncl.d-aws-dxp.com/svc/multimediastorage-service/\"\nsailorTypeId: '488c68c4-e80a-e711-80c9-a06699100836'\nfacebookSourceId: '11c927d1-e90a-e711-80c9-a06699100836'\niamSourceId: '12c927d1-e90a-e711-80c9-a06699100836'\nseawareSourceId: '14c927d1-e90a-e711-80c9-a06699100836'\nuserType: 'Guest'\nactivityreservation: 'https://ncl.d-aws-dxp.com/web/activity-reservation-system/'\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "reservation-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "reservation-service.yml": "service:\n  component:\n      componentId: 8dba6875-50ae-44fa-aa6a-d1a94169df70\n      clientId: a6de78e9-e118-4420-97d1-b1e0fec2e37c\n      secretId: secret\n      adapteeName: reservationAdaptorImpl\n      \nspring:\n  datasource:\n    defaultConnectionTimeout: 10\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/shoresidesorstub\n\nselectedFare:\n   fareCode: BESTPRICE\n   \nseaware:\n  reservation:\n     uniqueIdType: 14\n\nerror:\n  message:\n     validation: Error while checking validations  \n     incorrect_cabin_count: \"Cabin count not correct\"\n     incorrect_amount: \"Amount not matching for cabin count : \"\n     reference_number_not_generating: \"Reference number not generated successfully due to : \"\n     application_settings: \"Unable to fetch application settings successfully due to :  \"\n     unsuccessful_payment: \"Payment not completed successfully\"\n     unsuccessful_reservation_number_generation: \"Reservaion number not generated successfully due to : \"\n\n   \nurl:\n  googleplay: \"#\"\n  appstore: \"#\"\n  ota_cuiseSailAvail: \"http://10.3.0.14:8280/ota/rest/OTA_CruiseSailAvailRQ\"\n  ota_cruiseCabinCategoryAvail: \"http://10.3.0.14:8280/ota/rest/OTA_CruiseCategoryAvailRQ\"\n  ota_cruiseCabinAvail: \"http://10.3.0.14:8280/ota/rest/OTA_CruiseCabinAvailRQ\"\n  ota_cruiseItineraryAvail: \"http://10.3.0.14:8280/ota/rest/OTA_CruiseItineraryDescRQ\"\n  ota_readRQ: \"http://10.3.0.14:8280/ota/rest/OTA_ReadRQ\"\n  ota_cruisePriceBooking: \"http://10.3.0.14:8280/ota/rest/OTA_CruisePriceBookingRQ\"\n  ota_cruiseCabinHoldUrl: \"http://10.3.0.14:8280/ota/rest/OTA_CruiseCabinHoldRQ\"\n  ota_cruiseCabinUnholdUrl: \"http://10.3.0.14:8280/ota/rest/OTA_CruiseCabinUnholdRQ\"\n  ota_bookReservation: \"http://10.3.0.14:8280/ota/rest/OTA_CruiseBookRQ\"\n  ota_profileCreate: \"http://10.3.0.14:8280/ota/rest/OTA_ProfileCreateRQ\"\n#   ota_cuiseSailAvail: \"http://reservation.getsandbox.com/OTA_CruiseSailAvailRQ\"\n#    ota_cruiseCabinCategoryAvail: \"http://reservation.getsandbox.com/OTA_CruiseCategoryAvailRQ\"\n#    ota_cruiseCabinAvail: \"http://reservation.getsandbox.com/OTA_CruiseCabinAvailRQ\"\n#    ota_cruiseItineraryAvail: \"http://reservation.getsandbox.com/OTA_CruiseItineraryDescRQ\"\n#    ota_readRQ: \"http://reservation.getsandbox.com/OTA_ReadRQ\"\n#    ota_cruisePriceBooking: \"http://reservation.getsandbox.com/OTA_CruisePriceBookingRQ\"\n#    ota_cruiseCabinUnholdUrl: \"http://reservation.getsandbox.com/OTA_CruiseCabinUnholdRQ\"\n#    ota_cruiseCabinHoldUrl: \"http://reservation.getsandbox.com/OTA_CruiseCabinHoldRQ\"\n#    ota_bookReservation: \"http://reservation.getsandbox.com/OTA_CruiseBookRQ\"\n  \nholdcabin:\n  release_time: 5\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "reservation-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "reservation-ui-service.yml": "minCapacity: 1\nmaxCapacity: 4\ndeckLocation:\n          - FWD\n          - MID\n          - AFT\n\nyears:\n  - label : '2017'\n    value: '2017'\n  - label : '2018'\n    value: '2018'\n  - label : '2019'\n    value: '2019'\n  - label : '2020'\n    value: '2020'\n\nduration:\n  - label : '3 days'\n    value: '3'\n  - label : '5 days'\n    value: '5'\n  - label : '7 days'\n    value: '7'\n  - label : '10 days'\n    value: '10'\n\ncabins:\n  maxSailorCount: '5'\n  maxAdultCount: '5'\n  maxKidCount: '4'\n\npriceRange:\n  start: 0\n  end: 10000\n\ncabinTypes:\n  - name: 'Balcony'\n    id: 'A'\n    icon: 'type-balcony'\n  - name: 'Inside'\n    id: 'B'\n    icon: 'type-inside'\n  - name: 'Ocean view'\n    id: 'C'\n    icon: 'type-ocean-view'\n  - name: 'Suite'\n    id: 'D'\n    icon: 'type-suite'\n\ndaysToOnlineCheckIn: 365\nminSignUpAge: 21\ndefaultSignUpAge: 25\nreservationLabel: 'Reservation Number'\npersonalInfoNonEditableFields:\n  - userFirstName\n  - userLastName\n  - userDOB\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "reservation-ui-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "rule-service.yml": "server:\n  compression:\n    enabled: true\n    mime-types:\n    - application/json\n    - application/hal+json\n    - text/html\n    - text/plain\nurl:\n    path:\n        rule:\n          server: http://54.208.71.36:8080/kie-server/services/rest/rule-server/execute-rule/\n        cms: http://ncl.d-aws-dxp.com/svc/content-management-service/     \n\nrule:\n  server:\n    username: kieserver\n    password: kieserver\n    bypass-cms: false\n    \nlogLevel: INFO\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "rule-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-framework-bff-service.yml": "selfUrl: \"https://ncl.d-aws-dxp.com/svc/sailor-framework-bff/\"\nsecurityPhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nprofilePhotoMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\ndocumentMediaGroupId: \"f67c581d-4a9b-e611-80c2-00155df80332\"\nconsumerAppName: \"sailor-framework\"\nenableLogSrcFlag: \"true\"\nlogSeverity: \"info\"\npassOnRequestHeaders: \"Authorization,CorrelationId,Accept-Language\"\nmultimedia: \"https://ncl.d-aws-dxp.com/svc/multimediastorage-service/\"\nociModuleCode: 'OCI'\narsModuleCode: 'EXR'\ndaysToEnableOnlineCheckin: \"400\"\nsailorTypeId: '488c68c4-e80a-e711-80c9-a06699100836'\nfacebookSourceId: '11c927d1-e90a-e711-80c9-a06699100836'\niamSourceId: '12c927d1-e90a-e711-80c9-a06699100836'\nuserType: 'Guest'\nseawareSourceId: '14c927d1-e90a-e711-80c9-a06699100836'\nrecommendations: \"http://recommendationsapi.getsandbox.com/\"\nguestIdMapping: {\"551\":\"101\",\"550\": \"99\",\"557\":\"98\",\"556\":\"108\"}"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-framework-bff-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-framework-ui-service.yml": "badWords: test,test1\nmaxLoginBeaconRange: 0.5\nnearestBeaconRange: 2\nnearerBeaconRange: 5\nnearBeaconRange: 8\nbffBaseUrl: \"https://ncl.d-aws-dxp.com/svc/sailor-framework-bff/\"\nminBirthYears: 16\ndefaultTimeout: 9000"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-framework-ui-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "sailor-vas-service.yml": "logLevel: ERROR\nhibernateLogLevel: ERROR"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "sailor-vas-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "salesoffer-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/salesoffer\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/salesoffer"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "salesoffer-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "salesorder-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/salesorder\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/salesorder"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "salesorder-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "ship-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/ship\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/ship\n      \nvoyage:\n  serviceImpl: FIDELIO\n  shipCode: DX\n  serverUrl: https://qa-api.ncl.com/cruiseservice\n  xmlns: http://nclapi/schemas\n  primaryLangId: en-us\n  altLangId: en-us\n  sequenceNumber: 1\n  version: 2.1\n  timeStamp: 2014-07-17T14:18:38.370-05:00\n  echoToken: String\n  booking:\n    type: 1\n    code: DXP\n    codeContext: IATA\n  requestorId: 604615\n  requestorType: 5\n  requestor:\n    code: DXP\n    codeContext: DXP\n    \nkafka:      \n  app:\n    topicName: core.ship"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "ship-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "socialnetworking-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/socialnetworking\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/socialnetworking"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "socialnetworking-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "spring-batchjob-service.yml": "spring:\n datasource:\n  url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/batch_job\n  hikari:\n   jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/batch_job\n\n batch:\n  job:\n   enabled: false\n\nbatch:\n jobs:\n  isEnable:\n   fidelio-crew: false\n   fidelio-guest: false\n   release-inventory-job: true\n   reference-data-job: true\n   ship-job: false\n   boarding-data-job: false\n   guest-couch-core: false\n   reporting-data: false\n\n  cron:\n   fidelio-crew: 0 0/1 * * * ?\n   fidelio-guest: 0 0/1 * * * ?\n   release-inventory-job: 0 0/1 * * * ?\n   reference-data-job: 0 0/1 * * * ?\n   ship-job: 0 0/1 * * * ?\n   boarding-data-job: 0 0/1 * * * ?\n   guest-couch-core: 0 0/1 * * * ?\n   reporting-data: 0 0/1 * * * ?\n  images:\n   guest:\n    isEnable: false\n clientId: 2b9a83ed-2a16-41c9-838a-82ca48aff898\n secretId: secret\n\nhibernateLogLevel: INFO\n\nfidelio:\n username: DeCurtis\n password: Fidelio123\n retryattempt: 3\n \nncl:\n  api:\n    url: https://qa-api.ncl.com/cruiseservice\napp:\n  source:\n    type:\n      name: ReferenceData\n  entity:\n    type:\n      name: Country,State,City,Gender,AddressType,Airline\n      \n#Guest sync couch to core daemon proeprties\nguestcouchtocore:\n filter:\n  channels: GuestPersonalInformation,GuestIdentification,GuestPreCruise,GuestPostCruise,GuestHealthDetail\n getrequest:\n  limit: 100\n  feed: longpoll\n  timeout: 120000\n guestcouch:\n  bucket: appdocstorespms/\n  username: ncldevappdocstorespms\n  password: yellow*99\n      \n#Reporting data population service proeprties  \nreporting:\n filter:\n  channels: Voyage,GuestPersonalInformation,GuestIdentification,GuestMessage,GuestPersonEvent,PersonEvent,PersonEventType,GuestStatus,GuestPersonAlert,TeamMember,TeamMemberPersonAlert,TeamMemberPersonMessage,TeamMemberStatus,Visitor,VisitorIdentification,VisitorPersonAlert,DX_emb_gw_t,DX_emb_aci_t,DX_emb_ap_t,DX_emb_va_t\n getrequest:\n  limit: 100\n  feed: longpoll\n  timeout: 28000\n app:\n  bucket: appdocstorenew/\n  username: nclqcdecurtisnew\n  password: yellow*99\n report:\n  bucket: reporting/\n  username: nclqcdecurtisnew\n  password: yellow*99\n  max:\n    retry:\n      attempt: 5\n      \nvoyage:\n  shipCode: BLISS\n    \nsourceTypeHash:\n  sourceType: Ship\n  \nentityHash:\n  entityName: Voyage\n \nkafka:\n topic: \n  guest: res-vas.voyage-reservation\n  "
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "spring-batchjob-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "talendalerting.properties": "#this is context properties\n#Tue Dec 19 14:08:15 IST 2017\nGToGALastSequenceJSON={\"_id\"\\: \"_local/GToGALastSequence\",\"_rev\"\\: \"<LAST_REV>\",\"channels\"\\: [\"GToGALastSequence\"],\"alertLastSequence\"\\: <AlertLAST_SEQ>,\"messageLastSequence\"\\: <MessageLAST_SEQ>,\"type\"\\: \"GToGALastSequence\"}\nlastrevnumber=a\nAlertlatestsequence=b\nAlertprevsequencenumber=c\nSyncGatewayUrl=http\\://52.1.120.26\\:4984/\nSyncGatewayUsername=vvqcappdocstorenew\nSyncGatewayPassword=yellow*99\nCouchbaseBucketName=appdocstorenew\nLimit=0\nFilter=sync_gateway/bychannel\nChannels=GuestPersonAlert,VisitorPersonAlert,TeamMemberPersonAlert\nFeed=normal\nTimeout=300000\nRestApiUrl=https\\://ncl.d-aws-dxp.com/svc/messaging-service/alerts/\nEnvironmentName=VV-QC-SHIP\nRestApiAutorizationToken=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55aWQiOiJiMzVhMzI1YS0wMzZhLTRhZDQtODgzNi02NDY5MjNlNjAxZGUiLCJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJleHAiOjE1MTU5MzA4MzQsImF1dGhvcml0aWVzIjpbIlJPTEVfVFJVU1RFRF9DTElFTlQiXSwianRpIjoiOTUxMTEyYTQtOWFkMi00MGJhLTk4ZTEtMmRjMzFkYjA3ZWQ0IiwiY2xpZW50X2lkIjoiNDllMTQ2NzEtMzJkMy00MWU4LWI1NzktZDc0N2I1NGZmZDIzIn0.lptUyHLIak2h7Fg8yGWJOPLZx9fWMThDpduMCRMgXJXr8U9fRVqqd4J-EOI8hN3GMPIsxhMbrzfbNlmNiGRXrg9McKXy9dF7m3yG8v2nwBBjugNiZ7GrHenwUwHvwIM0aLZPiIfcW9YBpF8HA3vInLjQ4Cf-s27YbscqeCkhrSA2x37QCW_BrML9XRfTjjM5SuL9ioufA1ybTidq_1WSd0OKN81SG7fSit57EdbCfTQSibIHv8GX8DL0nC6laKEXL7Toa755Pp1NUgCcHk5wjFYSd31Qtk-SH6qjuc_uFPWYkIH5iuf6V-QiwYyLwmTWFN2LqRCNs8-Z9ELUsjkIHA\nMessagelatestsequence=d\nMessageprevsequencenumber=e\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "talendalerting-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "talendmessaging.properties": "#this is context properties\n#Tue Dec 19 14:08:15 IST 2017\nGToGALastSequenceJSON={\"_id\"\\: \"_local/GToGALastSequence\",\"_rev\"\\: \"<LAST_REV>\",\"channels\"\\: [\"GToGALastSequence\"],\"alertLastSequence\"\\: <AlertLAST_SEQ>,\"messageLastSequence\"\\: <MessageLAST_SEQ>,\"type\"\\: \"GToGALastSequence\"}\nlastrevnumber=a\nMessagelatestsequence=b\nMessageprevsequencenumber=c\nSyncGatewayUrl=http\\://52.1.120.26\\:4984/\nSyncGatewayUsername=vvqcappdocstorenew\nSyncGatewayPassword=yellow*99\nCouchbaseBucketName=appdocstorenew\nLimit=0\nFilter=sync_gateway/bychannel\nFeed=normal\nTimeout=300000\nRestApiUrl=https\\://ncl.d-aws-dxp.com/svc/messaging-service/alerts/\nEnvironmentName=NCL-SHORE-DEV\nRestApiAutorizationToken=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55aWQiOiJiMzVhMzI1YS0wMzZhLTRhZDQtODgzNi02NDY5MjNlNjAxZGUiLCJzY29wZSI6WyJ0cnVzdCIsInJlYWQiLCJ3cml0ZSJdLCJleHAiOjE1MTU5MzA4MzQsImF1dGhvcml0aWVzIjpbIlJPTEVfVFJVU1RFRF9DTElFTlQiXSwianRpIjoiOTUxMTEyYTQtOWFkMi00MGJhLTk4ZTEtMmRjMzFkYjA3ZWQ0IiwiY2xpZW50X2lkIjoiNDllMTQ2NzEtMzJkMy00MWU4LWI1NzktZDc0N2I1NGZmZDIzIn0.lptUyHLIak2h7Fg8yGWJOPLZx9fWMThDpduMCRMgXJXr8U9fRVqqd4J-EOI8hN3GMPIsxhMbrzfbNlmNiGRXrg9McKXy9dF7m3yG8v2nwBBjugNiZ7GrHenwUwHvwIM0aLZPiIfcW9YBpF8HA3vInLjQ4Cf-s27YbscqeCkhrSA2x37QCW_BrML9XRfTjjM5SuL9ioufA1ybTidq_1WSd0OKN81SG7fSit57EdbCfTQSibIHv8GX8DL0nC6laKEXL7Toa755Pp1NUgCcHk5wjFYSd31Qtk-SH6qjuc_uFPWYkIH5iuf6V-QiwYyLwmTWFN2LqRCNs8-Z9ELUsjkIHA\nChannels=TeamMemberMessage,VisitorMessage,GuestMessage\nAlertlatestsequence=e\nAlertprevsequencenumber=f\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "talendmessaging-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "teammember-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/teammember\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/teammember\nkafka:\n  topicName: core.teammember"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "teammember-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "tenantmanager-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/tenantmanager\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/tenantmanager"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "tenantmanager-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "traefik.toml": "# traefik.toml\ndefaultEntryPoints = [\"http\",\"https\"]\n\n[entryPoints]\n  [entryPoints.http]\n  address = \":80\"\n    [entryPoints.http.redirect]\n      entryPoint = \"https\"\n  [entryPoints.https]\n  address = \":443\"\n    [entryPoints.https.tls]\n      [[entryPoints.https.tls.certificates]]\n      CertFile = \"/ssl/tls.crt\"\n      KeyFile = \"/ssl/tls.key\"\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "traefik-conf",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "vendor-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/vendor\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/vendor"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "vendor-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "venue-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/venue\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/venue"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "venue-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "visitor-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/visitor\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/visitor"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "visitor-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "wearable-service.yml": "spring:\n  datasource:\n    url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/wearable\n    hikari:\n      jdbc-url: jdbc:postgresql://pgdb-dxp-demo.ctl3ni4ucg21.us-east-1.rds.amazonaws.com:5432/wearable\n      \nbeacon:\n  major: 12345\n  beaconcompanyid: 3b5253b7-46c5-47a1-8849-52eeeea3d2d2\n  categoryid: dd716d7b-695b-4a5d-9ef4-b2337b0e4f01\n  companyid: b35a325a-036a-4ad4-8836-646923e601de"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "wearable-configmap",
    "namespace": "demo"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"bootstrap\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":9092}],\"selector\":{\"app\":\"kafka\"}}}\n"
    },
    "name": "bootstrap",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 9092,
        "protocol": "TCP",
        "targetPort": 9092
      }
    ],
    "selector": {
      "app": "kafka"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"broker\",\"namespace\":\"kafka\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"port\":9092}],\"selector\":{\"app\":\"kafka\"}}}\n"
    },
    "name": "broker",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 9092,
        "protocol": "TCP",
        "targetPort": 9092
      }
    ],
    "selector": {
      "app": "kafka"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-manager\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":80,\"protocol\":\"TCP\",\"targetPort\":80}],\"selector\":{\"app\":\"kafka-manager\"}}}\n"
    },
    "name": "kafka-manager",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 32669,
        "port": 80,
        "protocol": "TCP",
        "targetPort": 80
      }
    ],
    "selector": {
      "app": "kafka-manager"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-ui\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":8000}],\"selector\":{\"app\":\"kafka-topic-ui\"}}}\n"
    },
    "name": "kafka-ui",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 31915,
        "port": 8000,
        "protocol": "TCP",
        "targetPort": 8000
      }
    ],
    "selector": {
      "app": "kafka-topic-ui"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"outside-0\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"nodePort\":32400,\"port\":32400,\"protocol\":\"TCP\",\"targetPort\":9094}],\"selector\":{\"app\":\"kafka\",\"kafka-broker-id\":\"0\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "outside-0",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 32400,
        "port": 32400,
        "protocol": "TCP",
        "targetPort": 9094
      }
    ],
    "selector": {
      "app": "kafka",
      "kafka-broker-id": "0"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"outside-1\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"nodePort\":32401,\"port\":32401,\"protocol\":\"TCP\",\"targetPort\":9094}],\"selector\":{\"app\":\"kafka\",\"kafka-broker-id\":\"1\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "outside-1",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 32401,
        "port": 32401,
        "protocol": "TCP",
        "targetPort": 9094
      }
    ],
    "selector": {
      "app": "kafka",
      "kafka-broker-id": "1"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"outside-2\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"nodePort\":32402,\"port\":32402,\"protocol\":\"TCP\",\"targetPort\":9094}],\"selector\":{\"app\":\"kafka\",\"kafka-broker-id\":\"2\"},\"type\":\"NodePort\"}}\n"
    },
    "name": "outside-2",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 32402,
        "port": 32402,
        "protocol": "TCP",
        "targetPort": 9094
      }
    ],
    "selector": {
      "app": "kafka",
      "kafka-broker-id": "2"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"pzoo\",\"namespace\":\"kafka\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"peer\",\"port\":2888},{\"name\":\"leader-election\",\"port\":3888}],\"selector\":{\"app\":\"zookeeper\",\"storage\":\"persistent\"}}}\n"
    },
    "name": "pzoo",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "name": "peer",
        "port": 2888,
        "protocol": "TCP",
        "targetPort": 2888
      },
      {
        "name": "leader-election",
        "port": 3888,
        "protocol": "TCP",
        "targetPort": 3888
      }
    ],
    "selector": {
      "app": "zookeeper",
      "storage": "persistent"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"rest\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"port\":8082}],\"selector\":{\"app\":\"kafka-rest\"}}}\n"
    },
    "name": "rest",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 8082,
        "protocol": "TCP",
        "targetPort": 8082
      }
    ],
    "selector": {
      "app": "kafka-rest"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"schema\",\"namespace\":\"kafka\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"port\":8081}],\"selector\":{\"app\":\"schema-registry\"}}}\n"
    },
    "name": "schema",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "port": 8081,
        "protocol": "TCP",
        "targetPort": 8081
      }
    ],
    "selector": {
      "app": "schema-registry"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"zookeeper\",\"namespace\":\"kafka\"},\"spec\":{\"ports\":[{\"name\":\"client\",\"port\":2181}],\"selector\":{\"app\":\"zookeeper\"}}}\n"
    },
    "name": "zookeeper",
    "namespace": "kafka"
  },
  "spec": {
    "ports": [
      {
        "name": "client",
        "port": 2181,
        "protocol": "TCP",
        "targetPort": 2181
      }
    ],
    "selector": {
      "app": "zookeeper"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cDovLzM0LjE5My4xNDguMTU6NTAwMCI6IHsgImF1dGgiOiAiIiwgImVtYWlsIjogImZha2UuZW1haWxAc3Bpbm5ha2VyLmlvIiB9IH0="
  },
  "kind": "Secret",
  "metadata": {
    "name": "ncl-repositry",
    "namespace": "kafka"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-manager\",\"namespace\":\"kafka\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"kafka-manager\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"kafka-manager\"}},\"spec\":{\"containers\":[{\"command\":[\"./bin/kafka-manager\",\"-Dhttp.port=80\"],\"env\":[{\"name\":\"ZK_HOSTS\",\"value\":\"zookeeper:2181\"}],\"image\":\"solsson/kafka-manager@sha256:e07b5c50b02c761b3471ebb62ede88afc0625e325fe428316e32fec7f227ff9b\",\"name\":\"kafka-manager\",\"ports\":[{\"containerPort\":80}]}]}}}}\n"
    },
    "labels": {
      "app": "kafka-manager"
    },
    "name": "kafka-manager",
    "namespace": "kafka"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 1,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "kafka-manager"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-manager"
        }
      },
      "spec": {
        "containers": [
          {
            "command": [
              "./bin/kafka-manager",
              "-Dhttp.port=80"
            ],
            "env": [
              {
                "name": "ZK_HOSTS",
                "value": "zookeeper:2181"
              }
            ],
            "image": "solsson/kafka-manager@sha256:e07b5c50b02c761b3471ebb62ede88afc0625e325fe428316e32fec7f227ff9b",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-manager",
            "ports": [
              {
                "containerPort": 80,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "2",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"kafka-ui\",\"namespace\":\"kafka\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"kafka-topic-ui\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"KAFKA_REST_PROXY_URL\",\"value\":\"rest:8082\"},{\"name\":\"PROXY\",\"value\":\"true\"},{\"name\":\"KAFKA_REST_SCHEMA_REGISTRY_URL\",\"value\":\"registry-0.schema.kafka.svc.cluster.local\"}],\"image\":\"landoop/kafka-topics-ui\",\"name\":\"kafka-topc-ui\",\"ports\":[{\"containerPort\":8000}]}]}}}}\n"
    },
    "labels": {
      "app": "kafka-topic-ui"
    },
    "name": "kafka-ui",
    "namespace": "kafka"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 1,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "kafka-topic-ui"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-topic-ui"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_PROXY_URL",
                "value": "rest:8082"
              },
              {
                "name": "PROXY",
                "value": "true"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              }
            ],
            "image": "landoop/kafka-topics-ui",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-topc-ui",
            "ports": [
              {
                "containerPort": 8000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"rest\",\"namespace\":\"kafka\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"kafka-rest\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"KAFKA_REST_ZOOKEEPER_CONNECT\",\"value\":\"zookeeper:2181\"},{\"name\":\"KAFKA_REST_SCHEMA_REGISTRY_URL\",\"value\":\"registry-0.schema.kafka.svc.cluster.local\"},{\"name\":\"KAFKA_REST_BOOTSTRAP_SERVERS\",\"value\":\"PLAINTEXT://kafka-0.broker.kafka.svc.cluster.local:9092,kafka-1.broker.kafka.svc.cluster.local:9092,kafka-2.broker.kafka.svc.cluster.local:9092\"},{\"name\":\"KAFKA_REST_HOST_NAME\",\"value\":\"localhost\"},{\"name\":\"KAFKA_REST_LISTENERS\",\"value\":\"http://0.0.0.0:8082\"}],\"image\":\"confluentinc/cp-kafka-rest:3.2.0@sha256:82206b1609d84e30279688ed036b034c503feb35543637d930f3d95136296245\",\"name\":\"kafka-rest\",\"ports\":[{\"containerPort\":8082}]}]}}}}\n"
    },
    "labels": {
      "app": "kafka-rest"
    },
    "name": "rest",
    "namespace": "kafka"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 1,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "kafka-rest"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-rest"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_ZOOKEEPER_CONNECT",
                "value": "zookeeper:2181"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              },
              {
                "name": "KAFKA_REST_BOOTSTRAP_SERVERS",
                "value": "PLAINTEXT://kafka-0.broker.kafka.svc.cluster.local:9092,kafka-1.broker.kafka.svc.cluster.local:9092,kafka-2.broker.kafka.svc.cluster.local:9092"
              },
              {
                "name": "KAFKA_REST_HOST_NAME",
                "value": "localhost"
              },
              {
                "name": "KAFKA_REST_LISTENERS",
                "value": "http://0.0.0.0:8082"
              }
            ],
            "image": "confluentinc/cp-kafka-rest:3.2.0@sha256:82206b1609d84e30279688ed036b034c503feb35543637d930f3d95136296245",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-rest",
            "ports": [
              {
                "containerPort": 8082,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kafka-manager",
      "pod-template-hash": "3699462794"
    },
    "name": "kafka-manager-3699462794",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kafka-manager",
        "uid": "197be187-dfed-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "kafka-manager",
        "pod-template-hash": "3699462794"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-manager",
          "pod-template-hash": "3699462794"
        }
      },
      "spec": {
        "containers": [
          {
            "command": [
              "./bin/kafka-manager",
              "-Dhttp.port=80"
            ],
            "env": [
              {
                "name": "ZK_HOSTS",
                "value": "zookeeper:2181"
              }
            ],
            "image": "solsson/kafka-manager@sha256:e07b5c50b02c761b3471ebb62ede88afc0625e325fe428316e32fec7f227ff9b",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-manager",
            "ports": [
              {
                "containerPort": 80,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "kafka-topic-ui",
      "pod-template-hash": "2629599241"
    },
    "name": "kafka-ui-2629599241",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kafka-ui",
        "uid": "7903d781-dff0-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "kafka-topic-ui",
        "pod-template-hash": "2629599241"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-topic-ui",
          "pod-template-hash": "2629599241"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_PROXY_URL",
                "value": "rest:8082"
              },
              {
                "name": "PROXY",
                "value": "true"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              }
            ],
            "image": "landoop/kafka-topics-ui",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-topc-ui",
            "ports": [
              {
                "containerPort": 8000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kafka-topic-ui",
      "pod-template-hash": "4068639034"
    },
    "name": "kafka-ui-4068639034",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kafka-ui",
        "uid": "7903d781-dff0-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "kafka-topic-ui",
        "pod-template-hash": "4068639034"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-topic-ui",
          "pod-template-hash": "4068639034"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_PROXY_URL",
                "value": "rest:8082"
              },
              {
                "name": "PROXY",
                "value": "true"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              }
            ],
            "image": "landoop/kafka-topics-ui:0.8.3",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-topc-ui",
            "ports": [
              {
                "containerPort": 8000,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kafka-rest",
      "pod-template-hash": "4196667034"
    },
    "name": "rest-4196667034",
    "namespace": "kafka",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "rest",
        "uid": "7359b1e7-dff0-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "kafka-rest",
        "pod-template-hash": "4196667034"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kafka-rest",
          "pod-template-hash": "4196667034"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "KAFKA_REST_ZOOKEEPER_CONNECT",
                "value": "zookeeper:2181"
              },
              {
                "name": "KAFKA_REST_SCHEMA_REGISTRY_URL",
                "value": "registry-0.schema.kafka.svc.cluster.local"
              },
              {
                "name": "KAFKA_REST_BOOTSTRAP_SERVERS",
                "value": "PLAINTEXT://kafka-0.broker.kafka.svc.cluster.local:9092,kafka-1.broker.kafka.svc.cluster.local:9092,kafka-2.broker.kafka.svc.cluster.local:9092"
              },
              {
                "name": "KAFKA_REST_HOST_NAME",
                "value": "localhost"
              },
              {
                "name": "KAFKA_REST_LISTENERS",
                "value": "http://0.0.0.0:8082"
              }
            ],
            "image": "confluentinc/cp-kafka-rest:3.2.0@sha256:82206b1609d84e30279688ed036b034c503feb35543637d930f3d95136296245",
            "imagePullPolicy": "IfNotPresent",
            "name": "kafka-rest",
            "ports": [
              {
                "containerPort": 8082,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "init.sh": "#!/bin/bash\nset -x\n\nKAFKA_BROKER_ID=${HOSTNAME##*-}\nsed -i \"s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/\" /etc/kafka/server.properties\n\nhash kubectl 2>/dev/null || {\n  sed -i \"s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/\" /etc/kafka/server.properties\n} && {\n  ZONE=$(kubectl get node \"$NODE_NAME\" -o=go-template='{{index .metadata.labels \"failure-domain.beta.kubernetes.io/zone\"}}')\n  if [ $? -ne 0 ]; then\n    sed -i \"s/#init#broker.rack=#init#/#init#broker.rack=# zone lookup failed, see -c init-config logs/\" /etc/kafka/server.properties\n  elif [ \"x$ZONE\" == \"x<no value>\" ]; then\n    sed -i \"s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/\" /etc/kafka/server.properties\n  else\n    sed -i \"s/#init#broker.rack=#init#/broker.rack=$ZONE/\" /etc/kafka/server.properties\n  fi\n\n  kubectl -n $POD_NAMESPACE label pod $POD_NAME kafka-broker-id=$KAFKA_BROKER_ID\n\n  OUTSIDE_HOST=$(kubectl get node \"$NODE_NAME\" -o jsonpath='{.status.addresses[?(@.type==\"InternalIP\")].address}')\n  if [ $? -ne 0 ]; then\n    echo \"Outside (i.e. cluster-external access) host lookup command failed\"\n  else\n    OUTSIDE_HOST=${OUTSIDE_HOST}:3240${KAFKA_BROKER_ID}\n    sed -i \"s|#init#advertised.listeners=OUTSIDE://#init#|advertised.listeners=OUTSIDE://${OUTSIDE_HOST}|\" /etc/kafka/server.properties\n  fi\n}",
    "log4j.properties": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Unspecified loggers and loggers with additivity=true output to server.log and stdout\n# Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise\nlog4j.rootLogger=INFO, stdout\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log\nlog4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log\nlog4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log\nlog4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log\nlog4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log\nlog4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log\nlog4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\n# Change the two lines below to adjust ZK client logging\nlog4j.logger.org.I0Itec.zkclient.ZkClient=INFO\nlog4j.logger.org.apache.zookeeper=INFO\n\n# Change the two lines below to adjust the general broker logging level (output to server.log and stdout)\nlog4j.logger.kafka=INFO\nlog4j.logger.org.apache.kafka=INFO\n\n# Change to DEBUG or TRACE to enable request logging\nlog4j.logger.kafka.request.logger=WARN, requestAppender\nlog4j.additivity.kafka.request.logger=false\n\n# Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output\n# related to the handling of requests\n#log4j.logger.kafka.network.Processor=TRACE, requestAppender\n#log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender\n#log4j.additivity.kafka.server.KafkaApis=false\nlog4j.logger.kafka.network.RequestChannel$=WARN, requestAppender\nlog4j.additivity.kafka.network.RequestChannel$=false\n\nlog4j.logger.kafka.controller=TRACE, controllerAppender\nlog4j.additivity.kafka.controller=false\n\nlog4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender\nlog4j.additivity.kafka.log.LogCleaner=false\n\nlog4j.logger.state.change.logger=TRACE, stateChangeAppender\nlog4j.additivity.state.change.logger=false\n\n# Change to DEBUG to enable audit log for the authorizer\nlog4j.logger.kafka.authorizer.logger=WARN, authorizerAppender\nlog4j.additivity.kafka.authorizer.logger=false",
    "server.properties": "# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# see kafka.server.KafkaConfig for additional details and defaults\n\n############################# Server Basics #############################\n\n# The id of the broker. This must be set to a unique integer for each broker.\n#init#broker.id=#init#\n\n#init#broker.rack=#init#\n\n############################# Socket Server Settings #############################\n\n# The address the socket server listens on. It will get the value returned from\n# java.net.InetAddress.getCanonicalHostName() if not configured.\n#   FORMAT:\n#     listeners = listener_name://host_name:port\n#   EXAMPLE:\n#     listeners = PLAINTEXT://your.host.name:9092\n#listeners=PLAINTEXT://:9092\nlisteners=OUTSIDE://:9094,PLAINTEXT://:9092\n\n# Hostname and port the broker will advertise to producers and consumers. If not set,\n# it uses the value for \"listeners\" if configured.  Otherwise, it will use the value\n# returned from java.net.InetAddress.getCanonicalHostName().\n#advertised.listeners=PLAINTEXT://your.host.name:9092\n#init#advertised.listeners=OUTSIDE://#init#,PLAINTEXT://:9092\n\n# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details\n#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL\nlistener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT\ninter.broker.listener.name=PLAINTEXT\n\n# The number of threads that the server uses for receiving requests from the network and sending responses to the network\nnum.network.threads=3\n\n# The number of threads that the server uses for processing requests, which may include disk I/O\nnum.io.threads=8\n\n# The send buffer (SO_SNDBUF) used by the socket server\nsocket.send.buffer.bytes=102400\n\n# The receive buffer (SO_RCVBUF) used by the socket server\nsocket.receive.buffer.bytes=102400\n\n# The maximum size of a request that the socket server will accept (protection against OOM)\nsocket.request.max.bytes=104857600\n\n\n############################# Log Basics #############################\n\n# A comma seperated list of directories under which to store log files\nlog.dirs=/tmp/kafka-logs\n\n# The default number of log partitions per topic. More partitions allow greater\n# parallelism for consumption, but this will also result in more files across\n# the brokers.\nnum.partitions=1\n\n# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.\n# This value is recommended to be increased for installations with data dirs located in RAID array.\nnum.recovery.threads.per.data.dir=1\n\n############################# Internal Topic Settings  #############################\n# The replication factor for the group metadata internal topics \"__consumer_offsets\" and \"__transaction_state\"\n# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\n\n############################# Log Flush Policy #############################\n\n# Messages are immediately written to the filesystem but by default we only fsync() to sync\n# the OS cache lazily. The following configurations control the flush of data to disk.\n# There are a few important trade-offs here:\n#    1. Durability: Unflushed data may be lost if you are not using replication.\n#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.\n#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.\n# The settings below allow one to configure the flush policy to flush data after a period of time or\n# every N messages (or both). This can be done globally and overridden on a per-topic basis.\n\n# The number of messages to accept before forcing a flush of data to disk\n#log.flush.interval.messages=10000\n\n# The maximum amount of time a message can sit in a log before we force a flush\n#log.flush.interval.ms=1000\n\n############################# Log Retention Policy #############################\n\n# The following configurations control the disposal of log segments. The policy can\n# be set to delete segments after a period of time, or after a given size has accumulated.\n# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens\n# from the end of the log.\n\n# The minimum age of a log file to be eligible for deletion due to age\nlog.retention.hours=168\n\n# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining\n# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.\n#log.retention.bytes=1073741824\n\n# The maximum size of a log segment file. When this size is reached a new log segment will be created.\nlog.segment.bytes=1073741824\n\n# The interval at which log segments are checked to see if they can be deleted according\n# to the retention policies\nlog.retention.check.interval.ms=300000\n\n############################# Zookeeper #############################\n\n# Zookeeper connection string (see zookeeper docs for details).\n# This is a comma separated host:port pairs, each corresponding to a zk\n# server. e.g. \"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\".\n# You can also append an optional chroot string to the urls to specify the\n# root directory for all kafka znodes.\nzookeeper.connect=localhost:2181\n\n# Timeout in ms for connecting to zookeeper\nzookeeper.connection.timeout.ms=6000\n\n\n############################# Group Coordinator Settings #############################\n\n# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.\n# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.\n# The default value for this is 3 seconds.\n# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.\n# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.\ngroup.initial.rebalance.delay.ms=0"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"init.sh\":\"#!/bin/bash\\nset -x\\n\\nKAFKA_BROKER_ID=${HOSTNAME##*-}\\nsed -i \\\"s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/\\\" /etc/kafka/server.properties\\n\\nhash kubectl 2\\u003e/dev/null || {\\n  sed -i \\\"s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/\\\" /etc/kafka/server.properties\\n} \\u0026\\u0026 {\\n  ZONE=$(kubectl get node \\\"$NODE_NAME\\\" -o=go-template='{{index .metadata.labels \\\"failure-domain.beta.kubernetes.io/zone\\\"}}')\\n  if [ $? -ne 0 ]; then\\n    sed -i \\\"s/#init#broker.rack=#init#/#init#broker.rack=# zone lookup failed, see -c init-config logs/\\\" /etc/kafka/server.properties\\n  elif [ \\\"x$ZONE\\\" == \\\"x\\u003cno value\\u003e\\\" ]; then\\n    sed -i \\\"s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/\\\" /etc/kafka/server.properties\\n  else\\n    sed -i \\\"s/#init#broker.rack=#init#/broker.rack=$ZONE/\\\" /etc/kafka/server.properties\\n  fi\\n\\n  kubectl -n $POD_NAMESPACE label pod $POD_NAME kafka-broker-id=$KAFKA_BROKER_ID\\n\\n  OUTSIDE_HOST=$(kubectl get node \\\"$NODE_NAME\\\" -o jsonpath='{.status.addresses[?(@.type==\\\"InternalIP\\\")].address}')\\n  if [ $? -ne 0 ]; then\\n    echo \\\"Outside (i.e. cluster-external access) host lookup command failed\\\"\\n  else\\n    OUTSIDE_HOST=${OUTSIDE_HOST}:3240${KAFKA_BROKER_ID}\\n    sed -i \\\"s|#init#advertised.listeners=OUTSIDE://#init#|advertised.listeners=OUTSIDE://${OUTSIDE_HOST}|\\\" /etc/kafka/server.properties\\n  fi\\n}\",\"log4j.properties\":\"# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\\"License\\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#    http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n\\n# Unspecified loggers and loggers with additivity=true output to server.log and stdout\\n# Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise\\nlog4j.rootLogger=INFO, stdout\\n\\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log\\nlog4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log\\nlog4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log\\nlog4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log\\nlog4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log\\nlog4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\nlog4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender\\nlog4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH\\nlog4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log\\nlog4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\n# Change the two lines below to adjust ZK client logging\\nlog4j.logger.org.I0Itec.zkclient.ZkClient=INFO\\nlog4j.logger.org.apache.zookeeper=INFO\\n\\n# Change the two lines below to adjust the general broker logging level (output to server.log and stdout)\\nlog4j.logger.kafka=INFO\\nlog4j.logger.org.apache.kafka=INFO\\n\\n# Change to DEBUG or TRACE to enable request logging\\nlog4j.logger.kafka.request.logger=WARN, requestAppender\\nlog4j.additivity.kafka.request.logger=false\\n\\n# Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output\\n# related to the handling of requests\\n#log4j.logger.kafka.network.Processor=TRACE, requestAppender\\n#log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender\\n#log4j.additivity.kafka.server.KafkaApis=false\\nlog4j.logger.kafka.network.RequestChannel$=WARN, requestAppender\\nlog4j.additivity.kafka.network.RequestChannel$=false\\n\\nlog4j.logger.kafka.controller=TRACE, controllerAppender\\nlog4j.additivity.kafka.controller=false\\n\\nlog4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender\\nlog4j.additivity.kafka.log.LogCleaner=false\\n\\nlog4j.logger.state.change.logger=TRACE, stateChangeAppender\\nlog4j.additivity.state.change.logger=false\\n\\n# Change to DEBUG to enable audit log for the authorizer\\nlog4j.logger.kafka.authorizer.logger=WARN, authorizerAppender\\nlog4j.additivity.kafka.authorizer.logger=false\",\"server.properties\":\"# Licensed to the Apache Software Foundation (ASF) under one or more\\n# contributor license agreements.  See the NOTICE file distributed with\\n# this work for additional information regarding copyright ownership.\\n# The ASF licenses this file to You under the Apache License, Version 2.0\\n# (the \\\"License\\\"); you may not use this file except in compliance with\\n# the License.  You may obtain a copy of the License at\\n#\\n#    http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n\\n# see kafka.server.KafkaConfig for additional details and defaults\\n\\n############################# Server Basics #############################\\n\\n# The id of the broker. This must be set to a unique integer for each broker.\\n#init#broker.id=#init#\\n\\n#init#broker.rack=#init#\\n\\n############################# Socket Server Settings #############################\\n\\n# The address the socket server listens on. It will get the value returned from\\n# java.net.InetAddress.getCanonicalHostName() if not configured.\\n#   FORMAT:\\n#     listeners = listener_name://host_name:port\\n#   EXAMPLE:\\n#     listeners = PLAINTEXT://your.host.name:9092\\n#listeners=PLAINTEXT://:9092\\nlisteners=OUTSIDE://:9094,PLAINTEXT://:9092\\n\\n# Hostname and port the broker will advertise to producers and consumers. If not set,\\n# it uses the value for \\\"listeners\\\" if configured.  Otherwise, it will use the value\\n# returned from java.net.InetAddress.getCanonicalHostName().\\n#advertised.listeners=PLAINTEXT://your.host.name:9092\\n#init#advertised.listeners=OUTSIDE://#init#,PLAINTEXT://:9092\\n\\n# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details\\n#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL\\nlistener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT\\ninter.broker.listener.name=PLAINTEXT\\n\\n# The number of threads that the server uses for receiving requests from the network and sending responses to the network\\nnum.network.threads=3\\n\\n# The number of threads that the server uses for processing requests, which may include disk I/O\\nnum.io.threads=8\\n\\n# The send buffer (SO_SNDBUF) used by the socket server\\nsocket.send.buffer.bytes=102400\\n\\n# The receive buffer (SO_RCVBUF) used by the socket server\\nsocket.receive.buffer.bytes=102400\\n\\n# The maximum size of a request that the socket server will accept (protection against OOM)\\nsocket.request.max.bytes=104857600\\n\\n\\n############################# Log Basics #############################\\n\\n# A comma seperated list of directories under which to store log files\\nlog.dirs=/tmp/kafka-logs\\n\\n# The default number of log partitions per topic. More partitions allow greater\\n# parallelism for consumption, but this will also result in more files across\\n# the brokers.\\nnum.partitions=1\\n\\n# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.\\n# This value is recommended to be increased for installations with data dirs located in RAID array.\\nnum.recovery.threads.per.data.dir=1\\n\\n############################# Internal Topic Settings  #############################\\n# The replication factor for the group metadata internal topics \\\"__consumer_offsets\\\" and \\\"__transaction_state\\\"\\n# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.\\noffsets.topic.replication.factor=1\\ntransaction.state.log.replication.factor=1\\ntransaction.state.log.min.isr=1\\n\\n############################# Log Flush Policy #############################\\n\\n# Messages are immediately written to the filesystem but by default we only fsync() to sync\\n# the OS cache lazily. The following configurations control the flush of data to disk.\\n# There are a few important trade-offs here:\\n#    1. Durability: Unflushed data may be lost if you are not using replication.\\n#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.\\n#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.\\n# The settings below allow one to configure the flush policy to flush data after a period of time or\\n# every N messages (or both). This can be done globally and overridden on a per-topic basis.\\n\\n# The number of messages to accept before forcing a flush of data to disk\\n#log.flush.interval.messages=10000\\n\\n# The maximum amount of time a message can sit in a log before we force a flush\\n#log.flush.interval.ms=1000\\n\\n############################# Log Retention Policy #############################\\n\\n# The following configurations control the disposal of log segments. The policy can\\n# be set to delete segments after a period of time, or after a given size has accumulated.\\n# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens\\n# from the end of the log.\\n\\n# The minimum age of a log file to be eligible for deletion due to age\\nlog.retention.hours=168\\n\\n# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining\\n# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.\\n#log.retention.bytes=1073741824\\n\\n# The maximum size of a log segment file. When this size is reached a new log segment will be created.\\nlog.segment.bytes=1073741824\\n\\n# The interval at which log segments are checked to see if they can be deleted according\\n# to the retention policies\\nlog.retention.check.interval.ms=300000\\n\\n############################# Zookeeper #############################\\n\\n# Zookeeper connection string (see zookeeper docs for details).\\n# This is a comma separated host:port pairs, each corresponding to a zk\\n# server. e.g. \\\"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\\\".\\n# You can also append an optional chroot string to the urls to specify the\\n# root directory for all kafka znodes.\\nzookeeper.connect=localhost:2181\\n\\n# Timeout in ms for connecting to zookeeper\\nzookeeper.connection.timeout.ms=6000\\n\\n\\n############################# Group Coordinator Settings #############################\\n\\n# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.\\n# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.\\n# The default value for this is 3 seconds.\\n# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.\\n# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.\\ngroup.initial.rebalance.delay.ms=0\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"broker-config\",\"namespace\":\"kafka\"}}\n"
    },
    "name": "broker-config",
    "namespace": "kafka"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "init.sh": "#!/bin/bash\nset -x\n\n[ -z \"$ID_OFFSET\" ] && ID_OFFSET=1\nexport ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-} + $ID_OFFSET))\necho \"${ZOOKEEPER_SERVER_ID:-1}\" | tee /var/lib/zookeeper/data/myid\nsed -i \"s/server\\.$ZOOKEEPER_SERVER_ID\\=[a-z0-9.-]*/server.$ZOOKEEPER_SERVER_ID=0.0.0.0/\" /etc/kafka/zookeeper.properties",
    "log4j.properties": "log4j.rootLogger=INFO, stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\n# Suppress connection log messages, three lines per livenessProbe execution\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxnFactory=WARN\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN",
    "zookeeper.properties": "tickTime=2000\ndataDir=/var/lib/zookeeper/data\ndataLogDir=/var/lib/zookeeper/log\nclientPort=2181\ninitLimit=5\nsyncLimit=2\nserver.1=pzoo-0.pzoo:2888:3888:participant\nserver.2=pzoo-1.pzoo:2888:3888:participant\nserver.3=pzoo-2.pzoo:2888:3888:participant\nserver.4=zoo-0.zoo:2888:3888:participant\nserver.5=zoo-1.zoo:2888:3888:participant"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"init.sh\":\"#!/bin/bash\\nset -x\\n\\n[ -z \\\"$ID_OFFSET\\\" ] \\u0026\\u0026 ID_OFFSET=1\\nexport ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-} + $ID_OFFSET))\\necho \\\"${ZOOKEEPER_SERVER_ID:-1}\\\" | tee /var/lib/zookeeper/data/myid\\nsed -i \\\"s/server\\\\.$ZOOKEEPER_SERVER_ID\\\\=[a-z0-9.-]*/server.$ZOOKEEPER_SERVER_ID=0.0.0.0/\\\" /etc/kafka/zookeeper.properties\",\"log4j.properties\":\"log4j.rootLogger=INFO, stdout\\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\\n\\n# Suppress connection log messages, three lines per livenessProbe execution\\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxnFactory=WARN\\nlog4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN\",\"zookeeper.properties\":\"tickTime=2000\\ndataDir=/var/lib/zookeeper/data\\ndataLogDir=/var/lib/zookeeper/log\\nclientPort=2181\\ninitLimit=5\\nsyncLimit=2\\nserver.1=pzoo-0.pzoo:2888:3888:participant\\nserver.2=pzoo-1.pzoo:2888:3888:participant\\nserver.3=pzoo-2.pzoo:2888:3888:participant\\nserver.4=zoo-0.zoo:2888:3888:participant\\nserver.5=zoo-1.zoo:2888:3888:participant\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"zookeeper-config\",\"namespace\":\"kafka\"}}\n"
    },
    "name": "zookeeper-config",
    "namespace": "kafka"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/path\":\"/metrics\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"name\":\"alertmanager\"},\"name\":\"alertmanager\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"name\":\"alertmanager\",\"port\":9093,\"protocol\":\"TCP\",\"targetPort\":9093}],\"selector\":{\"app\":\"alertmanager\"},\"type\":\"NodePort\"}}\n",
      "prometheus.io/path": "/metrics",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "name": "alertmanager"
    },
    "name": "alertmanager",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "name": "alertmanager",
        "nodePort": 30317,
        "port": 9093,
        "protocol": "TCP",
        "targetPort": 9093
      }
    ],
    "selector": {
      "app": "alertmanager"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"grafana\",\"component\":\"core\"},\"name\":\"grafana\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"port\":3000}],\"selector\":{\"app\":\"grafana\",\"component\":\"core\"},\"type\":\"NodePort\"}}\n"
    },
    "labels": {
      "app": "grafana",
      "component": "core"
    },
    "name": "grafana",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 30714,
        "port": 3000,
        "protocol": "TCP",
        "targetPort": 3000
      }
    ],
    "selector": {
      "app": "grafana",
      "component": "core"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"kube-state-metrics\"},\"name\":\"kube-state-metrics\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"name\":\"kube-state-metrics\",\"port\":8080,\"protocol\":\"TCP\"}],\"selector\":{\"app\":\"kube-state-metrics\"}}}\n",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "app": "kube-state-metrics"
    },
    "name": "kube-state-metrics",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "name": "kube-state-metrics",
        "port": 8080,
        "protocol": "TCP",
        "targetPort": 8080
      }
    ],
    "selector": {
      "app": "kube-state-metrics"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"prometheus\",\"component\":\"core\"},\"name\":\"prometheus\",\"namespace\":\"monitoring\"},\"spec\":{\"ports\":[{\"name\":\"webui\",\"port\":9090,\"protocol\":\"TCP\"}],\"selector\":{\"app\":\"prometheus\",\"component\":\"core\"},\"type\":\"NodePort\"}}\n",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "app": "prometheus",
      "component": "core"
    },
    "name": "prometheus",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "name": "webui",
        "nodePort": 31218,
        "port": 9090,
        "protocol": "TCP",
        "targetPort": 9090
      }
    ],
    "selector": {
      "app": "prometheus",
      "component": "core"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"name\":\"prometheus-node-exporter\",\"namespace\":\"monitoring\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"prometheus-node-exporter\",\"port\":9100,\"protocol\":\"TCP\"}],\"selector\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"type\":\"ClusterIP\"}}\n",
      "prometheus.io/scrape": "true"
    },
    "labels": {
      "app": "prometheus",
      "component": "node-exporter"
    },
    "name": "prometheus-node-exporter",
    "namespace": "monitoring"
  },
  "spec": {
    "ports": [
      {
        "name": "prometheus-node-exporter",
        "port": 9100,
        "protocol": "TCP",
        "targetPort": 9100
      }
    ],
    "selector": {
      "app": "prometheus",
      "component": "node-exporter"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cDovLzM0LjE5My4xNDguMTU6NTAwMCI6IHsgImF1dGgiOiAiIiwgImVtYWlsIjogImZha2UuZW1haWxAc3Bpbm5ha2VyLmlvIiB9IH0="
  },
  "kind": "Secret",
  "metadata": {
    "name": "ncl-repositry",
    "namespace": "monitoring"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cHM6Ly92aXJnaW52b3lhZ2VzLXZ4cC1pbWFnZXMuamZyb2cuaW8iOiB7ICJhdXRoIjogIllXUnRhVzQ2TUdzMGJXZDBPVFpLWmc9PSIsICJlbWFpbCI6ICJmYWtlLmVtYWlsQHNwaW5uYWtlci5pbyIgfSB9"
  },
  "kind": "Secret",
  "metadata": {
    "name": "vxp-artifactory",
    "namespace": "monitoring"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "labels": {
      "app": "filebeat"
    },
    "name": "filebeat",
    "namespace": "monitoring"
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "app": "filebeat"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "filebeat"
        },
        "name": "filebeat"
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "LOGSTASH_HOSTS",
                "valueFrom": {
                  "configMapKeyRef": {
                    "key": "LOGSTASH_HOSTS",
                    "name": "environment-variables"
                  }
                }
              },
              {
                "name": "LOG_LEVEL",
                "value": "info"
              }
            ],
            "image": "34.193.148.15:5000/filebeat:6.0.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "filebeat",
            "resources": {
              "limits": {
                "memory": "1Gi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/log/applogs",
                "name": "varlogpods",
                "readOnly": true
              },
              {
                "mountPath": "/var/log/filebeat",
                "name": "filebeatlogs"
              },
              {
                "mountPath": "/var/log/tomcatlogs",
                "name": "tomcatlogs"
              }
            ]
          }
        ],
        "imagePullSecrets": [
          {
            "name": "ncl-repositry"
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var/log/applogs"
            },
            "name": "varlogpods"
          },
          {
            "hostPath": {
              "path": "/var/log/filebeat"
            },
            "name": "filebeatlogs"
          },
          {
            "hostPath": {
              "path": "/var/log/tomcatlogs"
            },
            "name": "tomcatlogs"
          }
        ]
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "annotations": {
      "description": "This `DaemonSet` provides metrics in Prometheus format about disk usage on the nodes.\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\nThe other container `caddy` just hands out the contents of that file on request via `http` on `/metrics` at port `9102` which are the defaults for Prometheus.\nThese are scheduled on every node in the Kubernetes cluster.\nTo choose directories from the node to check, just mount them on the `read-du` container below `/mnt`.\n",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{\"description\":\"This `DaemonSet` provides metrics in Prometheus format about disk usage on the nodes.\\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\\nThe other container `caddy` just hands out the contents of that file on request via `http` on `/metrics` at port `9102` which are the defaults for Prometheus.\\nThese are scheduled on every node in the Kubernetes cluster.\\nTo choose directories from the node to check, just mount them on the `read-du` container below `/mnt`.\\n\"},\"name\":\"node-directory-size-metrics\",\"namespace\":\"monitoring\"},\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"description\":\"This `Pod` provides metrics in Prometheus format about disk usage on the node.\\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\\nThe other container `caddy` just hands out the contents of that file on request on `/metrics` at port `9102` which are the defaults for Prometheus.\\nThis `Pod` is scheduled on every node in the Kubernetes cluster.\\nTo choose directories from the node to check just mount them on `read-du` below `/mnt`.\\n\",\"prometheus.io/port\":\"9102\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"node-directory-size-metrics\"}},\"spec\":{\"containers\":[{\"command\":[\"fish\",\"--command\",\"touch /tmp/metrics-temp\\nwhile true\\n  for directory in (du --bytes --separate-dirs --threshold=100M /mnt)\\n    echo $directory | read size path\\n    echo \\\"node_directory_size_bytes{path=\\\\\\\"$path\\\\\\\"} $size\\\" \\\\\\n      \\u003e\\u003e /tmp/metrics-temp\\n  end\\n  mv /tmp/metrics-temp /tmp/metrics\\n  sleep 300\\nend\\n\"],\"image\":\"giantswarm/tiny-tools\",\"imagePullPolicy\":\"Always\",\"name\":\"read-du\",\"volumeMounts\":[{\"mountPath\":\"/mnt/var\",\"name\":\"host-fs-var\",\"readOnly\":true},{\"mountPath\":\"/tmp\",\"name\":\"metrics\"}]},{\"command\":[\"caddy\",\"-port=9102\",\"-root=/var/www\"],\"image\":\"dockermuenster/caddy:0.9.3\",\"name\":\"caddy\",\"ports\":[{\"containerPort\":9102}],\"volumeMounts\":[{\"mountPath\":\"/var/www\",\"name\":\"metrics\"}]}],\"volumes\":[{\"hostPath\":{\"path\":\"/var\"},\"name\":\"host-fs-var\"},{\"emptyDir\":{\"medium\":\"Memory\"},\"name\":\"metrics\"}]}}}}\n"
    },
    "labels": {
      "app": "node-directory-size-metrics"
    },
    "name": "node-directory-size-metrics",
    "namespace": "monitoring"
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "app": "node-directory-size-metrics"
      }
    },
    "template": {
      "metadata": {
        "annotations": {
          "description": "This `Pod` provides metrics in Prometheus format about disk usage on the node.\nThe container `read-du` reads in sizes of all directories below /mnt and writes that to `/tmp/metrics`. It only reports directories larger then `100M` for now.\nThe other container `caddy` just hands out the contents of that file on request on `/metrics` at port `9102` which are the defaults for Prometheus.\nThis `Pod` is scheduled on every node in the Kubernetes cluster.\nTo choose directories from the node to check just mount them on `read-du` below `/mnt`.\n",
          "prometheus.io/port": "9102",
          "prometheus.io/scrape": "true"
        },
        "creationTimestamp": null,
        "labels": {
          "app": "node-directory-size-metrics"
        }
      },
      "spec": {
        "containers": [
          {
            "command": [
              "fish",
              "--command",
              "touch /tmp/metrics-temp\nwhile true\n  for directory in (du --bytes --separate-dirs --threshold=100M /mnt)\n    echo $directory | read size path\n    echo \"node_directory_size_bytes{path=\\\"$path\\\"} $size\" \\\n      >> /tmp/metrics-temp\n  end\n  mv /tmp/metrics-temp /tmp/metrics\n  sleep 300\nend\n"
            ],
            "image": "giantswarm/tiny-tools",
            "imagePullPolicy": "Always",
            "name": "read-du",
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/mnt/var",
                "name": "host-fs-var",
                "readOnly": true
              },
              {
                "mountPath": "/tmp",
                "name": "metrics"
              }
            ]
          },
          {
            "command": [
              "caddy",
              "-port=9102",
              "-root=/var/www"
            ],
            "image": "dockermuenster/caddy:0.9.3",
            "imagePullPolicy": "IfNotPresent",
            "name": "caddy",
            "ports": [
              {
                "containerPort": 9102,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var/www",
                "name": "metrics"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "hostPath": {
              "path": "/var"
            },
            "name": "host-fs-var"
          },
          {
            "emptyDir": {
              "medium": "Memory"
            },
            "name": "metrics"
          }
        ]
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "DaemonSet",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"name\":\"prometheus-node-exporter\",\"namespace\":\"monitoring\"},\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"app\":\"prometheus\",\"component\":\"node-exporter\"},\"name\":\"prometheus-node-exporter\"},\"spec\":{\"containers\":[{\"image\":\"prom/node-exporter:v0.14.0\",\"name\":\"prometheus-node-exporter\",\"ports\":[{\"containerPort\":9100,\"hostPort\":9100,\"name\":\"prom-node-exp\"}]}],\"hostNetwork\":true,\"hostPID\":true}}}}\n"
    },
    "labels": {
      "app": "prometheus",
      "component": "node-exporter"
    },
    "name": "prometheus-node-exporter",
    "namespace": "monitoring"
  },
  "spec": {
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "node-exporter"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "node-exporter"
        },
        "name": "prometheus-node-exporter"
      },
      "spec": {
        "containers": [
          {
            "image": "prom/node-exporter:v0.14.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus-node-exporter",
            "ports": [
              {
                "containerPort": 9100,
                "hostPort": 9100,
                "name": "prom-node-exp",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "hostNetwork": true,
        "hostPID": true,
        "schedulerName": "default-scheduler"
      }
    },
    "templateGeneration": 1,
    "updateStrategy": {
      "type": "OnDelete"
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"alertmanager\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"alertmanager\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"alertmanager\"},\"name\":\"alertmanager\"},\"spec\":{\"containers\":[{\"args\":[\"-config.file=/etc/alertmanager/config.yml\",\"-storage.path=/alertmanager\"],\"image\":\"quay.io/prometheus/alertmanager:v0.7.1\",\"name\":\"alertmanager\",\"ports\":[{\"containerPort\":9093,\"name\":\"alertmanager\"}],\"volumeMounts\":[{\"mountPath\":\"/etc/alertmanager\",\"name\":\"config-volume\"},{\"mountPath\":\"/etc/alertmanager-templates\",\"name\":\"templates-volume\"},{\"mountPath\":\"/alertmanager\",\"name\":\"alertmanager\"}]}],\"volumes\":[{\"configMap\":{\"name\":\"alertmanager\"},\"name\":\"config-volume\"},{\"configMap\":{\"name\":\"alertmanager-templates\"},\"name\":\"templates-volume\"},{\"emptyDir\":{},\"name\":\"alertmanager\"}]}}}}\n"
    },
    "labels": {
      "app": "alertmanager"
    },
    "name": "alertmanager",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "alertmanager"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "alertmanager"
        },
        "name": "alertmanager"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-config.file=/etc/alertmanager/config.yml",
              "-storage.path=/alertmanager"
            ],
            "image": "quay.io/prometheus/alertmanager:v0.7.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "alertmanager",
            "ports": [
              {
                "containerPort": 9093,
                "name": "alertmanager",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/alertmanager",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/alertmanager-templates",
                "name": "templates-volume"
              },
              {
                "mountPath": "/alertmanager",
                "name": "alertmanager"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager-templates"
            },
            "name": "templates-volume"
          },
          {
            "emptyDir": {},
            "name": "alertmanager"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"grafana\",\"component\":\"core\"},\"name\":\"grafana-core\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"grafana\",\"component\":\"core\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"GF_AUTH_BASIC_ENABLED\",\"value\":\"true\"},{\"name\":\"GF_AUTH_ANONYMOUS_ENABLED\",\"value\":\"false\"}],\"image\":\"grafana/grafana:4.2.0\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"grafana-core\",\"readinessProbe\":{\"httpGet\":{\"path\":\"/login\",\"port\":3000}},\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/var\",\"name\":\"grafana-persistent-storage\"}]}],\"volumes\":[{\"emptyDir\":{},\"name\":\"grafana-persistent-storage\"}]}}}}\n"
    },
    "labels": {
      "app": "grafana",
      "component": "core"
    },
    "name": "grafana-core",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "grafana",
        "component": "core"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "grafana",
          "component": "core"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "GF_AUTH_BASIC_ENABLED",
                "value": "true"
              },
              {
                "name": "GF_AUTH_ANONYMOUS_ENABLED",
                "value": "false"
              }
            ],
            "image": "grafana/grafana:4.2.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "grafana-core",
            "readinessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/login",
                "port": 3000,
                "scheme": "HTTP"
              },
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var",
                "name": "grafana-persistent-storage"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {},
            "name": "grafana-persistent-storage"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"kube-state-metrics\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":2,\"template\":{\"metadata\":{\"labels\":{\"app\":\"kube-state-metrics\"}},\"spec\":{\"containers\":[{\"image\":\"gcr.io/google_containers/kube-state-metrics:v0.5.0\",\"name\":\"kube-state-metrics\",\"ports\":[{\"containerPort\":8080}]}],\"serviceAccountName\":\"kube-state-metrics\"}}}}\n"
    },
    "labels": {
      "app": "kube-state-metrics"
    },
    "name": "kube-state-metrics",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "kube-state-metrics"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kube-state-metrics"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "gcr.io/google_containers/kube-state-metrics:v0.5.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "kube-state-metrics",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "kube-state-metrics",
        "serviceAccountName": "kube-state-metrics"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "2",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"prometheus\",\"component\":\"core\"},\"name\":\"prometheus-core\",\"namespace\":\"monitoring\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"labels\":{\"app\":\"prometheus\",\"component\":\"core\"},\"name\":\"prometheus-main\"},\"spec\":{\"containers\":[{\"args\":[\"-storage.local.retention=12h\",\"-storage.local.memory-chunks=500000\",\"-config.file=/etc/prometheus/prometheus.yaml\",\"-alertmanager.url=http://alertmanager:9093/\"],\"image\":\"prom/prometheus:v1.7.0\",\"name\":\"prometheus\",\"ports\":[{\"containerPort\":9090,\"name\":\"webui\"}],\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"500M\"},\"requests\":{\"cpu\":\"500m\",\"memory\":\"500M\"}},\"volumeMounts\":[{\"mountPath\":\"/etc/prometheus\",\"name\":\"config-volume\"},{\"mountPath\":\"/etc/prometheus-rules\",\"name\":\"rules-volume\"}]}],\"serviceAccountName\":\"prometheus-k8s\",\"volumes\":[{\"configMap\":{\"name\":\"prometheus-core\"},\"name\":\"config-volume\"},{\"configMap\":{\"name\":\"prometheus-rules\"},\"name\":\"rules-volume\"}]}}}}\n"
    },
    "labels": {
      "app": "prometheus",
      "component": "core"
    },
    "name": "prometheus-core",
    "namespace": "monitoring"
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": 1,
        "maxUnavailable": 1
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "900M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "alertmanager",
      "pod-template-hash": "1970416631"
    },
    "name": "alertmanager-1970416631",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "alertmanager",
        "uid": "c8382f3b-9396-11e7-98fd-0eb04d2be0c0"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "alertmanager",
        "pod-template-hash": "1970416631"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "alertmanager",
          "pod-template-hash": "1970416631"
        },
        "name": "alertmanager"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-config.file=/etc/alertmanager/config.yml",
              "-storage.path=/alertmanager"
            ],
            "image": "quay.io/prometheus/alertmanager:v0.7.1",
            "imagePullPolicy": "IfNotPresent",
            "name": "alertmanager",
            "ports": [
              {
                "containerPort": 9093,
                "name": "alertmanager",
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/alertmanager",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/alertmanager-templates",
                "name": "templates-volume"
              },
              {
                "mountPath": "/alertmanager",
                "name": "alertmanager"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "alertmanager-templates"
            },
            "name": "templates-volume"
          },
          {
            "emptyDir": {},
            "name": "alertmanager"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "grafana",
      "component": "core",
      "pod-template-hash": "2777256714"
    },
    "name": "grafana-core-2777256714",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "grafana-core",
        "uid": "c8458dee-9396-11e7-98fd-0eb04d2be0c0"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "grafana",
        "component": "core",
        "pod-template-hash": "2777256714"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "grafana",
          "component": "core",
          "pod-template-hash": "2777256714"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "GF_AUTH_BASIC_ENABLED",
                "value": "true"
              },
              {
                "name": "GF_AUTH_ANONYMOUS_ENABLED",
                "value": "false"
              }
            ],
            "image": "grafana/grafana:4.2.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "grafana-core",
            "readinessProbe": {
              "failureThreshold": 3,
              "httpGet": {
                "path": "/login",
                "port": 3000,
                "scheme": "HTTP"
              },
              "periodSeconds": 10,
              "successThreshold": 1,
              "timeoutSeconds": 1
            },
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/var",
                "name": "grafana-persistent-storage"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {},
            "name": "grafana-persistent-storage"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "2",
      "deployment.kubernetes.io/max-replicas": "3",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "kube-state-metrics",
      "pod-template-hash": "2949788559"
    },
    "name": "kube-state-metrics-2949788559",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "kube-state-metrics",
        "uid": "c8762f30-9396-11e7-98fd-0eb04d2be0c0"
      }
    ]
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "app": "kube-state-metrics",
        "pod-template-hash": "2949788559"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "kube-state-metrics",
          "pod-template-hash": "2949788559"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "gcr.io/google_containers/kube-state-metrics:v0.5.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "kube-state-metrics",
            "ports": [
              {
                "containerPort": 8080,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "kube-state-metrics",
        "serviceAccountName": "kube-state-metrics"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "2"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "1428054065"
    },
    "name": "prometheus-core-1428054065",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "c8713fa8-9396-11e7-98fd-0eb04d2be0c0"
      }
    ]
  },
  "spec": {
    "replicas": 1,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "1428054065"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "1428054065"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "900M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "500M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "1",
      "deployment.kubernetes.io/max-replicas": "2",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "prometheus",
      "component": "core",
      "pod-template-hash": "466509865"
    },
    "name": "prometheus-core-466509865",
    "namespace": "monitoring",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "prometheus-core",
        "uid": "c8713fa8-9396-11e7-98fd-0eb04d2be0c0"
      }
    ]
  },
  "spec": {
    "replicas": 0,
    "selector": {
      "matchLabels": {
        "app": "prometheus",
        "component": "core",
        "pod-template-hash": "466509865"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "prometheus",
          "component": "core",
          "pod-template-hash": "466509865"
        },
        "name": "prometheus-main"
      },
      "spec": {
        "containers": [
          {
            "args": [
              "-storage.local.retention=12h",
              "-storage.local.memory-chunks=500000",
              "-config.file=/etc/prometheus/prometheus.yaml",
              "-alertmanager.url=http://alertmanager:9093/"
            ],
            "image": "prom/prometheus:v1.7.0",
            "imagePullPolicy": "IfNotPresent",
            "name": "prometheus",
            "ports": [
              {
                "containerPort": 9090,
                "name": "webui",
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "500m",
                "memory": "900M"
              },
              "requests": {
                "cpu": "500m",
                "memory": "600M"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/etc/prometheus",
                "name": "config-volume"
              },
              {
                "mountPath": "/etc/prometheus-rules",
                "name": "rules-volume"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "serviceAccount": "prometheus-k8s",
        "serviceAccountName": "prometheus-k8s",
        "volumes": [
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-core"
            },
            "name": "config-volume"
          },
          {
            "configMap": {
              "defaultMode": 420,
              "name": "prometheus-rules"
            },
            "name": "rules-volume"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    "config.yml": "global:\n  # ResolveTimeout is the time after which an alert is declared resolved\n  # if it has not been updated.\n  resolve_timeout: 5m\n\n  # The smarthost and SMTP sender used for mail notifications.\n  smtp_smarthost: 'smtp.gmail.com:587'\n  smtp_from: 'foo@bar.com'\n  smtp_auth_username: 'foo@bar.com'\n  smtp_auth_password: 'barfoo'\n\n  # The API URL to use for Slack notifications.\n  slack_api_url: 'https://hooks.slack.com/services/some/api/token'\n\n# # The directory from which notification templates are read.\ntemplates:\n- '/etc/alertmanager-templates/*.tmpl'\n\n# The root route on which each incoming alert enters.\nroute:\n\n  # The labels by which incoming alerts are grouped together. For example,\n  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would\n  # be batched into a single group.\n\n  group_by: ['alertname', 'cluster', 'service']\n\n  # When a new group of alerts is created by an incoming alert, wait at\n  # least 'group_wait' to send the initial notification.\n  # This way ensures that you get multiple alerts for the same group that start\n  # firing shortly after another are batched together on the first\n  # notification.\n\n  group_wait: 30s\n\n  # When the first notification was sent, wait 'group_interval' to send a batch\n  # of new alerts that started firing for that group.\n\n  group_interval: 5m\n\n  # If an alert has successfully been sent, wait 'repeat_interval' to\n  # resend them.\n\n  #repeat_interval: 1m\n  repeat_interval: 15m\n\n  # A default receiver\n\n  # If an alert isn't caught by a route, send it to default.\n  receiver: default\n\n  # All the above attributes are inherited by all child routes and can\n  # overwritten on each.\n\n  # The child route trees.\n  routes:\n  # Send severity=slack alerts to slack.\n  - match:\n      severity: slack\n    receiver: slack_alert\n  # - match:\n  #     severity: email\n  #   receiver: email_alert\n\nreceivers:\n- name: 'default'\n  slack_configs:\n  - channel: '#alertmanager-test'\n    text: '<!channel>{{ template \"slack.devops.text\" . }}'\n    send_resolved: true\n\n- name: 'slack_alert'\n  slack_configs:\n  - channel: '#alertmanager-test'\n    send_resolved: true"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"config.yml\":\"global:\\n  # ResolveTimeout is the time after which an alert is declared resolved\\n  # if it has not been updated.\\n  resolve_timeout: 5m\\n\\n  # The smarthost and SMTP sender used for mail notifications.\\n  smtp_smarthost: 'smtp.gmail.com:587'\\n  smtp_from: 'foo@bar.com'\\n  smtp_auth_username: 'foo@bar.com'\\n  smtp_auth_password: 'barfoo'\\n\\n  # The API URL to use for Slack notifications.\\n  slack_api_url: 'https://hooks.slack.com/services/some/api/token'\\n\\n# # The directory from which notification templates are read.\\ntemplates:\\n- '/etc/alertmanager-templates/*.tmpl'\\n\\n# The root route on which each incoming alert enters.\\nroute:\\n\\n  # The labels by which incoming alerts are grouped together. For example,\\n  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would\\n  # be batched into a single group.\\n\\n  group_by: ['alertname', 'cluster', 'service']\\n\\n  # When a new group of alerts is created by an incoming alert, wait at\\n  # least 'group_wait' to send the initial notification.\\n  # This way ensures that you get multiple alerts for the same group that start\\n  # firing shortly after another are batched together on the first\\n  # notification.\\n\\n  group_wait: 30s\\n\\n  # When the first notification was sent, wait 'group_interval' to send a batch\\n  # of new alerts that started firing for that group.\\n\\n  group_interval: 5m\\n\\n  # If an alert has successfully been sent, wait 'repeat_interval' to\\n  # resend them.\\n\\n  #repeat_interval: 1m\\n  repeat_interval: 15m\\n\\n  # A default receiver\\n\\n  # If an alert isn't caught by a route, send it to default.\\n  receiver: default\\n\\n  # All the above attributes are inherited by all child routes and can\\n  # overwritten on each.\\n\\n  # The child route trees.\\n  routes:\\n  # Send severity=slack alerts to slack.\\n  - match:\\n      severity: slack\\n    receiver: slack_alert\\n  # - match:\\n  #     severity: email\\n  #   receiver: email_alert\\n\\nreceivers:\\n- name: 'default'\\n  slack_configs:\\n  - channel: '#alertmanager-test'\\n    text: '\\u003c!channel\\u003e{{ template \\\"slack.devops.text\\\" . }}'\\n    send_resolved: true\\n\\n- name: 'slack_alert'\\n  slack_configs:\\n  - channel: '#alertmanager-test'\\n    send_resolved: true\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"alertmanager\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "alertmanager",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "default.tmpl": "{{ define \"__alertmanager\" }}AlertManager{{ end }}\n{{ define \"__alertmanagerURL\" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver }}{{ end }}\n\n{{ define \"__subject\" }}[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join \" \" }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join \" \" }}{{ end }}){{ end }}{{ end }}\n{{ define \"__description\" }}{{ end }}\n\n{{ define \"__text_alert_list\" }}{{ range . }}Labels:\n{{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}Annotations:\n{{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}Source: {{ .GeneratorURL }}\n{{ end }}{{ end }}\n\n\n{{ define \"slack.default.title\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"slack.default.username\" }}{{ template \"__alertmanager\" . }}{{ end }}\n{{ define \"slack.default.fallback\" }}{{ template \"slack.default.title\" . }} | {{ template \"slack.default.titlelink\" . }}{{ end }}\n{{ define \"slack.default.pretext\" }}{{ end }}\n{{ define \"slack.default.titlelink\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n{{ define \"slack.default.iconemoji\" }}{{ end }}\n{{ define \"slack.default.iconurl\" }}{{ end }}\n{{ define \"slack.default.text\" }}{{ end }}\n\n\n{{ define \"hipchat.default.from\" }}{{ template \"__alertmanager\" . }}{{ end }}\n{{ define \"hipchat.default.message\" }}{{ template \"__subject\" . }}{{ end }}\n\n\n{{ define \"pagerduty.default.description\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"pagerduty.default.client\" }}{{ template \"__alertmanager\" . }}{{ end }}\n{{ define \"pagerduty.default.clientURL\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n{{ define \"pagerduty.default.instances\" }}{{ template \"__text_alert_list\" . }}{{ end }}\n\n\n{{ define \"opsgenie.default.message\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"opsgenie.default.description\" }}{{ .CommonAnnotations.SortedPairs.Values | join \" \" }}\n{{ if gt (len .Alerts.Firing) 0 -}}\nAlerts Firing:\n{{ template \"__text_alert_list\" .Alerts.Firing }}\n{{- end }}\n{{ if gt (len .Alerts.Resolved) 0 -}}\nAlerts Resolved:\n{{ template \"__text_alert_list\" .Alerts.Resolved }}\n{{- end }}\n{{- end }}\n{{ define \"opsgenie.default.source\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n\n\n{{ define \"victorops.default.message\" }}{{ template \"__subject\" . }} | {{ template \"__alertmanagerURL\" . }}{{ end }}\n{{ define \"victorops.default.from\" }}{{ template \"__alertmanager\" . }}{{ end }}\n\n\n{{ define \"email.default.subject\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"email.default.html\" }}\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<!--\nStyle and HTML derived from https://github.com/mailgun/transactional-email-templates\n\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Mailgun\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns=\"http://www.w3.org/1999/xhtml\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n<head style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n<meta name=\"viewport\" content=\"width=device-width\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n<title style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">{{ template \"__subject\" . }}</title>\n\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/EmailMessage\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; -webkit-font-smoothing: antialiased; -webkit-text-size-adjust: none; height: 100%; line-height: 1.6em; width: 100% !important; background-color: #f6f6f6; margin: 0; padding: 0;\" bgcolor=\"#f6f6f6\">\n\n<table style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; background-color: #f6f6f6; margin: 0;\" bgcolor=\"#f6f6f6\">\n  <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n    <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\" valign=\"top\"></td>\n    <td width=\"600\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; display: block !important; max-width: 600px !important; clear: both !important; width: 100% !important; margin: 0 auto; padding: 0;\" valign=\"top\">\n      <div style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; max-width: 600px; display: block; margin: 0 auto; padding: 0;\">\n        <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; border-radius: 3px; background-color: #fff; margin: 0; border: 1px solid #e9e9e9;\" bgcolor=\"#fff\">\n          <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n            <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 16px; vertical-align: top; color: #fff; font-weight: 500; text-align: center; border-radius: 3px 3px 0 0; background-color: #E6522C; margin: 0; padding: 20px;\" align=\"center\" bgcolor=\"#E6522C\" valign=\"top\">\n              {{ .Alerts | len }} alert{{ if gt (len .Alerts) 1 }}s{{ end }} for {{ range .GroupLabels.SortedPairs }}\n                {{ .Name }}={{ .Value }}\n              {{ end }}\n            </td>\n          </tr>\n          <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n            <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 10px;\" valign=\"top\">\n              <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <a href=\"{{ template \"__alertmanagerURL\" . }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #FFF; text-decoration: none; line-height: 2em; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 5px; text-transform: capitalize; background-color: #348eda; margin: 0; border-color: #348eda; border-style: solid; border-width: 10px 20px;\">View in {{ template \"__alertmanager\" . }}</a>\n                  </td>\n                </tr>\n                {{ if gt (len .Alerts.Firing) 0 }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">[{{ .Alerts.Firing | len }}] Firing</strong>\n                  </td>\n                </tr>\n                {{ end }}\n                {{ range .Alerts.Firing }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Labels</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ if gt (len .Annotations) 0 }}<strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Annotations</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    <a href=\"{{ .GeneratorURL }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\">Source</a><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                  </td>\n                </tr>\n                {{ end }}\n\n                {{ if gt (len .Alerts.Resolved) 0 }}\n                  {{ if gt (len .Alerts.Firing) 0 }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    <hr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    <br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                  </td>\n                </tr>\n                  {{ end }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">[{{ .Alerts.Resolved | len }}] Resolved</strong>\n                  </td>\n                </tr>\n                {{ end }}\n                {{ range .Alerts.Resolved }}\n                <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n                  <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\" valign=\"top\">\n                    <strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Labels</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ if gt (len .Annotations) 0 }}<strong style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">Annotations</strong><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}<br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />{{ end }}\n                    <a href=\"{{ .GeneratorURL }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\">Source</a><br style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\" />\n                  </td>\n                </tr>\n                {{ end }}\n              </table>\n            </td>\n          </tr>\n        </table>\n\n        <div style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; clear: both; color: #999; margin: 0; padding: 20px;\">\n          <table width=\"100%\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n            <tr style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\">\n              <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; vertical-align: top; text-align: center; color: #999; margin: 0; padding: 0 0 20px;\" align=\"center\" valign=\"top\"><a href=\"{{ .ExternalURL }}\" style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; color: #999; text-decoration: underline; margin: 0;\">Sent by {{ template \"__alertmanager\" . }}</a></td>\n            </tr>\n          </table>\n        </div></div>\n    </td>\n    <td style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\" valign=\"top\"></td>\n  </tr>\n</table>\n\n</body>\n</html>\n\n{{ end }}\n\n{{ define \"pushover.default.title\" }}{{ template \"__subject\" . }}{{ end }}\n{{ define \"pushover.default.message\" }}{{ .CommonAnnotations.SortedPairs.Values | join \" \" }}\n{{ if gt (len .Alerts.Firing) 0 }}\nAlerts Firing:\n{{ template \"__text_alert_list\" .Alerts.Firing }}\n{{ end }}\n{{ if gt (len .Alerts.Resolved) 0 }}\nAlerts Resolved:\n{{ template \"__text_alert_list\" .Alerts.Resolved }}\n{{ end }}\n{{ end }}\n{{ define \"pushover.default.url\" }}{{ template \"__alertmanagerURL\" . }}{{ end }}\n",
    "slack.tmpl": "{{ define \"slack.devops.text\" }}\n{{range .Alerts}}{{.Annotations.DESCRIPTION}}\n{{end}}\n{{ end }}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"default.tmpl\":\"{{ define \\\"__alertmanager\\\" }}AlertManager{{ end }}\\n{{ define \\\"__alertmanagerURL\\\" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver }}{{ end }}\\n\\n{{ define \\\"__subject\\\" }}[{{ .Status | toUpper }}{{ if eq .Status \\\"firing\\\" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join \\\" \\\" }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join \\\" \\\" }}{{ end }}){{ end }}{{ end }}\\n{{ define \\\"__description\\\" }}{{ end }}\\n\\n{{ define \\\"__text_alert_list\\\" }}{{ range . }}Labels:\\n{{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}\\n{{ end }}Annotations:\\n{{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}\\n{{ end }}Source: {{ .GeneratorURL }}\\n{{ end }}{{ end }}\\n\\n\\n{{ define \\\"slack.default.title\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"slack.default.username\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n{{ define \\\"slack.default.fallback\\\" }}{{ template \\\"slack.default.title\\\" . }} | {{ template \\\"slack.default.titlelink\\\" . }}{{ end }}\\n{{ define \\\"slack.default.pretext\\\" }}{{ end }}\\n{{ define \\\"slack.default.titlelink\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n{{ define \\\"slack.default.iconemoji\\\" }}{{ end }}\\n{{ define \\\"slack.default.iconurl\\\" }}{{ end }}\\n{{ define \\\"slack.default.text\\\" }}{{ end }}\\n\\n\\n{{ define \\\"hipchat.default.from\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n{{ define \\\"hipchat.default.message\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"pagerduty.default.description\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"pagerduty.default.client\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n{{ define \\\"pagerduty.default.clientURL\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n{{ define \\\"pagerduty.default.instances\\\" }}{{ template \\\"__text_alert_list\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"opsgenie.default.message\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"opsgenie.default.description\\\" }}{{ .CommonAnnotations.SortedPairs.Values | join \\\" \\\" }}\\n{{ if gt (len .Alerts.Firing) 0 -}}\\nAlerts Firing:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Firing }}\\n{{- end }}\\n{{ if gt (len .Alerts.Resolved) 0 -}}\\nAlerts Resolved:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Resolved }}\\n{{- end }}\\n{{- end }}\\n{{ define \\\"opsgenie.default.source\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"victorops.default.message\\\" }}{{ template \\\"__subject\\\" . }} | {{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n{{ define \\\"victorops.default.from\\\" }}{{ template \\\"__alertmanager\\\" . }}{{ end }}\\n\\n\\n{{ define \\\"email.default.subject\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"email.default.html\\\" }}\\n\\u003c!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"\\u003e\\n\\u003c!--\\nStyle and HTML derived from https://github.com/mailgun/transactional-email-templates\\n\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2014 Mailgun\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n--\\u003e\\n\\u003chtml xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n\\u003chead style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n\\u003cmeta name=\\\"viewport\\\" content=\\\"width=device-width\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n\\u003cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n\\u003ctitle style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e{{ template \\\"__subject\\\" . }}\\u003c/title\\u003e\\n\\n\\u003c/head\\u003e\\n\\n\\u003cbody itemscope=\\\"\\\" itemtype=\\\"http://schema.org/EmailMessage\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; -webkit-font-smoothing: antialiased; -webkit-text-size-adjust: none; height: 100%; line-height: 1.6em; width: 100% !important; background-color: #f6f6f6; margin: 0; padding: 0;\\\" bgcolor=\\\"#f6f6f6\\\"\\u003e\\n\\n\\u003ctable style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; background-color: #f6f6f6; margin: 0;\\\" bgcolor=\\\"#f6f6f6\\\"\\u003e\\n  \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n    \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\\\" valign=\\\"top\\\"\\u003e\\u003c/td\\u003e\\n    \\u003ctd width=\\\"600\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; display: block !important; max-width: 600px !important; clear: both !important; width: 100% !important; margin: 0 auto; padding: 0;\\\" valign=\\\"top\\\"\\u003e\\n      \\u003cdiv style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; max-width: 600px; display: block; margin: 0 auto; padding: 0;\\\"\\u003e\\n        \\u003ctable width=\\\"100%\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; border-radius: 3px; background-color: #fff; margin: 0; border: 1px solid #e9e9e9;\\\" bgcolor=\\\"#fff\\\"\\u003e\\n          \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n            \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 16px; vertical-align: top; color: #fff; font-weight: 500; text-align: center; border-radius: 3px 3px 0 0; background-color: #E6522C; margin: 0; padding: 20px;\\\" align=\\\"center\\\" bgcolor=\\\"#E6522C\\\" valign=\\\"top\\\"\\u003e\\n              {{ .Alerts | len }} alert{{ if gt (len .Alerts) 1 }}s{{ end }} for {{ range .GroupLabels.SortedPairs }}\\n                {{ .Name }}={{ .Value }}\\n              {{ end }}\\n            \\u003c/td\\u003e\\n          \\u003c/tr\\u003e\\n          \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n            \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 10px;\\\" valign=\\\"top\\\"\\u003e\\n              \\u003ctable width=\\\"100%\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003ca href=\\\"{{ template \\\"__alertmanagerURL\\\" . }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #FFF; text-decoration: none; line-height: 2em; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 5px; text-transform: capitalize; background-color: #348eda; margin: 0; border-color: #348eda; border-style: solid; border-width: 10px 20px;\\\"\\u003eView in {{ template \\\"__alertmanager\\\" . }}\\u003c/a\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ if gt (len .Alerts.Firing) 0 }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e[{{ .Alerts.Firing | len }}] Firing\\u003c/strong\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n                {{ range .Alerts.Firing }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eLabels\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ if gt (len .Annotations) 0 }}\\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eAnnotations\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    \\u003ca href=\\\"{{ .GeneratorURL }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\\\"\\u003eSource\\u003c/a\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n\\n                {{ if gt (len .Alerts.Resolved) 0 }}\\n                  {{ if gt (len .Alerts.Firing) 0 }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    \\u003chr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    \\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                  {{ end }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e[{{ .Alerts.Resolved | len }}] Resolved\\u003c/strong\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n                {{ range .Alerts.Resolved }}\\n                \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n                  \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0; padding: 0 0 20px;\\\" valign=\\\"top\\\"\\u003e\\n                    \\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eLabels\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                    {{ range .Labels.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ if gt (len .Annotations) 0 }}\\u003cstrong style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003eAnnotations\\u003c/strong\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    {{ range .Annotations.SortedPairs }}{{ .Name }} = {{ .Value }}\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e{{ end }}\\n                    \\u003ca href=\\\"{{ .GeneratorURL }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; color: #348eda; text-decoration: underline; margin: 0;\\\"\\u003eSource\\u003c/a\\u003e\\u003cbr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\" /\\u003e\\n                  \\u003c/td\\u003e\\n                \\u003c/tr\\u003e\\n                {{ end }}\\n              \\u003c/table\\u003e\\n            \\u003c/td\\u003e\\n          \\u003c/tr\\u003e\\n        \\u003c/table\\u003e\\n\\n        \\u003cdiv style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; width: 100%; clear: both; color: #999; margin: 0; padding: 20px;\\\"\\u003e\\n          \\u003ctable width=\\\"100%\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n            \\u003ctr style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; margin: 0;\\\"\\u003e\\n              \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; vertical-align: top; text-align: center; color: #999; margin: 0; padding: 0 0 20px;\\\" align=\\\"center\\\" valign=\\\"top\\\"\\u003e\\u003ca href=\\\"{{ .ExternalURL }}\\\" style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 12px; color: #999; text-decoration: underline; margin: 0;\\\"\\u003eSent by {{ template \\\"__alertmanager\\\" . }}\\u003c/a\\u003e\\u003c/td\\u003e\\n            \\u003c/tr\\u003e\\n          \\u003c/table\\u003e\\n        \\u003c/div\\u003e\\u003c/div\\u003e\\n    \\u003c/td\\u003e\\n    \\u003ctd style=\\\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; box-sizing: border-box; font-size: 14px; vertical-align: top; margin: 0;\\\" valign=\\\"top\\\"\\u003e\\u003c/td\\u003e\\n  \\u003c/tr\\u003e\\n\\u003c/table\\u003e\\n\\n\\u003c/body\\u003e\\n\\u003c/html\\u003e\\n\\n{{ end }}\\n\\n{{ define \\\"pushover.default.title\\\" }}{{ template \\\"__subject\\\" . }}{{ end }}\\n{{ define \\\"pushover.default.message\\\" }}{{ .CommonAnnotations.SortedPairs.Values | join \\\" \\\" }}\\n{{ if gt (len .Alerts.Firing) 0 }}\\nAlerts Firing:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Firing }}\\n{{ end }}\\n{{ if gt (len .Alerts.Resolved) 0 }}\\nAlerts Resolved:\\n{{ template \\\"__text_alert_list\\\" .Alerts.Resolved }}\\n{{ end }}\\n{{ end }}\\n{{ define \\\"pushover.default.url\\\" }}{{ template \\\"__alertmanagerURL\\\" . }}{{ end }}\\n\",\"slack.tmpl\":\"{{ define \\\"slack.devops.text\\\" }}\\n{{range .Alerts}}{{.Annotations.DESCRIPTION}}\\n{{end}}\\n{{ end }}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"alertmanager-templates\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "alertmanager-templates",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "aws.region": "us-east-1",
    "file.system.id": "fs-d999b490",
    "provisioner.name": "aws-efs"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "efs-provisioner",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "LOGSTASH_HOSTS": "logstash:5044"
  },
  "kind": "ConfigMap",
  "metadata": {
    "name": "environment-variables",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "grafana-net-2-dashboard.json": "{\n  \"__inputs\": [{\n    \"name\": \"DS_PROMETHEUS\",\n    \"label\": \"Prometheus\",\n    \"description\": \"\",\n    \"type\": \"datasource\",\n    \"pluginId\": \"prometheus\",\n    \"pluginName\": \"Prometheus\"\n  }],\n  \"__requires\": [{\n    \"type\": \"panel\",\n    \"id\": \"singlestat\",\n    \"name\": \"Singlestat\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"panel\",\n    \"id\": \"text\",\n    \"name\": \"Text\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"panel\",\n    \"id\": \"graph\",\n    \"name\": \"Graph\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"grafana\",\n    \"id\": \"grafana\",\n    \"name\": \"Grafana\",\n    \"version\": \"3.1.0\"\n  }, {\n    \"type\": \"datasource\",\n    \"id\": \"prometheus\",\n    \"name\": \"Prometheus\",\n    \"version\": \"1.0.0\"\n  }],\n  \"id\": null,\n  \"title\": \"Prometheus Stats\",\n  \"tags\": [],\n  \"style\": \"dark\",\n  \"timezone\": \"browser\",\n  \"editable\": true,\n  \"hideControls\": true,\n  \"sharedCrosshair\": false,\n  \"rows\": [{\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": 178,\n    \"panels\": [{\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\"],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 1,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"s\",\n      \"id\": 5,\n      \"interval\": null,\n      \"links\": [],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"span\": 3,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"(time() - process_start_time_seconds{job=\\\"prometheus\\\"})\",\n        \"intervalFactor\": 2,\n        \"refId\": \"A\",\n        \"step\": 4\n      }],\n      \"thresholds\": \"\",\n      \"title\": \"Uptime\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\",\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"to\": \"null\",\n        \"text\": \"N/A\"\n      }],\n      \"mappingType\": 1,\n      \"gauge\": {\n        \"show\": false,\n        \"minValue\": 0,\n        \"maxValue\": 100,\n        \"thresholdMarkers\": true,\n        \"thresholdLabels\": false\n      }\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\"],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"id\": 6,\n      \"interval\": null,\n      \"links\": [],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"span\": 3,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": true\n      },\n      \"targets\": [{\n        \"expr\": \"prometheus_local_storage_memory_series\",\n        \"intervalFactor\": 2,\n        \"refId\": \"A\",\n        \"step\": 4\n      }],\n      \"thresholds\": \"1,5\",\n      \"title\": \"Local Storage Memory Series\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"70%\",\n      \"valueMaps\": [],\n      \"valueName\": \"current\",\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"to\": \"null\",\n        \"text\": \"N/A\"\n      }],\n      \"mappingType\": 1,\n      \"gauge\": {\n        \"show\": false,\n        \"minValue\": 0,\n        \"maxValue\": 100,\n        \"thresholdMarkers\": true,\n        \"thresholdLabels\": false\n      }\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\"],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"id\": 7,\n      \"interval\": null,\n      \"links\": [],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"span\": 3,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": true\n      },\n      \"targets\": [{\n        \"expr\": \"prometheus_local_storage_indexing_queue_length\",\n        \"intervalFactor\": 2,\n        \"refId\": \"A\",\n        \"step\": 4\n      }],\n      \"thresholds\": \"500,4000\",\n      \"title\": \"Interal Storage Queue Length\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"70%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"Empty\",\n        \"value\": \"0\"\n      }],\n      \"valueName\": \"current\",\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"to\": \"null\",\n        \"text\": \"N/A\"\n      }],\n      \"mappingType\": 1,\n      \"gauge\": {\n        \"show\": false,\n        \"minValue\": 0,\n        \"maxValue\": 100,\n        \"thresholdMarkers\": true,\n        \"thresholdLabels\": false\n      }\n    }, {\n      \"content\": \"<img src=\\\"http://prometheus.io/assets/prometheus_logo_grey.svg\\\" alt=\\\"Prometheus logo\\\" style=\\\"height: 40px;\\\">\\n<span style=\\\"font-family: 'Open Sans', 'Helvetica Neue', Helvetica; font-size: 25px;vertical-align: text-top;color: #bbbfc2;margin-left: 10px;\\\">Prometheus</span>\\n\\n<p style=\\\"margin-top: 10px;\\\">You're using Prometheus, an open-source systems monitoring and alerting toolkit originally built at SoundCloud. For more information, check out the <a href=\\\"http://www.grafana.org/\\\">Grafana</a> and <a href=\\\"http://prometheus.io/\\\">Prometheus</a> projects.</p>\",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 9,\n      \"links\": [],\n      \"mode\": \"html\",\n      \"span\": 3,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": 227,\n    \"panels\": [{\n      \"aliasColors\": {\n        \"prometheus\": \"#C15C17\",\n        \"{instance=\\\"localhost:9090\\\",job=\\\"prometheus\\\"}\": \"#C15C17\"\n      },\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 3,\n      \"legend\": {\n        \"avg\": false,\n        \"current\": false,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 2,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 9,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"rate(prometheus_local_storage_ingested_samples_total[5m])\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{job}}\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Samples ingested (rate-5m)\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"content\": \"#### Samples Ingested\\nThis graph displays the count of samples ingested by the Prometheus server, as measured over the last 5 minutes, per time series in the range vector. When troubleshooting an issue on IRC or Github, this is often the first stat requested by the Prometheus team. \",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 8,\n      \"links\": [],\n      \"mode\": \"markdown\",\n      \"span\": 2.995914043583536,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"aliasColors\": {\n        \"prometheus\": \"#F9BA8F\",\n        \"{instance=\\\"localhost:9090\\\",interval=\\\"5s\\\",job=\\\"prometheus\\\"}\": \"#F9BA8F\"\n      },\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 2,\n      \"legend\": {\n        \"avg\": false,\n        \"current\": false,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 5,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"rate(prometheus_target_interval_length_seconds_count[5m])\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{job}}\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Target Scrapes (last 5m)\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 14,\n      \"legend\": {\n        \"avg\": false,\n        \"current\": false,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 4,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"prometheus_target_interval_length_seconds{quantile!=\\\"0.01\\\", quantile!=\\\"0.05\\\"}\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{quantile}} ({{interval}})\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Scrape Duration\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"content\": \"#### Scrapes\\nPrometheus scrapes metrics from instrumented jobs, either directly or via an intermediary push gateway for short-lived jobs. Target scrapes will show how frequently targets are scraped, as measured over the last 5 minutes, per time series in the range vector. Scrape Duration will show how long the scrapes are taking, with percentiles available as series. \",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 11,\n      \"links\": [],\n      \"mode\": \"markdown\",\n      \"span\": 3,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": null,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 12,\n      \"legend\": {\n        \"alignAsTable\": false,\n        \"avg\": false,\n        \"current\": false,\n        \"hideEmpty\": true,\n        \"max\": false,\n        \"min\": false,\n        \"show\": true,\n        \"total\": false,\n        \"values\": false\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 9,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"prometheus_evaluator_duration_milliseconds{quantile!=\\\"0.01\\\", quantile!=\\\"0.05\\\"}\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{quantile}}\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Rule Eval Duration\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"value_type\": \"cumulative\",\n        \"ordering\": \"alphabetical\",\n        \"msResolution\": false\n      },\n      \"type\": \"graph\",\n      \"yaxes\": [{\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"percentunit\",\n        \"label\": \"\"\n      }, {\n        \"show\": true,\n        \"min\": null,\n        \"max\": null,\n        \"logBase\": 1,\n        \"format\": \"short\"\n      }],\n      \"xaxis\": {\n        \"show\": true\n      }\n    }, {\n      \"content\": \"#### Rule Evaluation Duration\\nThis graph panel plots the duration for all evaluations to execute. The 50th percentile, 90th percentile and 99th percentile are shown as three separate series to help identify outliers that may be skewing the data.\",\n      \"editable\": true,\n      \"error\": false,\n      \"id\": 15,\n      \"links\": [],\n      \"mode\": \"markdown\",\n      \"span\": 3,\n      \"style\": {},\n      \"title\": \"\",\n      \"transparent\": true,\n      \"type\": \"text\"\n    }],\n    \"title\": \"New row\"\n  }],\n  \"time\": {\n    \"from\": \"now-5m\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"now\": true,\n    \"refresh_intervals\": [\"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\"],\n    \"time_options\": [\"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\"]\n  },\n  \"templating\": {\n    \"list\": []\n  },\n  \"annotations\": {\n    \"list\": []\n  },\n  \"refresh\": false,\n  \"schemaVersion\": 12,\n  \"version\": 0,\n  \"links\": [{\n    \"icon\": \"info\",\n    \"tags\": [],\n    \"targetBlank\": true,\n    \"title\": \"Grafana Docs\",\n    \"tooltip\": \"\",\n    \"type\": \"link\",\n    \"url\": \"http://www.grafana.org/docs\"\n  }, {\n    \"icon\": \"info\",\n    \"tags\": [],\n    \"targetBlank\": true,\n    \"title\": \"Prometheus Docs\",\n    \"type\": \"link\",\n    \"url\": \"http://prometheus.io/docs/introduction/overview/\"\n  }],\n  \"gnetId\": 2,\n  \"description\": \"The  official, pre-built Prometheus Stats Dashboard.\"\n}\n",
    "grafana-net-737-dashboard.json": "{\n  \"__inputs\": [{\n    \"name\": \"DS_PROMETHEUS\",\n    \"label\": \"prometheus\",\n    \"description\": \"\",\n    \"type\": \"datasource\",\n    \"pluginId\": \"prometheus\",\n    \"pluginName\": \"Prometheus\"\n  }],\n  \"__requires\": [{\n    \"type\": \"panel\",\n    \"id\": \"singlestat\",\n    \"name\": \"Singlestat\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"panel\",\n    \"id\": \"graph\",\n    \"name\": \"Graph\",\n    \"version\": \"\"\n  }, {\n    \"type\": \"grafana\",\n    \"id\": \"grafana\",\n    \"name\": \"Grafana\",\n    \"version\": \"3.1.0\"\n  }, {\n    \"type\": \"datasource\",\n    \"id\": \"prometheus\",\n    \"name\": \"Prometheus\",\n    \"version\": \"1.0.0\"\n  }],\n  \"id\": null,\n  \"title\": \"Kubernetes Pod Resources\",\n  \"description\": \"Shows resource usage of Kubernetes pods.\",\n  \"tags\": [\n    \"kubernetes\"\n  ],\n  \"style\": \"dark\",\n  \"timezone\": \"browser\",\n  \"editable\": true,\n  \"hideControls\": false,\n  \"sharedCrosshair\": false,\n  \"rows\": [{\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"percent\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": true,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"180px\",\n      \"id\": 4,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 4,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (container_memory_working_set_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}) / sum (machine_memory_bytes{instance=~\\\"^$instance$\\\"}) * 100\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"\",\n        \"refId\": \"A\",\n        \"step\": 2\n      }],\n      \"thresholds\": \"65, 90\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Memory Working Set\",\n      \"transparent\": false,\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"percent\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": true,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"180px\",\n      \"id\": 6,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 4,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}[1m])) / sum (machine_cpu_cores{instance=~\\\"^$instance$\\\"}) * 100\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"65, 90\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Cpu Usage\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": true,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"percent\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": true,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"180px\",\n      \"id\": 7,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 4,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(container_fs_usage_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}) / sum(container_fs_limit_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}) * 100\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"legendFormat\": \"\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"65, 90\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Filesystem Usage\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 9,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"20%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"20%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(container_memory_working_set_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Used\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 10,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (machine_memory_bytes{instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Total\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 11,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \" cores\",\n      \"postfixFontSize\": \"30%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (rate (container_cpu_usage_seconds_total{id=\\\"/\\\",instance=~\\\"^$instance$\\\"}[1m]))\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"timeShift\": null,\n      \"title\": \"Used\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"none\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 12,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \" cores\",\n      \"postfixFontSize\": \"30%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (machine_cpu_cores{instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Total\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 13,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum(container_fs_usage_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Used\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"cacheTimeout\": null,\n      \"colorBackground\": false,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(50, 172, 45, 0.97)\",\n        \"rgba(237, 129, 40, 0.89)\",\n        \"rgba(245, 54, 54, 0.9)\"\n      ],\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"format\": \"bytes\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false,\n        \"thresholdLabels\": false,\n        \"thresholdMarkers\": true\n      },\n      \"height\": \"1px\",\n      \"hideTimeOverride\": true,\n      \"id\": 14,\n      \"interval\": null,\n      \"isNew\": true,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [{\n        \"name\": \"value to text\",\n        \"value\": 1\n      }, {\n        \"name\": \"range to text\",\n        \"value\": 2\n      }],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfix\": \"\",\n      \"postfixFontSize\": \"50%\",\n      \"prefix\": \"\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [{\n        \"from\": \"null\",\n        \"text\": \"N/A\",\n        \"to\": \"null\"\n      }],\n      \"span\": 2,\n      \"sparkline\": {\n        \"fillColor\": \"rgba(31, 118, 189, 0.18)\",\n        \"full\": false,\n        \"lineColor\": \"rgb(31, 120, 193)\",\n        \"show\": false\n      },\n      \"targets\": [{\n        \"expr\": \"sum (container_fs_limit_bytes{id=\\\"/\\\",instance=~\\\"^$instance$\\\"})\",\n        \"interval\": \"10s\",\n        \"intervalFactor\": 1,\n        \"refId\": \"A\",\n        \"step\": 10\n      }],\n      \"thresholds\": \"\",\n      \"timeFrom\": \"1m\",\n      \"title\": \"Total\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"50%\",\n      \"valueMaps\": [{\n        \"op\": \"=\",\n        \"text\": \"N/A\",\n        \"value\": \"null\"\n      }],\n      \"valueName\": \"current\"\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\",\n        \"thresholdLine\": false\n      },\n      \"height\": \"200px\",\n      \"id\": 32,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": 200,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum(rate(container_network_receive_bytes_total{instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m]))\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"receive\",\n        \"metric\": \"network\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }, {\n        \"expr\": \"- sum(rate(container_network_transmit_bytes_total{instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m]))\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"transmit\",\n        \"metric\": \"network\",\n        \"refId\": \"B\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Network\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"cumulative\"\n      },\n      \"transparent\": false,\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"Bps\",\n        \"label\": \"transmit / receive\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"Bps\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }],\n    \"showTitle\": true,\n    \"title\": \"all pods\"\n  }, {\n    \"collapse\": false,\n    \"editable\": true,\n    \"height\": \"250px\",\n    \"panels\": [{\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 3,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 0,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"height\": \"\",\n      \"id\": 17,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": null,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum(rate(container_cpu_usage_seconds_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m])) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }}\",\n        \"metric\": \"container_cpu\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Cpu Usage\",\n      \"tooltip\": {\n        \"msResolution\": true,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"transparent\": false,\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"none\",\n        \"label\": \"cores\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 0,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 33,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": null,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum (container_memory_working_set_bytes{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }}\",\n        \"metric\": \"\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Memory Working Set\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"bytes\",\n        \"label\": \"used\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 16,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": 200,\n        \"sort\": \"avg\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum (rate (container_network_receive_bytes_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m])) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }} < in\",\n        \"metric\": \"network\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }, {\n        \"expr\": \"- sum (rate (container_network_transmit_bytes_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}[1m])) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }} > out\",\n        \"metric\": \"network\",\n        \"refId\": \"B\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Network\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"Bps\",\n        \"label\": \"transmit / receive\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }, {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"decimals\": 2,\n      \"editable\": true,\n      \"error\": false,\n      \"fill\": 1,\n      \"grid\": {\n        \"threshold1\": null,\n        \"threshold1Color\": \"rgba(216, 200, 27, 0.27)\",\n        \"threshold2\": null,\n        \"threshold2Color\": \"rgba(234, 112, 112, 0.22)\"\n      },\n      \"id\": 34,\n      \"isNew\": true,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": true,\n        \"current\": true,\n        \"hideEmpty\": true,\n        \"hideZero\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": 200,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 2,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"span\": 12,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [{\n        \"expr\": \"sum(container_fs_usage_bytes{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",instance=~\\\"^$instance$\\\",namespace=~\\\"^$namespace$\\\"}) by (pod_name)\",\n        \"interval\": \"\",\n        \"intervalFactor\": 2,\n        \"legendFormat\": \"{{ pod_name }}\",\n        \"metric\": \"network\",\n        \"refId\": \"A\",\n        \"step\": 240\n      }],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Filesystem\",\n      \"tooltip\": {\n        \"msResolution\": false,\n        \"shared\": false,\n        \"sort\": 2,\n        \"value_type\": \"cumulative\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"show\": true\n      },\n      \"yaxes\": [{\n        \"format\": \"bytes\",\n        \"label\": \"used\",\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": true\n      }, {\n        \"format\": \"short\",\n        \"label\": null,\n        \"logBase\": 1,\n        \"max\": null,\n        \"min\": null,\n        \"show\": false\n      }]\n    }],\n    \"showTitle\": true,\n    \"title\": \"each pod\"\n  }],\n  \"time\": {\n    \"from\": \"now-3d\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"refresh_intervals\": [\n      \"5s\",\n      \"10s\",\n      \"30s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\",\n      \"1h\",\n      \"2h\",\n      \"1d\"\n    ],\n    \"time_options\": [\n      \"5m\",\n      \"15m\",\n      \"1h\",\n      \"6h\",\n      \"12h\",\n      \"24h\",\n      \"2d\",\n      \"7d\",\n      \"30d\"\n    ]\n  },\n  \"templating\": {\n    \"list\": [{\n      \"allValue\": \".*\",\n      \"current\": {},\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"hide\": 0,\n      \"includeAll\": true,\n      \"label\": \"Instance\",\n      \"multi\": false,\n      \"name\": \"instance\",\n      \"options\": [],\n      \"query\": \"label_values(instance)\",\n      \"refresh\": 1,\n      \"regex\": \"\",\n      \"type\": \"query\"\n    }, {\n      \"current\": {},\n      \"datasource\": \"${DS_PROMETHEUS}\",\n      \"hide\": 0,\n      \"includeAll\": true,\n      \"label\": \"Namespace\",\n      \"multi\": true,\n      \"name\": \"namespace\",\n      \"options\": [],\n      \"query\": \"label_values(namespace)\",\n      \"refresh\": 1,\n      \"regex\": \"\",\n      \"type\": \"query\"\n    }]\n  },\n  \"annotations\": {\n    \"list\": []\n  },\n  \"refresh\": false,\n  \"schemaVersion\": 12,\n  \"version\": 8,\n  \"links\": [],\n  \"gnetId\": 737\n}\n",
    "prometheus-datasource.json": "{\n  \"name\": \"prometheus\",\n  \"type\": \"prometheus\",\n  \"url\": \"http://prometheus:9090\",\n  \"access\": \"proxy\",\n  \"basicAuth\": false\n}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"grafana-net-2-dashboard.json\":\"{\\n  \\\"__inputs\\\": [{\\n    \\\"name\\\": \\\"DS_PROMETHEUS\\\",\\n    \\\"label\\\": \\\"Prometheus\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"pluginId\\\": \\\"prometheus\\\",\\n    \\\"pluginName\\\": \\\"Prometheus\\\"\\n  }],\\n  \\\"__requires\\\": [{\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"singlestat\\\",\\n    \\\"name\\\": \\\"Singlestat\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"text\\\",\\n    \\\"name\\\": \\\"Text\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"graph\\\",\\n    \\\"name\\\": \\\"Graph\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"grafana\\\",\\n    \\\"id\\\": \\\"grafana\\\",\\n    \\\"name\\\": \\\"Grafana\\\",\\n    \\\"version\\\": \\\"3.1.0\\\"\\n  }, {\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"id\\\": \\\"prometheus\\\",\\n    \\\"name\\\": \\\"Prometheus\\\",\\n    \\\"version\\\": \\\"1.0.0\\\"\\n  }],\\n  \\\"id\\\": null,\\n  \\\"title\\\": \\\"Prometheus Stats\\\",\\n  \\\"tags\\\": [],\\n  \\\"style\\\": \\\"dark\\\",\\n  \\\"timezone\\\": \\\"browser\\\",\\n  \\\"editable\\\": true,\\n  \\\"hideControls\\\": true,\\n  \\\"sharedCrosshair\\\": false,\\n  \\\"rows\\\": [{\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": 178,\\n    \\\"panels\\\": [{\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\\"rgba(245, 54, 54, 0.9)\\\", \\\"rgba(237, 129, 40, 0.89)\\\", \\\"rgba(50, 172, 45, 0.97)\\\"],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 1,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"s\\\",\\n      \\\"id\\\": 5,\\n      \\\"interval\\\": null,\\n      \\\"links\\\": [],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"span\\\": 3,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"(time() - process_start_time_seconds{job=\\\\\\\"prometheus\\\\\\\"})\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 4\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"title\\\": \\\"Uptime\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\",\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"to\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\"\\n      }],\\n      \\\"mappingType\\\": 1,\\n      \\\"gauge\\\": {\\n        \\\"show\\\": false,\\n        \\\"minValue\\\": 0,\\n        \\\"maxValue\\\": 100,\\n        \\\"thresholdMarkers\\\": true,\\n        \\\"thresholdLabels\\\": false\\n      }\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\\"rgba(50, 172, 45, 0.97)\\\", \\\"rgba(237, 129, 40, 0.89)\\\", \\\"rgba(245, 54, 54, 0.9)\\\"],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"id\\\": 6,\\n      \\\"interval\\\": null,\\n      \\\"links\\\": [],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"span\\\": 3,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": true\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_local_storage_memory_series\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 4\\n      }],\\n      \\\"thresholds\\\": \\\"1,5\\\",\\n      \\\"title\\\": \\\"Local Storage Memory Series\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"70%\\\",\\n      \\\"valueMaps\\\": [],\\n      \\\"valueName\\\": \\\"current\\\",\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"to\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\"\\n      }],\\n      \\\"mappingType\\\": 1,\\n      \\\"gauge\\\": {\\n        \\\"show\\\": false,\\n        \\\"minValue\\\": 0,\\n        \\\"maxValue\\\": 100,\\n        \\\"thresholdMarkers\\\": true,\\n        \\\"thresholdLabels\\\": false\\n      }\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\\"rgba(50, 172, 45, 0.97)\\\", \\\"rgba(237, 129, 40, 0.89)\\\", \\\"rgba(245, 54, 54, 0.9)\\\"],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"id\\\": 7,\\n      \\\"interval\\\": null,\\n      \\\"links\\\": [],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"span\\\": 3,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": true\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_local_storage_indexing_queue_length\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 4\\n      }],\\n      \\\"thresholds\\\": \\\"500,4000\\\",\\n      \\\"title\\\": \\\"Interal Storage Queue Length\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"70%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"Empty\\\",\\n        \\\"value\\\": \\\"0\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\",\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"to\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\"\\n      }],\\n      \\\"mappingType\\\": 1,\\n      \\\"gauge\\\": {\\n        \\\"show\\\": false,\\n        \\\"minValue\\\": 0,\\n        \\\"maxValue\\\": 100,\\n        \\\"thresholdMarkers\\\": true,\\n        \\\"thresholdLabels\\\": false\\n      }\\n    }, {\\n      \\\"content\\\": \\\"\\u003cimg src=\\\\\\\"http://prometheus.io/assets/prometheus_logo_grey.svg\\\\\\\" alt=\\\\\\\"Prometheus logo\\\\\\\" style=\\\\\\\"height: 40px;\\\\\\\"\\u003e\\\\n\\u003cspan style=\\\\\\\"font-family: 'Open Sans', 'Helvetica Neue', Helvetica; font-size: 25px;vertical-align: text-top;color: #bbbfc2;margin-left: 10px;\\\\\\\"\\u003ePrometheus\\u003c/span\\u003e\\\\n\\\\n\\u003cp style=\\\\\\\"margin-top: 10px;\\\\\\\"\\u003eYou're using Prometheus, an open-source systems monitoring and alerting toolkit originally built at SoundCloud. For more information, check out the \\u003ca href=\\\\\\\"http://www.grafana.org/\\\\\\\"\\u003eGrafana\\u003c/a\\u003e and \\u003ca href=\\\\\\\"http://prometheus.io/\\\\\\\"\\u003ePrometheus\\u003c/a\\u003e projects.\\u003c/p\\u003e\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 9,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"html\\\",\\n      \\\"span\\\": 3,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": 227,\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {\\n        \\\"prometheus\\\": \\\"#C15C17\\\",\\n        \\\"{instance=\\\\\\\"localhost:9090\\\\\\\",job=\\\\\\\"prometheus\\\\\\\"}\\\": \\\"#C15C17\\\"\\n      },\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 3,\\n      \\\"legend\\\": {\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 2,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 9,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"rate(prometheus_local_storage_ingested_samples_total[5m])\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{job}}\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Samples ingested (rate-5m)\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"content\\\": \\\"#### Samples Ingested\\\\nThis graph displays the count of samples ingested by the Prometheus server, as measured over the last 5 minutes, per time series in the range vector. When troubleshooting an issue on IRC or Github, this is often the first stat requested by the Prometheus team. \\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 8,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"markdown\\\",\\n      \\\"span\\\": 2.995914043583536,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {\\n        \\\"prometheus\\\": \\\"#F9BA8F\\\",\\n        \\\"{instance=\\\\\\\"localhost:9090\\\\\\\",interval=\\\\\\\"5s\\\\\\\",job=\\\\\\\"prometheus\\\\\\\"}\\\": \\\"#F9BA8F\\\"\\n      },\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 2,\\n      \\\"legend\\\": {\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 5,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"rate(prometheus_target_interval_length_seconds_count[5m])\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{job}}\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Target Scrapes (last 5m)\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 14,\\n      \\\"legend\\\": {\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 4,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_target_interval_length_seconds{quantile!=\\\\\\\"0.01\\\\\\\", quantile!=\\\\\\\"0.05\\\\\\\"}\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{quantile}} ({{interval}})\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Scrape Duration\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"content\\\": \\\"#### Scrapes\\\\nPrometheus scrapes metrics from instrumented jobs, either directly or via an intermediary push gateway for short-lived jobs. Target scrapes will show how frequently targets are scraped, as measured over the last 5 minutes, per time series in the range vector. Scrape Duration will show how long the scrapes are taking, with percentiles available as series. \\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 11,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"markdown\\\",\\n      \\\"span\\\": 3,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": null,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 12,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": false,\\n        \\\"avg\\\": false,\\n        \\\"current\\\": false,\\n        \\\"hideEmpty\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"show\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": false\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 9,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"prometheus_evaluator_duration_milliseconds{quantile!=\\\\\\\"0.01\\\\\\\", quantile!=\\\\\\\"0.05\\\\\\\"}\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{quantile}}\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Rule Eval Duration\\\",\\n      \\\"tooltip\\\": {\\n        \\\"shared\\\": true,\\n        \\\"value_type\\\": \\\"cumulative\\\",\\n        \\\"ordering\\\": \\\"alphabetical\\\",\\n        \\\"msResolution\\\": false\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"yaxes\\\": [{\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"percentunit\\\",\\n        \\\"label\\\": \\\"\\\"\\n      }, {\\n        \\\"show\\\": true,\\n        \\\"min\\\": null,\\n        \\\"max\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"format\\\": \\\"short\\\"\\n      }],\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      }\\n    }, {\\n      \\\"content\\\": \\\"#### Rule Evaluation Duration\\\\nThis graph panel plots the duration for all evaluations to execute. The 50th percentile, 90th percentile and 99th percentile are shown as three separate series to help identify outliers that may be skewing the data.\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"id\\\": 15,\\n      \\\"links\\\": [],\\n      \\\"mode\\\": \\\"markdown\\\",\\n      \\\"span\\\": 3,\\n      \\\"style\\\": {},\\n      \\\"title\\\": \\\"\\\",\\n      \\\"transparent\\\": true,\\n      \\\"type\\\": \\\"text\\\"\\n    }],\\n    \\\"title\\\": \\\"New row\\\"\\n  }],\\n  \\\"time\\\": {\\n    \\\"from\\\": \\\"now-5m\\\",\\n    \\\"to\\\": \\\"now\\\"\\n  },\\n  \\\"timepicker\\\": {\\n    \\\"now\\\": true,\\n    \\\"refresh_intervals\\\": [\\\"5s\\\", \\\"10s\\\", \\\"30s\\\", \\\"1m\\\", \\\"5m\\\", \\\"15m\\\", \\\"30m\\\", \\\"1h\\\", \\\"2h\\\", \\\"1d\\\"],\\n    \\\"time_options\\\": [\\\"5m\\\", \\\"15m\\\", \\\"1h\\\", \\\"6h\\\", \\\"12h\\\", \\\"24h\\\", \\\"2d\\\", \\\"7d\\\", \\\"30d\\\"]\\n  },\\n  \\\"templating\\\": {\\n    \\\"list\\\": []\\n  },\\n  \\\"annotations\\\": {\\n    \\\"list\\\": []\\n  },\\n  \\\"refresh\\\": false,\\n  \\\"schemaVersion\\\": 12,\\n  \\\"version\\\": 0,\\n  \\\"links\\\": [{\\n    \\\"icon\\\": \\\"info\\\",\\n    \\\"tags\\\": [],\\n    \\\"targetBlank\\\": true,\\n    \\\"title\\\": \\\"Grafana Docs\\\",\\n    \\\"tooltip\\\": \\\"\\\",\\n    \\\"type\\\": \\\"link\\\",\\n    \\\"url\\\": \\\"http://www.grafana.org/docs\\\"\\n  }, {\\n    \\\"icon\\\": \\\"info\\\",\\n    \\\"tags\\\": [],\\n    \\\"targetBlank\\\": true,\\n    \\\"title\\\": \\\"Prometheus Docs\\\",\\n    \\\"type\\\": \\\"link\\\",\\n    \\\"url\\\": \\\"http://prometheus.io/docs/introduction/overview/\\\"\\n  }],\\n  \\\"gnetId\\\": 2,\\n  \\\"description\\\": \\\"The  official, pre-built Prometheus Stats Dashboard.\\\"\\n}\\n\",\"grafana-net-737-dashboard.json\":\"{\\n  \\\"__inputs\\\": [{\\n    \\\"name\\\": \\\"DS_PROMETHEUS\\\",\\n    \\\"label\\\": \\\"prometheus\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"pluginId\\\": \\\"prometheus\\\",\\n    \\\"pluginName\\\": \\\"Prometheus\\\"\\n  }],\\n  \\\"__requires\\\": [{\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"singlestat\\\",\\n    \\\"name\\\": \\\"Singlestat\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"panel\\\",\\n    \\\"id\\\": \\\"graph\\\",\\n    \\\"name\\\": \\\"Graph\\\",\\n    \\\"version\\\": \\\"\\\"\\n  }, {\\n    \\\"type\\\": \\\"grafana\\\",\\n    \\\"id\\\": \\\"grafana\\\",\\n    \\\"name\\\": \\\"Grafana\\\",\\n    \\\"version\\\": \\\"3.1.0\\\"\\n  }, {\\n    \\\"type\\\": \\\"datasource\\\",\\n    \\\"id\\\": \\\"prometheus\\\",\\n    \\\"name\\\": \\\"Prometheus\\\",\\n    \\\"version\\\": \\\"1.0.0\\\"\\n  }],\\n  \\\"id\\\": null,\\n  \\\"title\\\": \\\"Kubernetes Pod Resources\\\",\\n  \\\"description\\\": \\\"Shows resource usage of Kubernetes pods.\\\",\\n  \\\"tags\\\": [\\n    \\\"kubernetes\\\"\\n  ],\\n  \\\"style\\\": \\\"dark\\\",\\n  \\\"timezone\\\": \\\"browser\\\",\\n  \\\"editable\\\": true,\\n  \\\"hideControls\\\": false,\\n  \\\"sharedCrosshair\\\": false,\\n  \\\"rows\\\": [{\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"percent\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": true,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"180px\\\",\\n      \\\"id\\\": 4,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 4,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (container_memory_working_set_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}) / sum (machine_memory_bytes{instance=~\\\\\\\"^$instance$\\\\\\\"}) * 100\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 2\\n      }],\\n      \\\"thresholds\\\": \\\"65, 90\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Memory Working Set\\\",\\n      \\\"transparent\\\": false,\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"percent\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": true,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"180px\\\",\\n      \\\"id\\\": 6,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 4,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(rate(container_cpu_usage_seconds_total{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}[1m])) / sum (machine_cpu_cores{instance=~\\\\\\\"^$instance$\\\\\\\"}) * 100\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"65, 90\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Cpu Usage\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": true,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"percent\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": true,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"180px\\\",\\n      \\\"id\\\": 7,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 4,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_fs_usage_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}) / sum(container_fs_limit_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}) * 100\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"legendFormat\\\": \\\"\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"65, 90\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Filesystem Usage\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"80%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 9,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"20%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"20%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_memory_working_set_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Used\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 10,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (machine_memory_bytes{instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Total\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 11,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\" cores\\\",\\n      \\\"postfixFontSize\\\": \\\"30%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (rate (container_cpu_usage_seconds_total{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"}[1m]))\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Used\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"none\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 12,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\" cores\\\",\\n      \\\"postfixFontSize\\\": \\\"30%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (machine_cpu_cores{instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Total\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 13,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_fs_usage_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Used\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"cacheTimeout\\\": null,\\n      \\\"colorBackground\\\": false,\\n      \\\"colorValue\\\": false,\\n      \\\"colors\\\": [\\n        \\\"rgba(50, 172, 45, 0.97)\\\",\\n        \\\"rgba(237, 129, 40, 0.89)\\\",\\n        \\\"rgba(245, 54, 54, 0.9)\\\"\\n      ],\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"format\\\": \\\"bytes\\\",\\n      \\\"gauge\\\": {\\n        \\\"maxValue\\\": 100,\\n        \\\"minValue\\\": 0,\\n        \\\"show\\\": false,\\n        \\\"thresholdLabels\\\": false,\\n        \\\"thresholdMarkers\\\": true\\n      },\\n      \\\"height\\\": \\\"1px\\\",\\n      \\\"hideTimeOverride\\\": true,\\n      \\\"id\\\": 14,\\n      \\\"interval\\\": null,\\n      \\\"isNew\\\": true,\\n      \\\"links\\\": [],\\n      \\\"mappingType\\\": 1,\\n      \\\"mappingTypes\\\": [{\\n        \\\"name\\\": \\\"value to text\\\",\\n        \\\"value\\\": 1\\n      }, {\\n        \\\"name\\\": \\\"range to text\\\",\\n        \\\"value\\\": 2\\n      }],\\n      \\\"maxDataPoints\\\": 100,\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"nullText\\\": null,\\n      \\\"postfix\\\": \\\"\\\",\\n      \\\"postfixFontSize\\\": \\\"50%\\\",\\n      \\\"prefix\\\": \\\"\\\",\\n      \\\"prefixFontSize\\\": \\\"50%\\\",\\n      \\\"rangeMaps\\\": [{\\n        \\\"from\\\": \\\"null\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"to\\\": \\\"null\\\"\\n      }],\\n      \\\"span\\\": 2,\\n      \\\"sparkline\\\": {\\n        \\\"fillColor\\\": \\\"rgba(31, 118, 189, 0.18)\\\",\\n        \\\"full\\\": false,\\n        \\\"lineColor\\\": \\\"rgb(31, 120, 193)\\\",\\n        \\\"show\\\": false\\n      },\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (container_fs_limit_bytes{id=\\\\\\\"/\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\"})\\\",\\n        \\\"interval\\\": \\\"10s\\\",\\n        \\\"intervalFactor\\\": 1,\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 10\\n      }],\\n      \\\"thresholds\\\": \\\"\\\",\\n      \\\"timeFrom\\\": \\\"1m\\\",\\n      \\\"title\\\": \\\"Total\\\",\\n      \\\"type\\\": \\\"singlestat\\\",\\n      \\\"valueFontSize\\\": \\\"50%\\\",\\n      \\\"valueMaps\\\": [{\\n        \\\"op\\\": \\\"=\\\",\\n        \\\"text\\\": \\\"N/A\\\",\\n        \\\"value\\\": \\\"null\\\"\\n      }],\\n      \\\"valueName\\\": \\\"current\\\"\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\",\\n        \\\"thresholdLine\\\": false\\n      },\\n      \\\"height\\\": \\\"200px\\\",\\n      \\\"id\\\": 32,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": 200,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(rate(container_network_receive_bytes_total{instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m]))\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"receive\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }, {\\n        \\\"expr\\\": \\\"- sum(rate(container_network_transmit_bytes_total{instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m]))\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"transmit\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"B\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Network\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": true,\\n        \\\"sort\\\": 0,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"transparent\\\": false,\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"Bps\\\",\\n        \\\"label\\\": \\\"transmit / receive\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"Bps\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }],\\n    \\\"showTitle\\\": true,\\n    \\\"title\\\": \\\"all pods\\\"\\n  }, {\\n    \\\"collapse\\\": false,\\n    \\\"editable\\\": true,\\n    \\\"height\\\": \\\"250px\\\",\\n    \\\"panels\\\": [{\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 3,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 0,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"height\\\": \\\"\\\",\\n      \\\"id\\\": 17,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": null,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"connected\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(rate(container_cpu_usage_seconds_total{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m])) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }}\\\",\\n        \\\"metric\\\": \\\"container_cpu\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Cpu Usage\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": true,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"transparent\\\": false,\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"none\\\",\\n        \\\"label\\\": \\\"cores\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 0,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 33,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": null,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"null\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (container_memory_working_set_bytes{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }}\\\",\\n        \\\"metric\\\": \\\"\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Memory Working Set\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"bytes\\\",\\n        \\\"label\\\": \\\"used\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 16,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": 200,\\n        \\\"sort\\\": \\\"avg\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"null\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum (rate (container_network_receive_bytes_total{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m])) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }} \\u003c in\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }, {\\n        \\\"expr\\\": \\\"- sum (rate (container_network_transmit_bytes_total{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}[1m])) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }} \\u003e out\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"B\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Network\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"Bps\\\",\\n        \\\"label\\\": \\\"transmit / receive\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }, {\\n      \\\"aliasColors\\\": {},\\n      \\\"bars\\\": false,\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"decimals\\\": 2,\\n      \\\"editable\\\": true,\\n      \\\"error\\\": false,\\n      \\\"fill\\\": 1,\\n      \\\"grid\\\": {\\n        \\\"threshold1\\\": null,\\n        \\\"threshold1Color\\\": \\\"rgba(216, 200, 27, 0.27)\\\",\\n        \\\"threshold2\\\": null,\\n        \\\"threshold2Color\\\": \\\"rgba(234, 112, 112, 0.22)\\\"\\n      },\\n      \\\"id\\\": 34,\\n      \\\"isNew\\\": true,\\n      \\\"legend\\\": {\\n        \\\"alignAsTable\\\": true,\\n        \\\"avg\\\": true,\\n        \\\"current\\\": true,\\n        \\\"hideEmpty\\\": true,\\n        \\\"hideZero\\\": true,\\n        \\\"max\\\": false,\\n        \\\"min\\\": false,\\n        \\\"rightSide\\\": true,\\n        \\\"show\\\": true,\\n        \\\"sideWidth\\\": 200,\\n        \\\"sort\\\": \\\"current\\\",\\n        \\\"sortDesc\\\": true,\\n        \\\"total\\\": false,\\n        \\\"values\\\": true\\n      },\\n      \\\"lines\\\": true,\\n      \\\"linewidth\\\": 2,\\n      \\\"links\\\": [],\\n      \\\"nullPointMode\\\": \\\"null\\\",\\n      \\\"percentage\\\": false,\\n      \\\"pointradius\\\": 5,\\n      \\\"points\\\": false,\\n      \\\"renderer\\\": \\\"flot\\\",\\n      \\\"seriesOverrides\\\": [],\\n      \\\"span\\\": 12,\\n      \\\"stack\\\": false,\\n      \\\"steppedLine\\\": false,\\n      \\\"targets\\\": [{\\n        \\\"expr\\\": \\\"sum(container_fs_usage_bytes{image!=\\\\\\\"\\\\\\\",name=~\\\\\\\"^k8s_.*\\\\\\\",instance=~\\\\\\\"^$instance$\\\\\\\",namespace=~\\\\\\\"^$namespace$\\\\\\\"}) by (pod_name)\\\",\\n        \\\"interval\\\": \\\"\\\",\\n        \\\"intervalFactor\\\": 2,\\n        \\\"legendFormat\\\": \\\"{{ pod_name }}\\\",\\n        \\\"metric\\\": \\\"network\\\",\\n        \\\"refId\\\": \\\"A\\\",\\n        \\\"step\\\": 240\\n      }],\\n      \\\"timeFrom\\\": null,\\n      \\\"timeShift\\\": null,\\n      \\\"title\\\": \\\"Filesystem\\\",\\n      \\\"tooltip\\\": {\\n        \\\"msResolution\\\": false,\\n        \\\"shared\\\": false,\\n        \\\"sort\\\": 2,\\n        \\\"value_type\\\": \\\"cumulative\\\"\\n      },\\n      \\\"type\\\": \\\"graph\\\",\\n      \\\"xaxis\\\": {\\n        \\\"show\\\": true\\n      },\\n      \\\"yaxes\\\": [{\\n        \\\"format\\\": \\\"bytes\\\",\\n        \\\"label\\\": \\\"used\\\",\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": true\\n      }, {\\n        \\\"format\\\": \\\"short\\\",\\n        \\\"label\\\": null,\\n        \\\"logBase\\\": 1,\\n        \\\"max\\\": null,\\n        \\\"min\\\": null,\\n        \\\"show\\\": false\\n      }]\\n    }],\\n    \\\"showTitle\\\": true,\\n    \\\"title\\\": \\\"each pod\\\"\\n  }],\\n  \\\"time\\\": {\\n    \\\"from\\\": \\\"now-3d\\\",\\n    \\\"to\\\": \\\"now\\\"\\n  },\\n  \\\"timepicker\\\": {\\n    \\\"refresh_intervals\\\": [\\n      \\\"5s\\\",\\n      \\\"10s\\\",\\n      \\\"30s\\\",\\n      \\\"1m\\\",\\n      \\\"5m\\\",\\n      \\\"15m\\\",\\n      \\\"30m\\\",\\n      \\\"1h\\\",\\n      \\\"2h\\\",\\n      \\\"1d\\\"\\n    ],\\n    \\\"time_options\\\": [\\n      \\\"5m\\\",\\n      \\\"15m\\\",\\n      \\\"1h\\\",\\n      \\\"6h\\\",\\n      \\\"12h\\\",\\n      \\\"24h\\\",\\n      \\\"2d\\\",\\n      \\\"7d\\\",\\n      \\\"30d\\\"\\n    ]\\n  },\\n  \\\"templating\\\": {\\n    \\\"list\\\": [{\\n      \\\"allValue\\\": \\\".*\\\",\\n      \\\"current\\\": {},\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"hide\\\": 0,\\n      \\\"includeAll\\\": true,\\n      \\\"label\\\": \\\"Instance\\\",\\n      \\\"multi\\\": false,\\n      \\\"name\\\": \\\"instance\\\",\\n      \\\"options\\\": [],\\n      \\\"query\\\": \\\"label_values(instance)\\\",\\n      \\\"refresh\\\": 1,\\n      \\\"regex\\\": \\\"\\\",\\n      \\\"type\\\": \\\"query\\\"\\n    }, {\\n      \\\"current\\\": {},\\n      \\\"datasource\\\": \\\"${DS_PROMETHEUS}\\\",\\n      \\\"hide\\\": 0,\\n      \\\"includeAll\\\": true,\\n      \\\"label\\\": \\\"Namespace\\\",\\n      \\\"multi\\\": true,\\n      \\\"name\\\": \\\"namespace\\\",\\n      \\\"options\\\": [],\\n      \\\"query\\\": \\\"label_values(namespace)\\\",\\n      \\\"refresh\\\": 1,\\n      \\\"regex\\\": \\\"\\\",\\n      \\\"type\\\": \\\"query\\\"\\n    }]\\n  },\\n  \\\"annotations\\\": {\\n    \\\"list\\\": []\\n  },\\n  \\\"refresh\\\": false,\\n  \\\"schemaVersion\\\": 12,\\n  \\\"version\\\": 8,\\n  \\\"links\\\": [],\\n  \\\"gnetId\\\": 737\\n}\\n\",\"prometheus-datasource.json\":\"{\\n  \\\"name\\\": \\\"prometheus\\\",\\n  \\\"type\\\": \\\"prometheus\\\",\\n  \\\"url\\\": \\\"http://prometheus:9090\\\",\\n  \\\"access\\\": \\\"proxy\\\",\\n  \\\"basicAuth\\\": false\\n}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"grafana-import-dashboards\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "grafana-import-dashboards",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "prometheus.yaml": "global:\n  scrape_interval: 10s\n  scrape_timeout: 10s\n  evaluation_interval: 10s\nrule_files:\n  - \"/etc/prometheus-rules/*.rules\"\nscrape_configs:\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L37\n  - job_name: 'kubernetes-nodes'\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    kubernetes_sd_configs:\n      - role: node\n    relabel_configs:\n      - source_labels: [__address__]\n        regex: '(.*):10250'\n        replacement: '${1}:10255'\n        target_label: __address__\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L79\n  - job_name: 'kubernetes-endpoints'\n    kubernetes_sd_configs:\n      - role: endpoints\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n        action: replace\n        target_label: __scheme__\n        regex: (https?)\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n        action: replace\n        target_label: __address__\n        regex: (.+)(?::\\d+);(\\d+)\n        replacement: $1:$2\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n        action: replace\n        target_label: kubernetes_name\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L119\n  - job_name: 'kubernetes-services'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    kubernetes_sd_configs:\n      - role: service\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\n        action: keep\n        regex: true\n      - source_labels: [__address__]\n        target_label: __param_target\n      - target_label: __address__\n        replacement: blackbox\n      - source_labels: [__param_target]\n        target_label: instance\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_service_name]\n        target_label: kubernetes_name\n\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L156\n  - job_name: 'kubernetes-pods'\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n        action: replace\n        regex: (.+):(?:\\d+);(\\d+)\n        replacement: ${1}:${2}\n        target_label: __address__\n      - action: labelmap\n        regex: __meta_kubernetes_pod_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_pod_name]\n        action: replace\n        target_label: kubernetes_pod_name\n      - source_labels: [__meta_kubernetes_pod_container_port_number]\n        action: keep\n        regex: 9\\d{3}\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"prometheus.yaml\":\"global:\\n  scrape_interval: 10s\\n  scrape_timeout: 10s\\n  evaluation_interval: 10s\\nrule_files:\\n  - \\\"/etc/prometheus-rules/*.rules\\\"\\nscrape_configs:\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L37\\n  - job_name: 'kubernetes-nodes'\\n    tls_config:\\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\\n    kubernetes_sd_configs:\\n      - role: node\\n    relabel_configs:\\n      - source_labels: [__address__]\\n        regex: '(.*):10250'\\n        replacement: '${1}:10255'\\n        target_label: __address__\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L79\\n  - job_name: 'kubernetes-endpoints'\\n    kubernetes_sd_configs:\\n      - role: endpoints\\n    relabel_configs:\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\\n        action: keep\\n        regex: true\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\\n        action: replace\\n        target_label: __scheme__\\n        regex: (https?)\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\\n        action: replace\\n        target_label: __metrics_path__\\n        regex: (.+)\\n      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\\n        action: replace\\n        target_label: __address__\\n        regex: (.+)(?::\\\\d+);(\\\\d+)\\n        replacement: $1:$2\\n      - action: labelmap\\n        regex: __meta_kubernetes_service_label_(.+)\\n      - source_labels: [__meta_kubernetes_namespace]\\n        action: replace\\n        target_label: kubernetes_namespace\\n      - source_labels: [__meta_kubernetes_service_name]\\n        action: replace\\n        target_label: kubernetes_name\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L119\\n  - job_name: 'kubernetes-services'\\n    metrics_path: /probe\\n    params:\\n      module: [http_2xx]\\n    kubernetes_sd_configs:\\n      - role: service\\n    relabel_configs:\\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\\n        action: keep\\n        regex: true\\n      - source_labels: [__address__]\\n        target_label: __param_target\\n      - target_label: __address__\\n        replacement: blackbox\\n      - source_labels: [__param_target]\\n        target_label: instance\\n      - action: labelmap\\n        regex: __meta_kubernetes_service_label_(.+)\\n      - source_labels: [__meta_kubernetes_namespace]\\n        target_label: kubernetes_namespace\\n      - source_labels: [__meta_kubernetes_service_name]\\n        target_label: kubernetes_name\\n\\n  # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L156\\n  - job_name: 'kubernetes-pods'\\n    kubernetes_sd_configs:\\n      - role: pod\\n    relabel_configs:\\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\\n        action: keep\\n        regex: true\\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\\n        action: replace\\n        target_label: __metrics_path__\\n        regex: (.+)\\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\\n        action: replace\\n        regex: (.+):(?:\\\\d+);(\\\\d+)\\n        replacement: ${1}:${2}\\n        target_label: __address__\\n      - action: labelmap\\n        regex: __meta_kubernetes_pod_label_(.+)\\n      - source_labels: [__meta_kubernetes_namespace]\\n        action: replace\\n        target_label: kubernetes_namespace\\n      - source_labels: [__meta_kubernetes_pod_name]\\n        action: replace\\n        target_label: kubernetes_pod_name\\n      - source_labels: [__meta_kubernetes_pod_container_port_number]\\n        action: keep\\n        regex: 9\\\\d{3}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"prometheus-core\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "prometheus-core",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "data": {
    "cpu-usage.rules": "ALERT NodeCPUUsage\n  IF (100 - (avg by (instance) (irate(node_cpu{name=\"node-exporter\",mode=\"idle\"}[5m])) * 100)) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: High CPU usage detected\",\n    DESCRIPTION = \"{{$labels.instance}}: CPU usage is above 75% (current value is: {{ $value }})\"\n  }\n",
    "instance-availability.rules": "ALERT InstanceDown\n  IF up == 0\n  FOR 1m\n  LABELS { severity = \"page\" }\n  ANNOTATIONS {\n    summary = \"Instance {{ $labels.instance }} down\",\n    description = \"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute.\",\n  }\n",
    "low-disk-space.rules": "ALERT NodeLowRootDisk\n  IF ((node_filesystem_size{mountpoint=\"/root-disk\"} - node_filesystem_free{mountpoint=\"/root-disk\"} ) / node_filesystem_size{mountpoint=\"/root-disk\"} * 100) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: Low root disk space\",\n    DESCRIPTION = \"{{$labels.instance}}: Root disk usage is above 75% (current value is: {{ $value }})\"\n  }\n\nALERT NodeLowDataDisk\n  IF ((node_filesystem_size{mountpoint=\"/data-disk\"} - node_filesystem_free{mountpoint=\"/data-disk\"} ) / node_filesystem_size{mountpoint=\"/data-disk\"} * 100) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: Low data disk space\",\n    DESCRIPTION = \"{{$labels.instance}}: Data disk usage is above 75% (current value is: {{ $value }})\"\n  }\n",
    "mem-usage.rules": "ALERT NodeSwapUsage\n  IF (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: Swap usage detected\",\n    DESCRIPTION = \"{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})\"\n  }\n\nALERT NodeMemoryUsage\n  IF (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached)/(node_memory_MemTotal)*100)) > 75\n  FOR 2m\n  LABELS {\n    severity=\"page\"\n  }\n  ANNOTATIONS {\n    SUMMARY = \"{{$labels.instance}}: High memory usage detected\",\n    DESCRIPTION = \"{{$labels.instance}}: Memory usage is above 75% (current value is: {{ $value }})\"\n  }\n"
  },
  "kind": "ConfigMap",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"cpu-usage.rules\":\"ALERT NodeCPUUsage\\n  IF (100 - (avg by (instance) (irate(node_cpu{name=\\\"node-exporter\\\",mode=\\\"idle\\\"}[5m])) * 100)) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: High CPU usage detected\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: CPU usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\",\"instance-availability.rules\":\"ALERT InstanceDown\\n  IF up == 0\\n  FOR 1m\\n  LABELS { severity = \\\"page\\\" }\\n  ANNOTATIONS {\\n    summary = \\\"Instance {{ $labels.instance }} down\\\",\\n    description = \\\"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute.\\\",\\n  }\\n\",\"low-disk-space.rules\":\"ALERT NodeLowRootDisk\\n  IF ((node_filesystem_size{mountpoint=\\\"/root-disk\\\"} - node_filesystem_free{mountpoint=\\\"/root-disk\\\"} ) / node_filesystem_size{mountpoint=\\\"/root-disk\\\"} * 100) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: Low root disk space\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Root disk usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\\nALERT NodeLowDataDisk\\n  IF ((node_filesystem_size{mountpoint=\\\"/data-disk\\\"} - node_filesystem_free{mountpoint=\\\"/data-disk\\\"} ) / node_filesystem_size{mountpoint=\\\"/data-disk\\\"} * 100) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: Low data disk space\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Data disk usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\",\"mem-usage.rules\":\"ALERT NodeSwapUsage\\n  IF (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: Swap usage detected\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\\nALERT NodeMemoryUsage\\n  IF (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached)/(node_memory_MemTotal)*100)) \\u003e 75\\n  FOR 2m\\n  LABELS {\\n    severity=\\\"page\\\"\\n  }\\n  ANNOTATIONS {\\n    SUMMARY = \\\"{{$labels.instance}}: High memory usage detected\\\",\\n    DESCRIPTION = \\\"{{$labels.instance}}: Memory usage is above 75% (current value is: {{ $value }})\\\"\\n  }\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"name\":\"prometheus-rules\",\"namespace\":\"monitoring\"}}\n"
    },
    "name": "prometheus-rules",
    "namespace": "monitoring"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"name\":\"redis-commander\"},\"name\":\"redis-commander\",\"namespace\":\"redis\"},\"spec\":{\"ports\":[{\"port\":8081,\"targetPort\":8081}],\"selector\":{\"app\":\"redis-commander\"},\"type\":\"NodePort\"}}\n"
    },
    "labels": {
      "name": "redis-commander"
    },
    "name": "redis-commander",
    "namespace": "redis"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 31852,
        "port": 8081,
        "protocol": "TCP",
        "targetPort": 8081
      }
    ],
    "selector": {
      "app": "redis-commander"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"name\":\"sentinel\",\"role\":\"service\"},\"name\":\"redis-sentinel\",\"namespace\":\"redis\"},\"spec\":{\"ports\":[{\"port\":26379,\"targetPort\":26379}],\"selector\":{\"redis-sentinel\":\"true\"}}}\n"
    },
    "labels": {
      "name": "sentinel",
      "role": "service"
    },
    "name": "redis-sentinel",
    "namespace": "redis"
  },
  "spec": {
    "ports": [
      {
        "port": 26379,
        "protocol": "TCP",
        "targetPort": 26379
      }
    ],
    "selector": {
      "redis-sentinel": "true"
    },
    "sessionAffinity": "None",
    "type": "ClusterIP"
  }
}
{
  "apiVersion": "v1",
  "kind": "Service",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"name\":\"redis-svc\",\"role\":\"service\"},\"name\":\"redis-svc\",\"namespace\":\"redis\"},\"spec\":{\"ports\":[{\"port\":6379}],\"selector\":{\"name\":\"redis\"},\"type\":\"NodePort\"}}\n"
    },
    "labels": {
      "name": "redis-svc",
      "role": "service"
    },
    "name": "redis-svc",
    "namespace": "redis"
  },
  "spec": {
    "ports": [
      {
        "nodePort": 30772,
        "port": 6379,
        "protocol": "TCP",
        "targetPort": 6379
      }
    ],
    "selector": {
      "name": "redis"
    },
    "sessionAffinity": "None",
    "type": "NodePort"
  }
}
{
  "apiVersion": "v1",
  "kind": "ReplicationController",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ReplicationController\",\"metadata\":{\"annotations\":{},\"name\":\"redis\",\"namespace\":\"redis\"},\"spec\":{\"replicas\":1,\"selector\":{\"name\":\"redis\"},\"template\":{\"metadata\":{\"labels\":{\"name\":\"redis\"}},\"spec\":{\"containers\":[{\"image\":\"gcr.io/google_containers/redis:v1\",\"name\":\"redis\",\"ports\":[{\"containerPort\":6379}],\"resources\":{\"limits\":{\"cpu\":\"0.1\"}},\"volumeMounts\":[{\"mountPath\":\"/redis-master-data\",\"name\":\"data\"}]}],\"volumes\":[{\"emptyDir\":{},\"name\":\"data\"}]}}}}\n"
    },
    "labels": {
      "name": "redis"
    },
    "name": "redis",
    "namespace": "redis"
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "name": "redis"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "name": "redis"
        }
      },
      "spec": {
        "containers": [
          {
            "image": "gcr.io/google_containers/redis:v1",
            "imagePullPolicy": "IfNotPresent",
            "name": "redis",
            "ports": [
              {
                "containerPort": 6379,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "cpu": "100m"
              }
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "volumeMounts": [
              {
                "mountPath": "/redis-master-data",
                "name": "data"
              }
            ]
          }
        ],
        "schedulerName": "default-scheduler",
        "volumes": [
          {
            "emptyDir": {},
            "name": "data"
          }
        ]
      }
    }
  }
}
{
  "apiVersion": "v1",
  "kind": "ReplicationController",
  "metadata": {
    "annotations": {
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ReplicationController\",\"metadata\":{\"annotations\":{},\"name\":\"redis-sentinel\",\"namespace\":\"redis\"},\"spec\":{\"replicas\":1,\"selector\":{\"redis-sentinel\":\"true\"},\"template\":{\"metadata\":{\"labels\":{\"name\":\"redis-sentinel\",\"redis-sentinel\":\"true\",\"role\":\"sentinel\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"SENTINEL\",\"value\":\"true\"}],\"image\":\"gcr.io/google_containers/redis:v1\",\"name\":\"sentinel\",\"ports\":[{\"containerPort\":26379}]}]}}}}\n"
    },
    "labels": {
      "name": "redis-sentinel",
      "redis-sentinel": "true",
      "role": "sentinel"
    },
    "name": "redis-sentinel",
    "namespace": "redis"
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "redis-sentinel": "true"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "name": "redis-sentinel",
          "redis-sentinel": "true",
          "role": "sentinel"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "SENTINEL",
                "value": "true"
              }
            ],
            "image": "gcr.io/google_containers/redis:v1",
            "imagePullPolicy": "IfNotPresent",
            "name": "sentinel",
            "ports": [
              {
                "containerPort": 26379,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "v1",
  "data": {
    ".dockercfg": "eyAiaHR0cDovLzM0LjE5My4xNDguMTU6NTAwMCI6IHsgImF1dGgiOiAiIiwgImVtYWlsIjogImZha2UuZW1haWxAc3Bpbm5ha2VyLmlvIiB9IH0="
  },
  "kind": "Secret",
  "metadata": {
    "name": "ncl-repositry",
    "namespace": "redis"
  },
  "type": "kubernetes.io/dockercfg"
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "Deployment",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/revision": "1",
      "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"redis-commander\"},\"name\":\"redis-commander\",\"namespace\":\"redis\"},\"spec\":{\"replicas\":3,\"selector\":{\"matchLabels\":{\"app\":\"redis-commander\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"redis-commander\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"REDIS_HOSTS\",\"value\":\"redis-svc\"}],\"image\":\"rediscommander/redis-commander:latest\",\"name\":\"redis-commander\",\"ports\":[{\"containerPort\":8081}]}]}}}}\n"
    },
    "labels": {
      "app": "redis-commander"
    },
    "name": "redis-commander",
    "namespace": "redis"
  },
  "spec": {
    "progressDeadlineSeconds": 600,
    "replicas": 3,
    "revisionHistoryLimit": 2,
    "selector": {
      "matchLabels": {
        "app": "redis-commander"
      }
    },
    "strategy": {
      "rollingUpdate": {
        "maxSurge": "25%",
        "maxUnavailable": "25%"
      },
      "type": "RollingUpdate"
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "redis-commander"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "REDIS_HOSTS",
                "value": "redis-svc"
              }
            ],
            "image": "rediscommander/redis-commander:latest",
            "imagePullPolicy": "Always",
            "name": "redis-commander",
            "ports": [
              {
                "containerPort": 8081,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
{
  "apiVersion": "extensions/v1beta1",
  "kind": "ReplicaSet",
  "metadata": {
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "3",
      "deployment.kubernetes.io/max-replicas": "4",
      "deployment.kubernetes.io/revision": "1"
    },
    "labels": {
      "app": "redis-commander",
      "pod-template-hash": "1149188520"
    },
    "name": "redis-commander-1149188520",
    "namespace": "redis",
    "ownerReferences": [
      {
        "apiVersion": "extensions/v1beta1",
        "blockOwnerDeletion": true,
        "controller": true,
        "kind": "Deployment",
        "name": "redis-commander",
        "uid": "1c8d9633-e624-11e7-b3e1-0e45ffccebb0"
      }
    ]
  },
  "spec": {
    "replicas": 3,
    "selector": {
      "matchLabels": {
        "app": "redis-commander",
        "pod-template-hash": "1149188520"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "app": "redis-commander",
          "pod-template-hash": "1149188520"
        }
      },
      "spec": {
        "containers": [
          {
            "env": [
              {
                "name": "REDIS_HOSTS",
                "value": "redis-svc"
              }
            ],
            "image": "rediscommander/redis-commander:latest",
            "imagePullPolicy": "Always",
            "name": "redis-commander",
            "ports": [
              {
                "containerPort": 8081,
                "protocol": "TCP"
              }
            ],
            "resources": {},
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File"
          }
        ],
        "schedulerName": "default-scheduler"
      }
    }
  }
}
