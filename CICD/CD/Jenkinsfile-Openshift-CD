/*********************************************************************
***** Description :: Test Jenkinsfile. *****
***** Revision *****:: 1.0*****
**********************************************************************/

//this function will be used to pull the code from the bitbucket where jenkinsfile is placed
def funCodeCheckout(){
checkout scm
}

//this will change the version number in the openshift param files and commit back to the bitbucket
def funParamChange() {
//this command will get the older version if it is stored in the params files in the form: "IMAGE_VERSION=<version>"
def oldver = sh returnStdout: true, script: "grep _VERSION $WORKSPACE/path-to-param-files-folder/params/$ENV/$ServiceName | cut -f2 -d'='"
//this will update the version number
def myFile = new File("$WORKSPACE/path-to-params-folder/params/$ENV/$ServiceName")
def fileText = myFile.text
if (oldver.trim() == Version.trim()){
echo "Version Not changed"
}
else{
echo "Version changed"
fileText = (fileText =~ /$oldver/).replaceFirst("$Version\n")
myFile.write(fileText)
sh '''
cd $WORKSPACE/path-to-params-folder/params/$ENV
git add .
git commit -m "JNK-123 Updating version number for param" $ServiceName
git push https://ciduser:C0nT1nte@bitbucket.org/<bitbucket-url> HEAD:master'''
} 
}

//deployment on OC cluster
def funDeploy() {
sh """
cd $WORKSPACE/path-to-yml-files
oc login ${env.OC_DEV_QA1} -u ${env.UNAME} -p ${env.PASSWORD}  --insecure-skip-tls-verify=true
oc project $PROJECT
oc process -f $YmlServiceName --param-file params/$ENV/$ServiceName | oc apply -n $PROJECT -f -
"""
}


//this will resolve the problem of multiple commits at the same time
node () {
stage ('Checkout Templates') {funCodeCheckout()}
stage ('Version Change in Param') {
try {
funParamChange()
}
catch(error) {
echo "Git push failed, let's retry if accepted"
retry(2) {
funCodeCheckout()
funParamChange()
}
}
}
stage ('Openshift Deployment') {funDeploy()}
}
